<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sky-User-Center项目介绍</title>
      <link href="//posts/c43bf339.html"/>
      <url>//posts/c43bf339.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sky-User-Center项目介绍"><a href="#Sky-User-Center项目介绍" class="headerlink" title="Sky-User-Center项目介绍"></a>Sky-User-Center项目介绍</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>一个简单的用户管理系统，实现了用户注册、登录、查询等基础功能。</p><blockquote><p> 本项目前后端均使用Docker容器部署</p></blockquote><p><strong>项目在线访问链接：</strong> <a href="http://skyuc.twintea.top/">Sky-User-Center</a></p><p>[登录]</p><p>（管理员：账号：onlineadmin；密码：12345678）</p><p><img src="https://img.twintea.top/Projects_Notes/sky-user-center-readme/202303121800164.png" alt="image-20230312171048928"></p><p>[注册] （注册码为后续优化部分，目前在注册时可以随便填）</p><p>默认注册成功之后为普通用户</p><p><img src="https://img.twintea.top/Projects_Notes/sky-user-center-readme/202303121800165.png" alt="image-20230312171306695"></p><p>普通用户的登录成功后的展示页面：</p><p>（没有管理页面）</p><p><img src="https://img.twintea.top/Projects_Notes/sky-user-center-readme/202303121800166.png" alt="image-20230312171834233"></p><p>当普通用户尝试访问管理页面时候：</p><p><img src="https://img.twintea.top/Projects_Notes/sky-user-center-readme/202303121800167.png" alt="image-20230312171940333"></p><p>具有管理员权限的用户登录：</p><p><img src="https://img.twintea.top/Projects_Notes/sky-user-center-readme/202303121800168.png" alt="image-20230312172121805"></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="前端🐜"><a href="#前端🐜" class="headerlink" title="前端🐜"></a>前端🐜</h3><p>主要运用阿里 Ant Design 生态：</p><ul><li>HTML + CSS + JavaScript 三件套</li><li>React 开发框架</li><li>Ant Design Pro 项目模板</li><li>Ant Design 端组件库</li><li>Umi 开发框架</li><li>Umi Request 请求库</li></ul><h3 id="后端🍃"><a href="#后端🍃" class="headerlink" title="后端🍃"></a>后端🍃</h3><ul><li>Java 编程语言</li><li>Spring + SpringMVC + SpringBoot 框架</li><li>MyBatis + MyBatis Plus 数据访问框架</li><li>MySQL 数据库</li><li>jUnit 单元测试库</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>详见<br><a href="https://blog.twintea.top/posts/6e6359df.html">项目部署和上线</a></p><ul><li><p>单机部署</p><ul><li><p>前端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//安装依赖</span><br><span class="line">yarn</span><br><span class="line">//项目启动</span><br><span class="line">npm run start:no-mock</span><br></pre></td></tr></table></figure></li></ul></li><li><p>后端</p><p>修改application.yml的数据库配置</p><p>然后在idea里面找到启动类启动就行了</p></li><li><p>Nginx</p></li><li><p>容器</p></li></ul><h3 id="开发笔记🤔"><a href="#开发笔记🤔" class="headerlink" title="开发笔记🤔"></a>开发笔记🤔</h3><p><a href="https://blog.twintea.top/posts/8036cfa7.html">Sky-User-Center开发笔记</a></p><h3 id="后续优化🤭"><a href="#后续优化🤭" class="headerlink" title="后续优化🤭"></a>后续优化🤭</h3><p>(<del>看情况，当后续项目用到管理系统再以此为模板更新</del>)</p><ol><li>功能扩充<ol><li>管理员创建用户、修改用户信息、删除用户</li><li>上传头像</li><li>按照更多的条件去查询用户</li><li>更改权限</li></ol></li><li>修改 Bug</li><li>项目登录改为分布式 session（单点登录 - redis）</li><li>通用性<ol><li>set-cookie domain 域名更通用，比如改为 *.xxx.com</li><li>把用户管理系统 &#x3D;&gt; 用户中心（之后所有的服务都请求这个后端）</li></ol></li><li>后台添加全局请求拦截器（统一去判断用户权限、统一记录请求日志）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sky-User-Center </tag>
            
            <tag> 用户中心 </tag>
            
            <tag> 项目介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sky-User-Center开发笔记</title>
      <link href="//posts/8036cfa7.html"/>
      <url>//posts/8036cfa7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sky-User-Center开发笔记"><a href="#Sky-User-Center开发笔记" class="headerlink" title="Sky-User-Center开发笔记"></a>Sky-User-Center开发笔记</h1><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><h3 id="1、前端初始化"><a href="#1、前端初始化" class="headerlink" title="1、前端初始化"></a>1、前端初始化</h3><ol><li><p>下载nodejs</p></li><li><p>下载npm和yarn</p></li><li><p><a href="https://pro.ant.design/zh-CN/">开箱即用的中台前端&#x2F;设计解决方案 - Ant Design Pro</a>，根据文档快速初始化，注意选择简单脚手架（simple)</p></li><li><p>运行项目</p><p>登录界面如图：</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230302190745831.png" alt="image-20230302190745831" style="zoom: 67%;" /><p>登录成功如图：</p></li></ol><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230302191010574.png" alt="image-20230302191010574" style="zoom: 50%;" /><ol start="5"><li><p>安装Umi UI</p><p>这个工具可以帮助我们快速生成页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p>等待安装成功重启项目，发现页面右下角多了这个图标</p></li></ol><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230302192605487.png" alt="image-20230302192605487" style="zoom:50%;" /><p>​</p><ol start="6"><li><p>点击这个图标，生成分析页面</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230302193042687.png" alt="image-20230302193042687" style="zoom:50%;" /></li></ol><p>​等待编译下载完成，我们就能得到一个分析页面</p>   <img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230302194212642.png" alt="image-20230302194212642" style="zoom:50%;" /><ol start="7"><li><p>项目简化（去除不需要的部分）</p><ul><li><p>去除国际化</p><p>运行”i18n-remove”脚本</p></li><li><p>其他根据自身需求删除</p></li></ul></li></ol><p>​</p><h3 id="2、后端初始化"><a href="#2、后端初始化" class="headerlink" title="2、后端初始化"></a>2、后端初始化</h3><p>springboot初始化、maven引入pom依赖、编写yml文件；</p><p>pom.xml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.7.9&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.twintea&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;user-center&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;user-center&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;user-center&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.13&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;excludes&gt;</span><br><span class="line">                        &lt;exclude&gt;</span><br><span class="line">                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">                        &lt;/exclude&gt;</span><br><span class="line">                    &lt;/excludes&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>根据实际需求，</p><ul><li>设计表</li><li>表的字段</li><li>字段的类型</li><li>是否需要给字段添加索引</li><li>是否需要设计表与表之间的关联</li></ul><p>建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id            <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    user_name     <span class="type">varchar</span>(<span class="number">256</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    user_account  <span class="type">varchar</span>(<span class="number">256</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;用户账号&#x27;</span>,</span><br><span class="line">    avatar_url    <span class="type">varchar</span>(<span class="number">1024</span>)                      <span class="keyword">null</span> comment <span class="string">&#x27;用户头像地址&#x27;</span>,</span><br><span class="line">    gender        tinyint                            <span class="keyword">null</span> comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    user_password <span class="type">varchar</span>(<span class="number">512</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">    email         <span class="type">varchar</span>(<span class="number">512</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    user_status   <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">null</span> comment <span class="string">&#x27;用户状态 0-正常&#x27;</span>,</span><br><span class="line">    phone         <span class="type">varchar</span>(<span class="number">128</span>)                       <span class="keyword">null</span> comment <span class="string">&#x27;用户手机号码&#x27;</span>,</span><br><span class="line">    create_time   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户创建时间&#x27;</span>,</span><br><span class="line">    update_time   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户更新时间&#x27;</span>,</span><br><span class="line">    is_delete     tinyint  <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否被删除 0-正常&#x27;</span></span><br><span class="line">    user_role     <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户角色 0-默认 1-管理员&#x27;</span></span><br><span class="line">)</span><br><span class="line">    comment <span class="string">&#x27;用户&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="登录、注册的逻辑"><a href="#登录、注册的逻辑" class="headerlink" title="登录、注册的逻辑"></a>登录、注册的逻辑</h2><h3 id="注册逻辑"><a href="#注册逻辑" class="headerlink" title="注册逻辑"></a>注册逻辑</h3><ol><li>用户在前端界面输入账户和密码、校验码（可能是手机验证码TODO)</li><li>校验用户的账户、输入的密码和二次输入的密码是否符合要求<ol><li>非空</li><li>账户长度<strong>不小于</strong>4位</li><li>密码<strong>不小于</strong>8位并且不能输入空格</li><li>账户不能重复</li><li>账户不包含特殊字符</li><li>密码和二次输入密码保持一致</li></ol></li><li>对密码进行加密（数据库保存加密后的密码，而不是明文密码</li><li>向数据库插入用户数据</li></ol><h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><ol><li><p>校验</p><ol><li>非空</li><li>账户长度<strong>不小于</strong>4位</li><li>密码<strong>不小于</strong>8位并且不能输入空格</li><li>账户不包含特殊字符</li></ol></li><li><p>校验密码是否输入正确，要和数据库中的密文密码去进行对比</p></li><li><p>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</p></li><li><p>将用户的登录态（一般位session），将其存储在服务器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">userLogin</span><span class="params">(String userAccount, String userPassword, HttpServletRequest request)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">              <span class="comment">//4.记录用户的登录态</span></span><br><span class="line">        request.getSession().setAttribute(USER_LOGIN_STATE,safetyUser);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>返回脱敏后的用户信息</p></li></ol><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>用户管理仅允许管理员操作，所以务必<strong>鉴权！！！</strong></p><ol><li>用户查询<ol><li>根据用户名查询</li></ol></li><li>用户删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否为管理员</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 是或者不是管理员</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Boolean <span class="title function_">isAdmin</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getSession().getAttribute(USER_LOGIN_STATE);</span><br><span class="line">      <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getUserRole() != ADMIN_ROLE) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>application.yml指定接口全局api</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure><h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><h3 id="修整"><a href="#修整" class="headerlink" title="修整"></a>修整</h3><p>根据自身需求删减和修改模板的代码</p><h3 id="对接后台的接口"><a href="#对接后台的接口" class="headerlink" title="对接后台的接口"></a>对接后台的接口</h3><p>找到该文件</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230308000151748.png" alt="image-20230308000151748"></p><p>定位到 handleSubmit 方法的代码</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230308000244451.png" alt="image-20230308000244451"></p><p>点击LoginParams会跳转到app.tsx的以下代码：</p><p>根据后端的参数名称修改这些字段（<strong>注意要使用全局修改！！！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">type</span> <span class="variable">LoginParams</span> <span class="operator">=</span> &#123;</span><br><span class="line">  userAccount?: string; </span><br><span class="line">  userPassword?: string;</span><br><span class="line">  autoLogin?: <span class="type">boolean</span>;</span><br><span class="line">  type?: string;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着回到 handleSubmit 方法</p><p>找到如图位置，并根据后端的参数名称修改字段，并且根据需要增加校验规则</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230308004235516.png" alt="image-20230308004235516" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230308004319099.png" alt="image-20230308004319099" style="zoom:67%;" /><p>定位到 login 方法,修改红框处的 url 为后端接口的地址</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230308000824801.png" alt="image-20230308000824801" style="zoom:67%;" /><p>AntDesign Pro提供了配置代理的方式，这里我们使用这种方式</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230308004500773.png" alt="image-20230308004500773" style="zoom:67%;" /><p>在完成上述修改后，请求的地址就变成了<a href="http://localhost:8000/api/user/login%EF%BC%8C">http://localhost:8000/api/user/login，</a></p><p>请求的地址通过AntDesign Pro提供的代理自动代理到 <a href="http://localhost:8080/api/user/login">http://localhost:8080/api/user/login</a></p><p>注册页面也采用类似方法完成</p><h2 id="获取当前用户登录态、信息接口"><a href="#获取当前用户登录态、信息接口" class="headerlink" title="获取当前用户登录态、信息接口"></a>获取当前用户登录态、信息接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/current&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;User&gt; <span class="title function_">getCurrentUser</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getSession().getAttribute(USER_LOGIN_STATE);</span><br><span class="line">    <span class="comment">/*用户的数据可能会发生改变，所以不能直接返回从session取到的user</span></span><br><span class="line"><span class="comment">    1. 可以利用缓存更新更新用户的数据，从缓存中去取</span></span><br><span class="line"><span class="comment">    2.直接查库（这里选用这种方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//用到了全局异常处理，后端优化部分有介绍</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_LOGIN);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> userService.getById(user.getId());</span><br><span class="line">    <span class="keyword">if</span> (!Objects.equals(currentUser.getUserStatus(), VALID_STATUS))&#123;</span><br><span class="line">          <span class="comment">//用到了全局异常处理，后端优化有介绍</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.INVALID_ACCOUNT_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">currentSafetyUser</span> <span class="operator">=</span> userService.getSafetyUser(currentUser);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(currentSafetyUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户管理后台的前端开发"><a href="#用户管理后台的前端开发" class="headerlink" title="用户管理后台的前端开发"></a>用户管理后台的前端开发</h2><h3 id="新建管理页面"><a href="#新建管理页面" class="headerlink" title="新建管理页面"></a>新建管理页面</h3><p>在page文件夹下新建一个Admin文件，新建一个UserManage文件，到route.ts文件添加一个路由</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230310161520724.png" alt="image-20230310161520724" style="zoom:67%;" /><p>添加路由之后尝试访问发现无权限，原因是该地址访问有权限管理，观察发现有<code>access:&#39;canAdmin&#39;</code>，即管理员才能访问</p><p>找到<code>access.ts</code>文件，将判断管理员的逻辑改成我们设置的逻辑</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230310161929226.png" alt="image-20230310161929226" style="zoom: 50%;" /><p>然后，我们在<code>UserManage</code>文件编写代码发现前端并不能正确显示，而是固定显示某个页面，经过排查发现，问题是在<code>component:&#39;./Admin&#39;</code></p><p><code>Admin.tsx</code>内的文本内容就是页面展示的内容，这说明这个页面写死了，我们修改一下，</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230310162448822.png" alt="image-20230310162448822" style="zoom:67%;" /><p>终于，我们在<code>UserManage</code>文件编写的代码能够正确显示出来了，</p><h3 id="编写管理页面"><a href="#编写管理页面" class="headerlink" title="编写管理页面"></a>编写管理页面</h3><p>到官方文档使用使用现有的高级表格<a href="https://procomponents.ant.design/components/table?current=1&pageSize=5">ProTable - 高级表格 - Pro Components (ant.design)</a></p><p>参考官方文档修改代码,效果如图：</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230310163150236.png" alt="image-20230310163150236" style="zoom: 50%;" /><h2 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h2><p>（todo 用户校验）</p><h3 id="通用返回对象"><a href="#通用返回对象" class="headerlink" title="通用返回对象"></a>通用返回对象</h3><p>目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功还是失败</p><p>200、404、500、502、503</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span> <span class="comment">// 业务状态码</span></span><br><span class="line">   <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;twintea&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">50001</span> <span class="comment">// 业务状态码</span></span><br><span class="line">   <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">   <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户操作异常、xxx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseResponse</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">27627570252259361L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code, T data, String msg,String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code, T data, String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, data, <span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(ErrorCode errorCode)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(errorCode.getCode(),<span class="literal">null</span>,errorCode.getMsg(),errorCode.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义错误码，返回类支持返回正常和错误"><a href="#自定义错误码，返回类支持返回正常和错误" class="headerlink" title="自定义错误码，返回类支持返回正常和错误"></a>自定义错误码，返回类支持返回正常和错误</h3><p>前端的HTTP状态码默认的值比较少，不够精准</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">&quot;ok&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">    PARAMS_ERROR(<span class="number">40000</span>, <span class="string">&quot;请求参数错误&quot;</span>, <span class="string">&quot;请求参数错误&quot;</span>),</span><br><span class="line">    NULL_ERROR(<span class="number">40001</span>, <span class="string">&quot;请求数据为空&quot;</span>, <span class="string">&quot;请求数据为空&quot;</span>),</span><br><span class="line">    NO_LOGIN(<span class="number">40100</span>, <span class="string">&quot;未登录&quot;</span>, <span class="string">&quot;未登录&quot;</span>),</span><br><span class="line">    NO_AUTH(<span class="number">40100</span>, <span class="string">&quot;无权限&quot;</span>, <span class="string">&quot;无权限&quot;</span>),</span><br><span class="line">    SYSTEM_ERROR(<span class="number">50000</span>, <span class="string">&quot;系统内部异常&quot;</span>, <span class="string">&quot;系统内部异常&quot;</span>),</span><br><span class="line">    INVALID_ACCOUNT_ERROR(<span class="number">40300</span>, <span class="string">&quot;账号异常，请联系管理员&quot;</span>, <span class="string">&quot;账号异常，请联系管理员&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    ErrorCode(<span class="type">int</span> code, String msg, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义返回工具类"><a href="#自定义返回工具类" class="headerlink" title="自定义返回工具类"></a>自定义返回工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回结果工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>&lt;&gt;(<span class="number">0</span>,data,<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  BaseResponse <span class="title function_">error</span><span class="params">(ErrorCode errorCode)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  BaseResponse <span class="title function_">error</span><span class="params">(<span class="type">int</span> code,String msg,String descpriton)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(code,<span class="literal">null</span>,msg,descpriton);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  BaseResponse <span class="title function_">error</span><span class="params">(ErrorCode errorCode,String msg,String descpriton)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(errorCode.getCode(),<span class="literal">null</span>,msg,descpriton);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  BaseResponse <span class="title function_">error</span><span class="params">(ErrorCode errorCode,String descpriton)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(errorCode.getCode(),<span class="literal">null</span>,errorCode.getMsg(),descpriton);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装全局异常处理器"><a href="#封装全局异常处理器" class="headerlink" title="封装全局异常处理器"></a>封装全局异常处理器</h3><blockquote><ol><li><p>定义业务异常类</p><ol><li>相对于 java 的异常类，支持更多字段</li><li>自定义构造函数，更灵活 &#x2F; 快捷的设置字段</li></ol></li><li><p>编写全局异常处理器（利用 Spring AOP，在调用方法前后进行额外的处理）</p></li></ol></blockquote><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>捕获代码中所有的异常，内部消化，让前端得到更详细的业务报错 &#x2F; 信息</li><li>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</li><li>集中处理，比如记录日志</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String descriptionn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String message, <span class="type">int</span> code, String descriptionn)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.descriptionn = descriptionn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.descriptionn = errorCode.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode,String descriptionn)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.descriptionn = descriptionn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse <span class="title function_">businessExceptionHandler</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;businessException: &quot;</span>+e.getMessage(),e);</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.error(e.getCode(),e.getMessage(), e.getDescriptionn());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse <span class="title function_">runtimeException</span><span class="params">(RuntimeException e)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;runtimeException&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.error(ErrorCode.SYSTEM_ERROR,e.getMessage(),<span class="string">&quot;系统内部错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h2><h3 id="全局响应处理"><a href="#全局响应处理" class="headerlink" title="全局响应处理"></a>全局响应处理</h3><p>应用场景：我们需要对接口的 <strong>通用响应</strong> 进行统一处理，比如从 response 中取出 data；或者根据 code 去集中处理错误，比如用户未登录、没权限之类的。</p><p>优势：不用在每个接口请求中都去写相同的逻辑</p><p>实现：参考你用的请求封装工具的官方文档，比如 umi-request（<a href="https://github.com/umijs/umi-request#interceptor%E3%80%81https://blog.csdn.net/huantai3334/article/details/116780020%EF%BC%89%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%94%A8">https://github.com/umijs/umi-request#interceptor、https://blog.csdn.net/huantai3334/article/details/116780020）。如果你用</a> <strong>axios</strong>，参考 axios 的文档。</p><p>创建新的文件，在该文件中配置一个全局请求类。在发送请求时，使用我们自己的定义的全局请求类。</p>]]></content>
      
      
      <categories>
          
          <category> 项目相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sky-User-Center </tag>
            
            <tag> 用户中心 </tag>
            
            <tag> 项目开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置数据库</title>
      <link href="//posts/41803b43.html"/>
      <url>//posts/41803b43.html</url>
      
        <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>线上展示的项目，在特定时间段重置数据库</p><p>其实就是在spring boot上的特定时间运行<code>.sql</code>文件。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>使用定时注解，请记得在启动类添加注解<code>@EnableScheduling</code></p><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitDatabaseController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(InitDatabaseController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataService dataService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="comment">//定时任务 每天8点和14点重置数据库</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 8,14 * * ? &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RespBean <span class="title function_">resetDatabase</span><span class="params">()</span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;【开始】重置数据库vhr的数据&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (!dataService.resetDataBase(<span class="string">&quot;vhrbck.sql&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> RespBean.error(<span class="string">&quot;重置数据库失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cost</span> <span class="operator">=</span> <span class="string">&quot;用时：&quot;</span> + (end - start) / <span class="number">1000.0</span> + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;【结束】重置成功：&quot;</span> + cost);</span><br><span class="line">        <span class="keyword">return</span> RespBean.ok(<span class="string">&quot;重置数据库成功!&quot;</span>, cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件放在 resources目录下</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">resetDataBase</span><span class="params">(String sqlScriptName)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从Druid数据源（数据库连接池）中获取一个数据库连接</span></span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            <span class="type">ClassPathResource</span> <span class="variable">rc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(sqlScriptName);</span><br><span class="line">            <span class="type">EncodedResource</span> <span class="variable">er</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EncodedResource</span>(rc, StandardCharsets.UTF_8);</span><br><span class="line">            <span class="comment">// ScriptUtils：是SpringBoot源码中使用的工具类，能够执行Sql脚本</span></span><br><span class="line">            <span class="comment">// sql脚本执行中途，遇到错误，默认会抛出异常，停止执行</span></span><br><span class="line">            <span class="comment">// 建议传入参数true，忽略中途的错误，但是后面4个参数又是必需的，只需要填入源码中的默认值即可</span></span><br><span class="line">            ScriptUtils.executeSqlScript(conn, er, <span class="literal">true</span>, <span class="literal">true</span>,</span><br><span class="line">                    <span class="string">&quot;--&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;/*&quot;</span>, <span class="string">&quot;*/&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 不要忘了释放连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重置数据库的接口请求不能过于频繁，因此可以搭配 <code>限制接口请求次数</code>方法来使用</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySql </tag>
            
            <tag> 项目相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限制接口访问</title>
      <link href="//posts/b0106d5d.html"/>
      <url>//posts/b0106d5d.html</url>
      
        <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>让用户访问某个接口时，限制一定时间只能访问N次</p><p>下面介绍后端的限制方法：</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>服务器通过redis记录请求的次数，如果次数超过限制就不给访问。</p><p>设置redis 的key的时效性，过期自动销毁</p><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求限制的自定义注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span> 注解可修饰的对象范围，ElementType.METHOD 作用于方法，ElementType.TYPE 作用于类</span></span><br><span class="line"><span class="comment"> * (ElementType)取值有：</span></span><br><span class="line"><span class="comment"> * 　　　　1.CONSTRUCTOR:用于描述构造器</span></span><br><span class="line"><span class="comment"> * 　　　　2.FIELD:用于描述域</span></span><br><span class="line"><span class="comment"> * 　　　　3.LOCAL_VARIABLE:用于描述局部变量</span></span><br><span class="line"><span class="comment"> * 　　　　4.METHOD:用于描述方法</span></span><br><span class="line"><span class="comment"> * 　　　　5.PACKAGE:用于描述包</span></span><br><span class="line"><span class="comment"> * 　　　　6.PARAMETER:用于描述参数</span></span><br><span class="line"><span class="comment"> * 　　　　7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Retention</span>定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；</span></span><br><span class="line"><span class="comment"> * 而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，</span></span><br><span class="line"><span class="comment"> * 而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。</span></span><br><span class="line"><span class="comment"> * 使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</span></span><br><span class="line"><span class="comment"> * （RetentionPoicy）取值有：</span></span><br><span class="line"><span class="comment"> * 　　　　1.SOURCE:在源文件中有效（即源文件保留）</span></span><br><span class="line"><span class="comment"> * 　　　　2.CLASS:在class文件中有效（即class保留）</span></span><br><span class="line"><span class="comment"> * 　　　　3.RUNTIME:在运行时有效（即运行时保留）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Inherited</span></span></span><br><span class="line"><span class="comment"> * 元注解是一个标记注解，<span class="doctag">@Inherited</span>阐述了某个被标注的类型是被继承的。</span></span><br><span class="line"><span class="comment"> * 如果一个使用了<span class="doctag">@Inherited</span>修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 失效时间 单位（秒）</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">seconds</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大请求次数</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LimitInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LimitInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//判断请求是否属于方法的请求</span></span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取方法中的注解,看是否有该注解</span></span><br><span class="line">            <span class="type">AccessLimit</span> <span class="variable">accessLimit</span> <span class="operator">=</span> hm.getMethodAnnotation(AccessLimit.class);</span><br><span class="line">            <span class="keyword">if</span> (accessLimit == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">seconds</span> <span class="operator">=</span> accessLimit.seconds(); <span class="comment">// 失效时间 单位（秒）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> accessLimit.maxCount(); <span class="comment">// 最大请求次数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> request.getServletPath()+request.getSession().getId();</span><br><span class="line"></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从redis中获取用户访问的次数</span></span><br><span class="line">            <span class="keyword">if</span> (redisCache.getCacheObject(key) != <span class="literal">null</span>) &#123;</span><br><span class="line">                count = (Integer) redisCache.getCacheObject(key);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//第一次访问</span></span><br><span class="line">                redisCache.setCacheObject(key, <span class="number">1</span>);</span><br><span class="line">                redisCache.expire(key, seconds, TimeUnit.SECONDS); <span class="comment">//置缓存失效时间(单位：秒)</span></span><br><span class="line">                logger.info(<span class="string">&quot;&#123;&#125;第一次访问&quot;</span>,key);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; maxCount) &#123;</span><br><span class="line">                <span class="comment">//加1</span></span><br><span class="line">                redisCache.incr(key, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//超出访问次数</span></span><br><span class="line">                logger.error(<span class="string">&quot;超出访问次数&quot;</span>);</span><br><span class="line">                render(response, <span class="string">&quot;请求次数过于频繁！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(HttpServletResponse response, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.print(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(RespBean.error(msg)));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//注意使用 bean 注解添加</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LimitInterceptor <span class="title function_">limitHandlerInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LimitInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(limitHandlerInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Controller的接口加上注解"><a href="#在Controller的接口加上注解" class="headerlink" title="在Controller的接口加上注解"></a>在Controller的接口加上注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="comment">//表示用户想重复访问该接口必须间隔6s及以上</span></span><br><span class="line">    <span class="meta">@AccessLimit(seconds = 6,maxCount = 1)</span></span><br><span class="line">    <span class="keyword">public</span> RespBean <span class="title function_">addEmp</span><span class="params">(<span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (employeeService.addEmp(employee)) &#123;</span><br><span class="line">            <span class="keyword">return</span> RespBean.ok(<span class="string">&quot;添加成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RespBean.error(<span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目相关 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目部署和上线</title>
      <link href="//posts/6e6359df.html"/>
      <url>//posts/6e6359df.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目部署和上线"><a href="#项目部署和上线" class="headerlink" title="项目部署和上线"></a>项目部署和上线</h1><h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><p>本地开发：localhost（127.0.0.1）</p><p>多环境：指同一套项目代码在不同的阶段需要根据实际情况来调整配置并且部署到不同的机器上。</p><p>为什么需要多环境？</p><ol><li>每个环境互不影响</li><li>区分不同的阶段：开发 &#x2F; 测试 &#x2F; 生产</li><li>对项目进行优化：<ol><li>本地日志级别</li><li>精简依赖，节省项目体积</li><li>项目的环境 &#x2F; 参数可以调整，比如 JVM 参数</li></ol></li></ol><p>针对不同环境做不同的事情。</p><p>多环境分类：</p><ol><li>本地环境（自己的电脑）localhost</li><li>开发环境（远程开发）大家连同一台机器，为了大家开发方便</li><li>测试环境（测试）开发 &#x2F; 测试 &#x2F; 产品，单元测试 &#x2F; 性能测试 &#x2F; 功能测试 &#x2F; 系统集成测试，独立的数据库、独立的服务器</li><li>预发布环境（体验服）：和正式环境一致，正式数据库，更严谨，查出更多问题</li><li>正式环境（线上，公开对外访问的项目）：尽量不要改动，保证上线前的代码是 “完美” 运行</li><li>沙箱环境（实验环境）：为了做实验</li></ol><h3 id="前端多环境"><a href="#前端多环境" class="headerlink" title="前端多环境"></a>前端多环境</h3><blockquote><p> 开发和上线请求的地址不同，开发我们可以请求localhost，但上线正式环境不可能让它来请求我们的本地电脑，一般</p><p> 情况，我们是把项目放在云服务器上，那么如何让前端知道什么时候请求localhost，什么时候请求远程地址？</p></blockquote><p>以 <a href="https://blog.twintea.top/posts/c43bf339.html">Sky-User-Center项目</a> 举例</p><ul><li>请求地址</li></ul><p><a href="https://blog.twintea.top/posts/c43bf339.html">Sky-User-Center项目</a><br>项目用了 umi 框架，</p><p>  build 时会自动传入 NODE_ENV &#x3D;&#x3D; production 参数，start NODE_ENV 参数为 development</p><p>  我们在启动项目时，根据我们的启动命令，npm run build 和 num start ，umi根据我们的启动命令的不</p><p>  同传入不同的 NODE_ENV 参数，以此区分开发环境和生产环境。</p><p>  <code>appp.tsx</code>文件:</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230311161221192.png" alt="image-20230311161221192"></p><p>​因此，我们要找到全局请求类，<a href="https://blog.twintea.top/posts/c43bf339.html">Sky-User-Center项目</a> 自定义了全局请求类，名为<code>globalRequest</code></p><p>​<img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230312142151424.png" alt="image-20230312142151424"></p><p>​</p><ul><li><p>如何验证？</p><p>​首先我们将项目打包，在 <code>pacage.json</code>中执行build脚本</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230311160154803.png" alt="image-20230311160154803"></p><p>​</p><p>​然后我们就能看到项目目录多了一个dist文件，使用终端命令行的方式，进到dist文件，输入命令<code>serve</code>(没有的话装一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g serve</span><br></pre></td></tr></table></figure><p>​可以看到请求的地址发生了改变</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230312141952671.png"></p><ul><li><p>项目的配置</p><p>不同的项目（框架）都有不同的配置文件，umi 的配置文件是 config，可以在配置文件后添加对应的环境名称后缀来区分开发环境和生产环境。参考文档：<a href="https://umijs.org/zh-CN/docs/deployment">https://umijs.org/zh-CN/docs/deployment</a></p><ul><li>开发环境：config.dev.ts</li><li>生产环境：config.prod.ts</li><li>公共配置：config.ts 不带后缀</li></ul></li></ul><h3 id="后端多环境"><a href="#后端多环境" class="headerlink" title="后端多环境"></a>后端多环境</h3><p>SpringBoot 项目，通过 application.yml 添加不同的后缀来区分配置文件</p><p>可以在启动项目时传入环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\sky-user-center-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure><p>主要是改：</p><ul><li><p>依赖的环境地址</p><ul><li><p>数据库地址</p></li><li><p>缓存地址</p></li><li><p>消息队列地址</p></li><li><p>项目端口号</p></li></ul></li><li><p>服务器配置</p></li></ul><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><blockquote><p>需要一台Linux服务器</p></blockquote><h3 id="原始部署"><a href="#原始部署" class="headerlink" title="原始部署"></a>原始部署</h3><ul><li><p>前端：</p><p>主要安装nginx服务器，去官网下载安装</p><p><a href="https://nginx.org/en/download.html">nginx: download</a></p><p>(<strong>注意nginx的权限</strong>)</p></li><li><p>后端：</p><p>主要是项目依赖的服务：java、maven、mysql等</p><p>后台启动java项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar .\sky-user-center-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &amp;</span><br></pre></td></tr></table></figure></li></ul><h3 id="宝塔Linux部署"><a href="#宝塔Linux部署" class="headerlink" title="宝塔Linux部署"></a>宝塔Linux部署</h3><blockquote><p>原始部署方法比较麻烦，这时候我们可以在服务器安装宝塔面板，通过可视化的方式部署项目</p></blockquote><p><a href="https://www.bt.cn/new/index.html">宝塔面板 - 简单好用的Linux&#x2F;Windows服务器运维管理面板 (bt.cn)</a></p><p>界面友好</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230311195602394.png" alt="image-20230311195602394"></p><ul><li><p>前端部署</p><p>点击左侧的网站 –&gt; 添加站点 –&gt;创建站点，域名栏输入域名（必须是经过dns解析的域名）或者服务器ip，然后点击提交。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230311195845068.png" alt="image-20230311195845068"></p></li></ul><p>​然后去到站点根目录，将前端的dist里面的文件全部上传上去</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230311200344329.png" alt="image-20230311200344329" style="zoom:67%;" /><p>​上传完成后，通过域名或者ip的方式就可以正常访问前端项目啦！</p><ul><li><p>后端部署</p><p>后端部署和前端类似，也是在网站那里，选择java项目，添加java 项目把后端打包好的jar包上传到某个文件，在jar路</p><p>径栏正确填写该路径，并且记得要在项目执行命令末尾补上 <code>--spring.profiles.active=prod</code>，这样我们才是启用</p><p>生产环境的配置</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230311203735982.png" alt="image-20230311203735982" style="zoom:50%;" /><p>通过<code>ip:端口号</code>或者<code>域名:端口号</code>的方式就能访问到后端了</p></li></ul><h3 id="前端托管"><a href="#前端托管" class="headerlink" title="前端托管"></a>前端托管</h3><p>前端腾讯云 web 应用托管（比容器化更傻瓜式，不需要自己写构建应用的命令，就能启动前端项目）</p><blockquote><p><a href="https://console.cloud.tencent.com/webify/new">https://console.cloud.tencent.com/webify/new</a></p></blockquote><ul><li>小缺点：需要将代码放到代码托管平台上</li><li>优势：不用写命令、代码更新时自动构建</li></ul><h3 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h3><blockquote><p> Docker 是容器，可以将项目的环境（比如 java、nginx）和项目的代码一起打包成镜像，所有人都能下载镜像，更容易分发和移植。再启动项目时，不需要敲一大堆命令，而是直接下载镜像、启动镜像就可以了。</p><p> docker 可以理解为软件安装包。</p></blockquote><p>Docker 安装：<a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/</a> 或者宝塔安装</p><p><strong>Dockerfile</strong> 用于指定构建 Docker 镜像的方法</p><h4 id="Dockerfile-编写："><a href="#Dockerfile-编写：" class="headerlink" title="Dockerfile 编写："></a>Dockerfile 编写：</h4><ul><li>FROM 依赖的基础镜像</li><li>WORKDIR 工作目录</li><li>COPY 从本机复制文件</li><li>RUN 执行命令</li><li>CMD &#x2F; ENTRYPOINT（附加额外参数）指定运行容器时默认执行的命令</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.5</span>-jdk-<span class="number">8</span>-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy local code to the container image.</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src ./src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a release artifact.</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn package -DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the web service on container startup.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/target/sky-user-center-0.0.1-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者可以在本地打包，上传target</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy local code to the container image.</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a release artifact.</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./target/user-center-backend-0.0.1-SNAPSHOT.jar /app/sky-user-center-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8666</span></span><br><span class="line"><span class="comment"># Run the web service on container startup.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/sky-user-center-0.0.1-SNAPSHOT.jarr&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="docker-build构建镜像"><a href="#docker-build构建镜像" class="headerlink" title="docker build构建镜像"></a>docker build构建镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后端</span></span><br><span class="line">docker build -t sky-user-center-backend:v0.0.1 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">docker build -t sky-user-center-front:v0.0.1 .</span><br></pre></td></tr></table></figure><h4 id="docker-run-启动"><a href="#docker-run-启动" class="headerlink" title="docker run 启动"></a>docker run 启动</h4><p>（-d 后台启动）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端</span></span><br><span class="line">docker run -p 80:80 -d sky-user-center-front:v0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">docker run -p 8666:8666 -d sky-user-center-backend:v0.0.1</span><br></pre></td></tr></table></figure><p>虚拟化</p><ol><li>端口映射：把本机的资源（实际访问地址）和容器内部的资源（应用启动端口）进行关联</li><li>目录映射：把本机的端口和容器应用的端口进行关联</li></ol><h4 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h4><p>可以参考菜鸟教程</p><p><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程 (runoob.com)</a></p><p>进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i -t  [container-id] /bin/bash</span><br></pre></td></tr></table></figure><p>查看进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure><p>查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f [container-id]</span><br></pre></td></tr></table></figure><p>杀死容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> [container-id]</span><br></pre></td></tr></table></figure><p>强制删除镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f [container-id]</span><br></pre></td></tr></table></figure><h2 id="Docker平台部署"><a href="#Docker平台部署" class="headerlink" title="Docker平台部署"></a>Docker平台部署</h2><ol><li>云服务商的容器平台（腾讯云、阿里云）</li><li>面向某个领域的容器平台（如微信云托管）</li></ol><h2 id="绑定域名访问"><a href="#绑定域名访问" class="headerlink" title="绑定域名访问"></a>绑定域名访问</h2><p>准备一个已备案的域名，配置好dns解析</p><p>以<a href="https://gitee.com/twintea/sky-user-center-front">sky-user-center-front: 用户中心项目前端 (gitee.com)</a>项目为例，前端已经定义了生产环境要请求的域名。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20230312142151424.png" alt="image-20230312142151424"></p><p>前端项目访问流程：用户输入网址 &#x3D;&gt; 域名解析服务器（把网址解析为 ip 地址 &#x2F; 交给其他的域名解析服务（CNAME）） &#x3D;&gt; 服务器 &#x3D;&gt;（防火墙）&#x3D;&gt; nginx 接收请求，找到对应的文件，返回文件给前端 &#x3D;&gt; 前端加载文件到浏览器中（js、css） &#x3D;&gt; 渲染页面</p><p>后端项目访问流程：用户输入网址 &#x3D;&gt; 域名解析服务器 &#x3D;&gt; 服务器 &#x3D;&gt; nginx 接收请求 &#x3D;&gt; 后端项目（比如 8080端口）</p><p>nginx 反向代理的作用：替服务器接收请求，转发请求</p><ol><li><p><strong>前端和后端用相同的域名</strong></p><ul><li>在nginx的html目录放入前端编译完成的dist文件</li><li>修改nginx的配置(80端口监听，绑定 server_name为域名或者IP)</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> 域名 ip;</span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    <span class="attribute">root</span> 指向dist目录;</span><br><span class="line">...</span><br><span class="line">        <span class="section">location</span> /api &#123; 假设后端有一个url前缀 /<span class="attribute">api</span></span><br><span class="line">        proxy_pass <span class="number">127.0.0.1:8080</span>  当请求/api url时，nginx会帮我们代理到本机<span class="number">8080</span>端口</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这种配置并不涉及到跨域问题，是一种比较简单的配置，此时输入域名或者ip即可访问项目</li></ul></li><li><p><strong>后端绑定前端定义的生产环境域名，前端绑定项目域名</strong></p><ul><li>这就涉及到了跨域问题（详见下面 <strong>跨域问题的解决</strong>）</li><li>后端就需要使用nginx的反向代理，即（当nginx服务器接收到后端域名(80端口)的请求，就反向代理到[某某ip：端口]）</li><li>前端服务如果不是运行在80端口，也需要使用nginx反向代理</li></ul></li></ol><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>浏览器为了用户的安全，仅允许向 <strong>同域名、同端口</strong> 的服务器发送请求。</p><blockquote><p>那么如何解决跨域？</p></blockquote><h3 id="域名和端口都改成相同的"><a href="#域名和端口都改成相同的" class="headerlink" title="域名和端口都改成相同的"></a>域名和端口都改成相同的</h3><p>前后端不能运行在同一服务器的同一端口，可以使用nginx的正向或反向代理解决</p><h3 id="添加跨域头"><a href="#添加跨域头" class="headerlink" title="添加跨域头"></a>添加跨域头</h3><p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p><h4 id="1-网关支持（Nginx）"><a href="#1-网关支持（Nginx）" class="headerlink" title="1.网关支持（Nginx）"></a>1.网关支持（Nginx）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跨域配置</span></span><br><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/api/;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-修改后端服务"><a href="#2-修改后端服务" class="headerlink" title="2.修改后端服务"></a>2.修改后端服务</h4><ol><li><p>配置 @CrossOrigin 注解</p></li><li><p>添加 web 全局请求拦截器</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfg</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            <span class="comment">//设置允许跨域请求的域名</span></span><br><span class="line">            <span class="comment">//当**Credentials为true时，**Origin不能为星号，需为具体的ip地址【如果接口不带cookie,ip无需设成具体ip】</span></span><br><span class="line">            .allowedOrigins(<span class="string">&quot;http://localhost:9527&quot;</span>, <span class="string">&quot;http://127.0.0.1:9527&quot;</span>, <span class="string">&quot;http://127.0.0.1:8082&quot;</span>, <span class="string">&quot;http://127.0.0.1:8083&quot;</span>)</span><br><span class="line">            <span class="comment">//是否允许证书 不再默认开启</span></span><br><span class="line">            .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">            <span class="comment">//设置允许的方法</span></span><br><span class="line">            .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            <span class="comment">//跨域允许时间</span></span><br><span class="line">            .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义新的 corsFilter Bean</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署和上线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POM文件帮助文档</title>
      <link href="//posts/9e256e89.html"/>
      <url>//posts/9e256e89.html</url>
      
        <content type="html"><![CDATA[<h1 id="附件1：POM文件总体配置说明"><a href="#附件1：POM文件总体配置说明" class="headerlink" title="附件1：POM文件总体配置说明"></a>附件1：POM文件总体配置说明</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd &quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。</span></span><br><span class="line"><span class="comment">         坐标包括group ID，artifact ID和 version。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的构件标识符 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的版本 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。</span></span><br><span class="line"><span class="comment">             Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），</span></span><br><span class="line"><span class="comment">             然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，</span></span><br><span class="line"><span class="comment">         这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span> 4.0.0 <span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， </span></span><br><span class="line"><span class="comment">         如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID</span></span><br><span class="line"><span class="comment">         和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven</span></span><br><span class="line"><span class="comment">         为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.0-SNAPSHOT <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的名称, Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span> xxx-maven <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目主页的URL, Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://maven.apache.org <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，</span></span><br><span class="line"><span class="comment">         就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的</span></span><br><span class="line"><span class="comment">         索引页文件，而不是调整这里的文档。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span> A maven project to study maven. <span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 描述了这个项目构建环境中的前提条件。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven</span>&gt;</span><span class="tag">&lt;/<span class="name">maven</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 问题管理系统（例如jira）的名字， --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span> jira <span class="tag">&lt;/<span class="name">system</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的问题管理系统的URL --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://jira.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目持续集成信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 持续集成系统的名字，例如continuum --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span><span class="tag">&lt;/<span class="name">system</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">notifier</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 传送通知的途径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 发生错误时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnError</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnError</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建失败时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnFailure</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnFailure</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建成功时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnSuccess</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnSuccess</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 发生警告时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnWarning</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnWarning</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 不赞成使用。通知发送到哪里 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 扩展配置项 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目相关邮件列表信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 邮件的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">post</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 你可以浏览邮件信息的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span> http:/hi.baidu.com/banseon/demo/dev/ <span class="tag">&lt;/<span class="name">archive</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目开发者列表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 某个项目开发者的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- SCM里项目开发者的唯一标识符 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> HELLO WORLD <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的全名 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的email --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">email</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的主页的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">organization</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span> http://hi.baidu.com/xxx <span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者属性，如即时消息如何处理等 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所在时区， -11到12范围内的整数。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span> -5 <span class="tag">&lt;/<span class="name">timezone</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的其他贡献者列表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 项目的其他贡献者。参见developers/developer元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的全名 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span><span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的主页的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所属组织 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所属组织的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所在时区， -11到12范围内的整数。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span><span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者属性，如即时消息如何处理等 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。</span></span><br><span class="line"><span class="comment">         如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- license用于法律上的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Apache 2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 官方的license正文页面的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon/LICENSE-2.0.txt <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目分发的主要方式： </span></span><br><span class="line"><span class="comment">                    repo，可以从Maven库下载 </span></span><br><span class="line"><span class="comment">                    manual， 用户必须手动下载和安装依赖 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span> repo <span class="tag">&lt;/<span class="name">distribution</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 关于license的补充信息 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span> A business-friendly OSS license <span class="tag">&lt;/<span class="name">comments</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span> </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span> </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当前代码的标签，在开发阶段默认为HEAD --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://svn.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 组织的全名 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 组织主页的URL --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构建项目需要的信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对</span></span><br><span class="line"><span class="comment">             于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容会</span></span><br><span class="line"><span class="comment">             被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。</span></span><br><span class="line"><span class="comment">             该路径是相对于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的测试class文件存放的目录。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用来自该项目的一系列构建扩展 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 描述使用到的构建扩展。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的groupId --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的artifactId --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的版本 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span><span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在</span></span><br><span class="line"><span class="comment">             最终的打包文件里。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。</span></span><br><span class="line"><span class="comment">                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为</span></span><br><span class="line"><span class="comment">                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素</span></span><br><span class="line"><span class="comment">                     里列出。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 描述存放资源的目录，该路径相对POM路径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 描述了测试相关的资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。</span></span><br><span class="line"><span class="comment">                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为</span></span><br><span class="line"><span class="comment">                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素</span></span><br><span class="line"><span class="comment">                     里列出。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 描述存放测试相关的资源的目录，该路径相对POM路径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构建产生的所有文件存放的目录 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本</span></span><br><span class="line"><span class="comment">             地配置都会覆盖这里的配置 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 使用的插件列表 。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该</span></span><br><span class="line"><span class="comment">                         元素才被设置成enabled。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                            <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的插件列表 。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该</span></span><br><span class="line"><span class="comment">                     元素才被设置成enabled。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 根据环境参数或命令行参数激活某个构建处理 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它能够</span></span><br><span class="line"><span class="comment">                 在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元</span></span><br><span class="line"><span class="comment">                 素并不是激活profile的唯一方式。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- profile默认是否激活的标志 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本</span></span><br><span class="line"><span class="comment">                     不是以1.4开头的JDK。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>jdk版本，如:1.7<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统的名字 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span> Windows XP <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span> Windows <span class="tag">&lt;/<span class="name">family</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统体系结构 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span> x86 <span class="tag">&lt;/<span class="name">arch</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统版本 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 5.1.2600 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile</span></span><br><span class="line"><span class="comment">                     就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹</span></span><br><span class="line"><span class="comment">                     配属性值字段 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的名称 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span> mavenVersion <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的值 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span> 2.0.3 <span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 </span></span><br><span class="line"><span class="comment">                     profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件存在，则激活profile。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">exists</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件不存在，则激活profile。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">missing</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构建项目所需要的信息。参见build元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">testResources</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的</span></span><br><span class="line"><span class="comment">                 相对路径 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--子项目相对路径--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">modules</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 参见repositories/repository元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的</span></span><br><span class="line"><span class="comment">                 仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看</span></span><br><span class="line"><span class="comment">                 到所有报表的链接。参见reporting元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">reporting</span>&gt;</span><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencyManagement元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见distributionManagement元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见properties元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--子项目相对路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程仓库的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里发布版本的下载 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），</span></span><br><span class="line"><span class="comment">                     daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，</span></span><br><span class="line"><span class="comment">                 为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://192.168.1.169:9999/repository/ <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认</span></span><br><span class="line"><span class="comment">                 的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span> default <span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。</span></span><br><span class="line"><span class="comment">         要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 依赖的group ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.apache.maven <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的artifact ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> maven-artifact <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span> 3.8.1 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展</span></span><br><span class="line"><span class="comment">                 名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。</span></span><br><span class="line"><span class="comment">                 如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">type</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，</span></span><br><span class="line"><span class="comment">                 如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生</span></span><br><span class="line"><span class="comment">                 成两个单独的JAR构件。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 </span></span><br><span class="line"><span class="comment">                - compile ：默认范围，用于编译 </span></span><br><span class="line"><span class="comment">                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">                - runtime: 在执行时需要使用 </span></span><br><span class="line"><span class="comment">                - test: 用于test任务时使用 </span></span><br><span class="line"><span class="comment">                - system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">                - systemPath: 仅用于范围为system。提供相应的路径 </span></span><br><span class="line"><span class="comment">                - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span> test <span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件</span></span><br><span class="line"><span class="comment">                 系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的</span></span><br><span class="line"><span class="comment">                 依赖。此元素主要用于解决版本冲突问题 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> spring-core <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.springframework <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。</span></span><br><span class="line"><span class="comment">                 可选依赖阻断依赖的传递性。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span> true <span class="tag">&lt;/<span class="name">optional</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用的报表插件和他们的配置。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述报表插件需要的信息 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 被使用的报表插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 报表插件的配置 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，</span></span><br><span class="line"><span class="comment">                     有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报</span></span><br><span class="line"><span class="comment">                     表集，对应另一个执行目标 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 表示报表的一个集合，以及产生该集合的配置 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 报表集合的唯一标识符，POM继承时用到 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 产生报表集合时，被使用的报表的配置 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置是否被继承到子POMs --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 这个集合里使用到哪些报表 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖</span></span><br><span class="line"><span class="comment">        （必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过</span></span><br><span class="line"><span class="comment">            group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者</span></span><br><span class="line"><span class="comment">         把构件部署到远程仓库。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 部署项目产生的构件到远程仓库需要的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见</span></span><br><span class="line"><span class="comment">                 repositories/repository元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon maven2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> file://$&#123;basedir&#125;/target/deploy <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见</span></span><br><span class="line"><span class="comment">             distributionManagement/repository元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Banseon-maven2 Snapshot Repository <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> scp://svn.baidu.com/banseon:/usr/local/maven-snapshot <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 部署项目的网站需要的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-site <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> business api website <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> </span><br><span class="line">                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web </span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位</span></span><br><span class="line"><span class="comment">             那些不在仓库里的构件（由于license限制）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">relocation</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 构件新的group ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的artifact ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的版本号 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值</span></span><br><span class="line"><span class="comment">             有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven </span></span><br><span class="line"><span class="comment">             2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">status</span>&gt;</span><span class="tag">&lt;/<span class="name">status</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里</span></span><br><span class="line"><span class="comment">         activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>value<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure><h1 id="附件2：POM文件单项配置说明"><a href="#附件2：POM文件单项配置说明" class="headerlink" title="附件2：POM文件单项配置说明"></a>附件2：POM文件单项配置说明</h1><h2 id="localRepository"><a href="#localRepository" class="headerlink" title="localRepository"></a>localRepository</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库的路径。默认值为$&#123;user.home&#125;/.m2/repository。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>usr/local/maven<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="interactiveMode"><a href="#interactiveMode" class="headerlink" title="interactiveMode"></a>interactiveMode</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Maven是否需要和用户交互以获得输入。如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interactiveMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">interactiveMode</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="usePluginRegistry"><a href="#usePluginRegistry" class="headerlink" title="usePluginRegistry"></a>usePluginRegistry</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Maven是否需要使用plugin-registry.xml文件来管理插件版本。如果需要让Maven使用文件$&#123;user.home&#125;/.m2/plugin-registry.xml来管理插件版本，则设为true。默认为false。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">usePluginRegistry</span>&gt;</span>false<span class="tag">&lt;/<span class="name">usePluginRegistry</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="offline"><a href="#offline" class="headerlink" title="offline"></a>offline</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表示Maven是否需要在离线模式下运行。如果构建系统需要在离线模式下运行，则为true，默认为false。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">offline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">offline</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pluginGroups"><a href="#pluginGroups" class="headerlink" title="pluginGroups"></a>pluginGroups</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--当插件的组织Id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表。该元素包含一个pluginGroup元素列表，每个子元素包含了一个组织Id（groupId）。当我们使用某个插件，并且没有在命令行为其提供组织Id（groupId）的时候，Maven就会使用该列表。默认情况下该列表包含了org.apache.maven.plugins和org.codehaus.mojo --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--plugin的组织Id（groupId） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="proxies"><a href="#proxies" class="headerlink" title="proxies"></a>proxies</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用来配置不同的代理，多代理profiles 可以应对笔记本或移动设备的工作环境：通过简单的设置profile id就可以很容易的更换整个代理配置。 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--代理元素包含配置代理时需要的信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的唯一定义符，用来区分不同的代理元素。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>myproxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的协议。 协议://主机名:端口，分隔成离散的元素以方便配置。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的主机名。协议://主机名:端口，分隔成离散的元素以方便配置。  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的端口。协议://主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>somepassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.google.com|ibiblio.org<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="servers"><a href="#servers" class="headerlink" title="servers"></a>servers</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--服务器元素包含配置服务器时需要的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>server001<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>my_login<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>my_password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;/.ssh/id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">privateKey</span>&gt;</span>$&#123;usr.home&#125;/.ssh/id_dsa<span class="tag">&lt;/<span class="name">privateKey</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权时使用的私钥密码。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">passphrase</span>&gt;</span>some_passphrase<span class="tag">&lt;/<span class="name">passphrase</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filePermissions</span>&gt;</span>664<span class="tag">&lt;/<span class="name">filePermissions</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">directoryPermissions</span>&gt;</span>775<span class="tag">&lt;/<span class="name">directoryPermissions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mirrors"><a href="#mirrors" class="headerlink" title="mirrors"></a>mirrors</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--为仓库列表配置的下载镜像列表。高级设置请参阅镜像设置页面 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--给定仓库的下载镜像。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>planetmirror.com<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--镜像名称 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>PlanetMirror Australia<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://downloads.planetmirror.com/pub/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http://repo.maven.apache.org/maven2/）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="profiles"><a href="#profiles" class="headerlink" title="profiles"></a>profiles</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据环境参数来调整构建配置的列表。settings.xml中的profile元素是pom.xml中profile元素的裁剪版本。它包含了id，activation, repositories, pluginRepositories和 properties元素。这里的profile元素只包含这五个子元素是因为这里只关心构建系统这个整体（这正是settings.xml文件的角色定位），而非单独的项目对象模型设置。如果一个settings中的profile被激活，它的值会覆盖任何其它定义在POM中或者profile.xml中的带有相同id的profile。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--根据环境参数来调整的构件的配置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该配置的唯一标识符。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Activation"><a href="#Activation" class="headerlink" title="Activation"></a>Activation</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。如POM中的profile一样，profile的力量来自于它能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。settings.xml文件中的activeProfile元素可以包含profile的id。profile也可以通过在命令行，使用-P标记和逗号分隔的列表来显式的激活（如，-P test）。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--profile默认是否激活的标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;)  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统体系结构  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统版本--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;name&#125;引用），其拥有对应的name = 值，Profile就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的名称--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--远程仓库列表，它是Maven用来填充构建系统本地仓库所使用的一组远程项目。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库唯一标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--发现插件的远程仓库列表。仓库是两种主要构件的家。第一种构件被用作其它构件的依赖。这是中央仓库中存储的大部分构件类型。另外一种构件类型是插件。Maven插件是一种特殊类型的构件。由于这个原因，插件仓库独立于其它仓库。pluginRepositories元素的结构和repositories元素的结构类似。每个pluginRepository元素指定一个Maven可以用来寻找新插件的远程地址。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见profiles/profile/repositories/repository元素的说明--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span>      </span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">name</span>/&gt;</span><span class="tag">&lt;<span class="name">url</span>/&gt;</span><span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="activeProfiles"><a href="#activeProfiles" class="headerlink" title="activeProfiles"></a>activeProfiles</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动激活profiles的列表，按照profile被应用的顺序定义activeProfile。 该元素包含了一组activeProfile元素，每个activeProfile都含有一个profile id。任何在activeProfile中定义的profile id，不论环境设置如何，其对应的</span></span><br><span class="line"><span class="comment">        profile都会被激活。如果没有匹配的profile，则什么都不会发生。例如，env-test是一个activeProfile，则在pom.xml（或者profile.xml）中对应id的profile会被激活。如果运行过程中找不到这样一个profile，Maven则会像往常一样运行。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>env-test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis笔记</title>
      <link href="//posts/93fcac00.html"/>
      <url>//posts/93fcac00.html</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis笔记"><a href="#MyBatis笔记" class="headerlink" title="MyBatis笔记"></a>MyBatis笔记</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h3 id="MyBatis是什么"><a href="#MyBatis是什么" class="headerlink" title="MyBatis是什么"></a>MyBatis是什么</h3><ul><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的<strong>持久层框架</strong>。</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis 可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（ Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li></ul><h3 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h3><ul><li>原是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation 迁移到了Google Code，随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis ，代码于2013年11月迁移到Github（下载地址见后）。</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li></ul><h3 id="为什么要使用MyBatis？"><a href="#为什么要使用MyBatis？" class="headerlink" title="为什么要使用MyBatis？"></a>为什么要使用MyBatis？</h3><ul><li>JDBC<ul><li>SQL夹在Java代码块里，耦合度高导致硬编码内伤</li><li>维护不易且实际开发需求中sql是有变化，频繁修改的情况多见</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/01.png"></p><ul><li>Hibernate和JPA<br>– 长难复杂SQL，对于Hibernate而言处理也不容易<br>– 内部自动生产的SQL，不容易做特殊优化。<br>– 基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难，导致数据库性能下降。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/02.png"></p><ul><li>MyBatis是一个半自动化的持久化层框架。<ul><li>对开发人员而言，核心sql还是需要自己优化</li><li>sql和java编码分开，功能边界清晰，一个专注业务、一个专注数据。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/03.png"></p><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2.下载"></a>2.下载</h2><p><a href="https://github.com/mybatis/mybatis-3/releases">MyBatis下载</a></p><p><a href="https://mybatis.org/mybatis-3/index.html">MyBatis官网</a></p><h2 id="3-HelloWorld"><a href="#3-HelloWorld" class="headerlink" title="3.HelloWorld"></a>3.HelloWorld</h2><ul><li>在MySQL数据库创建一数据库实例<code>learnmybatis</code>，在其创建一张表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>再插进一条随意数据，用于测试</p><ul><li>创建Maven工程，添加依赖</li></ul><p><a href="pom.xml">pom.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建对应的JavaBean</li></ul><p><a href="src/main/java/com/lun/c01/helloworld/bean/Employee.java">Employee.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter and setter and toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建mybatis配置文件，sql映射文件<ul><li>MyBatis 的全局配置文件包含了影响 MyBatis 行为甚深的设置（ settings）和属性（ properties）信息、如数据库连接池信息等。指导着MyBatis进行工作。我们可以参照官方文件的配置示例。</li><li>映射文件的作用就相当于是定义Dao接口的实现类如何工作。这也是<strong>我们使用MyBatis时编写的最多的文件</strong>。</li></ul></li></ul><p>mybatis全局配置文件</p><p><a href="src/main/resources/c01/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/learnmybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=CTT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;c01/EmployeeMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>sql映射文件</strong></p><p><a href="src/main/resources/c01/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;abc&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;通常指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Employee getEmpById(Integer id);</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">select id,last_name lastName,email,gender from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p><a href="src/test/java/com/lun/c01/helloworld/HelloWorldTest.java">HelloWorldTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;c01/mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象 有数据源一些运行环境信息</span></span><br><span class="line"><span class="comment"> * 2、sql映射文件；配置了每一个sql，以及sql的封装规则等。 </span></span><br><span class="line"><span class="comment"> * 3、将sql映射文件注册在全局配置文件中</span></span><br><span class="line"><span class="comment"> * 4、写代码：</span></span><br><span class="line"><span class="comment"> * 1）、根据全局配置文件得到SqlSessionFactory；</span></span><br><span class="line"><span class="comment"> * 2）、使用sqlSession工厂，获取到sqlSession对象使用他来执行增删改查</span></span><br><span class="line"><span class="comment"> * 一个sqlSession就是代表和数据库的一次会话，用完关闭</span></span><br><span class="line"><span class="comment"> * 3）、使用sql的唯一标志来告诉MyBatis执行哪个sql。sql都是保存在sql映射文件中的。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line"><span class="comment">// sql的唯一标识：statement Unique identifier matching the statement to use.</span></span><br><span class="line"><span class="comment">// 执行sql要用的参数：parameter A parameter object to pass to the statement.</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> openSession.selectOne(</span><br><span class="line"><span class="string">&quot;abc.getEmpById&quot;</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-接口式编程"><a href="#4-接口式编程" class="headerlink" title="4.接口式编程"></a>4.接口式编程</h2><p><strong>日后主要用接口式编程</strong></p><p>HelloWorld-接口式编程</p><ul><li>创建一个Dao接口</li></ul><p><a href="src/main/java/com/lun/c01/helloworld/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.c01.helloworld.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改Mapper文件（命名空间，id，returnType）</li></ul><p><a href="src/main/java/com/lun/c01/helloworld/dao/EmployeeMapper.java">EmployeeMapper2.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c01.helloworld.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Employee getEmpById(Integer id);</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">select id,last_name lastName,email,gender from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p><a href="src/test/java/com/lun/c01/helloworld/HelloWorldTest.java">HelloWorldTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 1、获取sqlSessionFactory对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> getSqlSessionFactory();</span><br><span class="line"><span class="comment">// 2、获取sqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 3、获取接口的实现类对象</span></span><br><span class="line"><span class="comment">//会为接口自动的创建一个代理对象，代理对象去执行增删改查方法</span></span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> openSession.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> mapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(mapper.getClass());</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-小结-1"><a href="#5-小结-1" class="headerlink" title="5.小结(1)"></a>5.小结(1)</h2><ol><li>接口式编程<ul><li>原生：Dao&#x3D;&#x3D;&#x3D;&#x3D;&gt;  DaoImpl</li><li>mybatis：Mapper&#x3D;&#x3D;&#x3D;&#x3D;&gt;  xxMapper.xml</li></ul></li><li>SqlSession代表和数据库的一次会话；用完必须关闭；</li><li>SqlSession和connection一样她都是非线程安全。每次使用都应该去获取新的对象。</li><li>mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象。<br>（将接口和xml进行绑定）<code>EmployeeMapper empMapper = sqlSession.getMapper(EmployeeMapper.class);</code></li><li>两个重要的配置文件：<ul><li>mybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等…系统运行环境信息</li><li>sql映射文件：保存了每一个sql语句的映射信息：将sql抽取出来。</li></ul></li></ol><h2 id="6-全局配置文件-引入dtd约束"><a href="#6-全局配置文件-引入dtd约束" class="headerlink" title="6.全局配置文件-引入dtd约束"></a>6.全局配置文件-引入dtd约束</h2><h3 id="MyBatis-全局配置文件"><a href="#MyBatis-全局配置文件" class="headerlink" title="MyBatis-全局配置文件"></a>MyBatis-全局配置文件</h3><p>MyBatis 的配置文件包含了影响 MyBatis 行为甚深的设置（ settings）和属性（ properties）信息。文档的顶层结构如下：</p><ul><li>configuration 配置<ul><li>properties 属性</li><li>settings 设置</li><li>typeAliases 类型命名</li><li>typeHandlers 类型处理器</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li>environments 环境<ul><li>environment 环境变量<ul><li>transactionManager 事务管理器</li><li>dataSource 数据源</li></ul></li></ul></li><li>databaseIdProvider 数据库厂商标识</li><li>mappers 映射器</li></ul></li></ul><h3 id="引入dtd约束"><a href="#引入dtd约束" class="headerlink" title="引入dtd约束"></a>引入dtd约束</h3><p>有时Eclipse在编辑全局xml或映射xml时没有编辑提示，这时可手动导入dtd，导入后才有编辑提示</p><p>dtd文件在Mybatis的Jar包的org&#x2F;apache&#x2F;ibatis&#x2F;builder&#x2F;xml，导入前需Mybatis的Jar包中的dtd存放到本地目录</p><p>设置路径：Window -&gt; Preferences -&gt; XML -&gt; XML Catalog -&gt; Add Catalog Entry -&gt;Set URL key and DTD local location</p><h2 id="7-全局配置文件-properties-引入外部配置文件"><a href="#7-全局配置文件-properties-引入外部配置文件" class="headerlink" title="7.全局配置文件-properties-引入外部配置文件"></a>7.全局配置文件-properties-引入外部配置文件</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html">官方文档</a></p><p><a href="src/main/resources/c02/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、mybatis可以使用properties来引入外部properties配置文件的内容；</span></span><br><span class="line"><span class="comment">resource：引入类路径下的资源</span></span><br><span class="line"><span class="comment">url：引入网络路径或者磁盘路径下的资源</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span> =<span class="string">&quot;dbconfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="/LearnMybatis/src/main/resources/c02/dbconfig.properties">dbconfig.properties</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/learnmybatis?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=CTT</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><p>如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：</p><ul><li>在 properties 元素体内指定的属性首先被读取。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根<br>据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。</li></ul><h2 id="8-全局配置文件-settings-运行时行为设置"><a href="#8-全局配置文件-settings-运行时行为设置" class="headerlink" title="8.全局配置文件-settings-运行时行为设置"></a>8.全局配置文件-settings-运行时行为设置</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变MyBatis 的运行时行为。</p><p><a href="src/main/resources/c02/mybatis-config2.xml">mybatis-config2.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">2、settings包含很多重要的设置项</span></span><br><span class="line"><span class="comment">setting:用来设置每一个设置项</span></span><br><span class="line"><span class="comment">name：设置项名</span></span><br><span class="line"><span class="comment">value：设置项取值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>设置参数</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>该配置影响的所有映射器中配置的缓存的全局开关。</td><td>true&#x2F;false</td><td>TRUE</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时。所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。</td><td>true&#x2F;false</td><td>FALSE</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。</td><td>true&#x2F;false</td><td>TRUE</td></tr><tr><td>defaultStatementTimeout</td><td>设置超时时间,它决定驱动等待数据库响应的秒数。</td><td>Any positive integer</td><td>Not Set (null)</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启自动驼峰命名规则( camel case )映射即从经典数据库列名A_ COLUMN到经典Java属性名aColumn的类似映射</td><td>true&#x2F;false</td><td>FALSE</td></tr></tbody></table><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">更多设置</a></p><h2 id="9-全局配置文件-typeAliases-别名"><a href="#9-全局配置文件-typeAliases-别名" class="headerlink" title="9.全局配置文件-typeAliases-别名"></a>9.全局配置文件-typeAliases-别名</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Section&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Tag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是， MyBatis已经为许多常见的 Java 类型内建<br>了相应的类型别名。<strong>它们都是大小写不敏感的</strong>，我们在起<br>别名的时候千万不要占用已有的别名。</p><table><thead><tr><th>别名</th><th>映射的类型</th><th>别名</th><th>映射的类型</th><th>别名</th><th>映射的类型</th><th></th></tr></thead><tbody><tr><td>_byte</td><td>byte</td><td>string</td><td>String</td><td>date</td><td>Date</td><td></td></tr><tr><td>_long</td><td>long</td><td>byte</td><td>Byte</td><td>decimal</td><td>BigDecimal</td><td></td></tr><tr><td>_short</td><td>short</td><td>long</td><td>Long</td><td>bigdecimal</td><td>BigDecimal</td><td></td></tr><tr><td>_int</td><td>int</td><td>short</td><td>Short</td><td>object</td><td>Object</td><td></td></tr><tr><td>_integer</td><td>int</td><td>int</td><td>Integer</td><td>map</td><td>Map</td><td></td></tr><tr><td>_double</td><td>double</td><td>integer</td><td>Integer</td><td>hashmap</td><td>HashMap</td><td></td></tr><tr><td>_float</td><td>float</td><td>double</td><td>Double</td><td>list</td><td>List</td><td></td></tr><tr><td>_boolean</td><td>boolean</td><td>float</td><td>Float</td><td>arraylist</td><td>ArrayList</td><td></td></tr><tr><td>-</td><td>-</td><td>boolean</td><td>Boolean</td><td>collection</td><td>Collection</td><td></td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>iterator</td><td>Iterator</td><td></td></tr></tbody></table><p><a href="src/main/resources/c02/mybatis-config3.xml">mybatis-config3.xml</a></p><h2 id="10-全局配置文件-typeHandlers-类型处理器简介"><a href="#10-全局配置文件-typeHandlers-类型处理器简介" class="headerlink" title="10.全局配置文件-typeHandlers-类型处理器简介"></a>10.全局配置文件-typeHandlers-类型处理器简介</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">官方文档</a></p><p>无论是 MyBatis 在预处理语句（ PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</p><table><thead><tr><th>类型处理器</th><th>Java 类型</th><th>JDBC 类型</th></tr></thead><tbody><tr><td>BooleanTypeHandler</td><td>java.lang.Boolean, boolean</td><td>数据库兼容的 BOOLEAN</td></tr><tr><td>ByteTypeHandler</td><td>java.lang.Byte, byte</td><td>数据库兼容的 NUMERIC 或 BYTE</td></tr><tr><td>ShortTypeHandler</td><td>java.lang.Short, short</td><td>数据库兼容的 NUMERIC 或 SHORT INTEGER</td></tr><tr><td>IntegerTypeHandler</td><td>java.lang.Integer, int</td><td>数据库兼容的 NUMERIC 或 INTEGER</td></tr><tr><td>LongTypeHandler</td><td>java.lang.Long, long</td><td>数据库兼容的 NUMERIC 或 LONG INTEGER</td></tr><tr><td>FloatTypeHandler</td><td>java.lang.Float, float</td><td>数据库兼容的 NUMERIC 或 FLOAT</td></tr><tr><td>DoubleTypeHandler</td><td>java.lang.Double, double</td><td>数据库兼容的 NUMERIC 或 DOUBLE</td></tr><tr><td>BigDecimalTypeHandler</td><td>java.math.BigDecimal</td><td>数据库兼容的 NUMERIC 或 DECIMAL</td></tr><tr><td>StringTypeHandler</td><td>java.lang.String</td><td>CHAR, VARCHAR</td></tr></tbody></table><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">more</a></p><h3 id="日期类型的处理"><a href="#日期类型的处理" class="headerlink" title="日期类型的处理"></a>日期类型的处理</h3><ul><li>日期和时间的处理， JDK1.8以前一直是个头疼的问题。我们通常使用JSR310规范领导者Stephen Colebourne创建的Joda-Time来操作。 1.8已经实现全部的JSR310规范了。</li><li>日期时间处理上，我们可以使用MyBatis基于JSR310（ Date and Time API）编写的各种日期时间类型处理器。</li><li>MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.InstantTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.LocalDateTimeTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.LocalDateTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.LocalTime TypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.0ffsetDateTimeTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.OffsetTimeTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.ZonedDateTimeTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.YearTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.MonthTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.YearMonthTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.JapaneseDateTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a>自定义类型处理器</h3><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">自定义类型处理器示例</a></p><p>我们可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。</p><p>步骤：</p><ol><li>实现<code>org.apache.ibatis.type.TypeHandler</code>接口或者继承<code>org.apache.ibatis.type.BaseTypeHandler</code></li><li>指定其映射某个JDBC类型（可选操作）</li><li>在mybatis全局配置文件中注册</li></ol><h2 id="11-全局配置文件-plugins-插件简介"><a href="#11-全局配置文件-plugins-插件简介" class="headerlink" title="11.全局配置文件-plugins-插件简介"></a>11.全局配置文件-plugins-插件简介</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">官方文档</a></p><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。 插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。</p><p>了解mybatis运行原理才能更好开发插件。</p><ul><li><code>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</code></li><li><code>ParameterHandler (getParameterObject, setParameters)</code></li><li><code>ResultSetHandler (handleResultSets, handleOutputParameters)</code></li><li><code>StatementHandler (prepare, parameterize, batch, update, query)</code></li></ul><h2 id="12-全局配置文件-enviroments-运行环境"><a href="#12-全局配置文件-enviroments-运行环境" class="headerlink" title="12.全局配置文件-enviroments-运行环境"></a>12.全局配置文件-enviroments-运行环境</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments">enviroments - 官方文档</a></p><ul><li>MyBatis可以配置多种环境，比如开发、测试和生产环境需要有不同的配置。</li><li>每种环境使用一个environment标签进行配置并指定唯一标识符</li><li>可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境</li></ul><h3 id="environment-指定具体环境"><a href="#environment-指定具体环境" class="headerlink" title="environment-指定具体环境"></a>environment-指定具体环境</h3><ul><li>id：指定当前环境的唯一标识</li><li>transactionManager、和dataSource都必须有</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev_mysql&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev_mysql&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h4><ul><li>type： JDBC | MANAGED | 自定义<ul><li>JDBC：使用了 JDBC 的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围。JdbcTransactionFactory</li><li>MANAGED：不提交或回滚一个连接、让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 ManagedTransactionFactory</li><li>自定义：实现TransactionFactory接口， type&#x3D;全类名&#x2F;别名</li></ul></li></ul><h4 id="dataSource"><a href="#dataSource" class="headerlink" title="dataSource"></a>dataSource</h4><ul><li>type： UNPOOLED | POOLED | JNDI | 自定义<ul><li>UNPOOLED：不使用连接池，<br>UnpooledDataSourceFactory</li><li>POOLED：使用连接池， PooledDataSourceFactory</li><li>JNDI： 在EJB 或应用服务器这类容器中查找指定的数据源</li><li>自定义：实现DataSourceFactory接口，定义数据源的获取方式。</li></ul></li></ul><p><strong>实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</strong>。</p><h2 id="13-全局配置文件-databaseIdProvider-多数据库支持"><a href="#13-全局配置文件-databaseIdProvider-多数据库支持" class="headerlink" title="13.全局配置文件-databaseIdProvider-多数据库支持"></a>13.全局配置文件-databaseIdProvider-多数据库支持</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider - 官方文档</a></p><ul><li>MyBatis 可以根据不同的数据库厂商执行不同的语句。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Type： DB_VENDOR 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义。</li><li>Property-name：数据库厂商标识</li><li>Property-value：为标识起一个别名，方便SQL语句使用databaseId属性引用</li></ul><p>DB_VENDOR - 会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以<strong>最好通过设置属性别名来使其变短</strong></p><ul><li>databaseId属性在映射xml使用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">select * from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">select e.* from employee e where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>&lt;environments default=&quot;mysql&quot;&gt;</code>切换数据库，便能切换SQL</li></ul><p>MyBatis匹配规则如下：</p><ol><li>如果没有配置databaseIdProvider标签，那么databaseId&#x3D;null</li><li>如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId&#x3D;配置指定的值，否则依旧为null</li><li>如果databaseId不为null，他只会找到配置databaseId的sql语句</li><li>MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带 databaseId 的相同语句， 则后者会被舍弃。</li></ol><h2 id="14-全局配置文件-mappers-sql映射注册"><a href="#14-全局配置文件-mappers-sql映射注册" class="headerlink" title="14.全局配置文件-mappers-sql映射注册"></a>14.全局配置文件-mappers-sql映射注册</h2><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以<strong>最好的办法是直接告诉 MyBatis 到哪里去找映射文件</strong>。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:&#x2F;&#x2F;&#x2F; 形式的 URL），或类名和包名等。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注册接口</span></span><br><span class="line"><span class="comment">class：引用（注册）接口，</span></span><br><span class="line"><span class="comment">1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；</span></span><br><span class="line"><span class="comment">2、没有sql映射文件，所有的sql都是利用注解写在接口上;</span></span><br><span class="line"><span class="comment">推荐：</span></span><br><span class="line"><span class="comment">比较重要的，复杂的Dao接口我们来写sql映射文件</span></span><br><span class="line"><span class="comment">不重要，简单的Dao接口为了开发快速可以使用注解；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些配置会告诉 MyBatis 去哪里找映射文件</p><h2 id="15-小结-2"><a href="#15-小结-2" class="headerlink" title="15.小结(2)"></a>15.小结(2)</h2><p>注意mybatis全局配置文件中的标签顺序，需要按以下顺序排列，否则抛异常</p><ul><li>configuration 配置<ul><li>properties 属性</li><li>settings 设置</li><li>typeAliases 类型命名</li><li>typeHandlers 类型处理器</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li>environments 环境<ul><li>environment 环境变量<ul><li>transactionManager 事务管理器</li><li>dataSource 数据源</li></ul></li></ul></li><li>databaseIdProvider 数据库厂商标识</li><li>mappers 映射器</li></ul></li></ul><h2 id="16-映射文件-增删改查"><a href="#16-映射文件-增删改查" class="headerlink" title="16.映射文件-增删改查"></a>16.映射文件-增删改查</h2><p>映射文件指导着MyBatis如何进行数据库增删改查，有着非常重要的意义；</p><ul><li>cache –命名空间的二级缓存配置</li><li>cache-ref – 其他命名空间缓存配置的引用。</li><li>resultMap – 自定义结果集映射</li><li>parameterMap – <strong>已废弃</strong>！老式风格的参数映射</li><li>sql –抽取可重用语句块。</li><li>insert – 映射插入语句</li><li>update – 映射更新语句</li><li>delete – 映射删除语句</li><li>select – 映射查询语句</li></ul><h3 id="CRUD初体验"><a href="#CRUD初体验" class="headerlink" title="CRUD初体验"></a>CRUD初体验</h3><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">addEmp</span><span class="params">(Employee employee)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateEmp</span><span class="params">(Employee employee)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteEmpById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">select * from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void addEmp(Employee employee); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> &gt;</span></span><br><span class="line">insert into employee(last_name,email,gender) </span><br><span class="line">values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void updateEmp(Employee employee);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmp&quot;</span>&gt;</span></span><br><span class="line">update employee </span><br><span class="line">set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void deleteEmpById(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmpById&quot;</span>&gt;</span></span><br><span class="line">delete from employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCrud</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Employee</span> <span class="variable">newEmployee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="literal">null</span>,<span class="string">&quot;kuang&quot;</span>,<span class="string">&quot;kuang@163.com&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> mapper.addEmp(newEmployee);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">System.out.println(<span class="string">&quot;After creating : &quot;</span> + mapper.getEmpById(newEmployee.getId()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">newEmployee.setGender(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">mapper.updateEmp(newEmployee);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">System.out.println(<span class="string">&quot;After updating : &quot;</span> + mapper.getEmpById(newEmployee.getId()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">mapper.deleteEmpById(newEmployee.getId());</span><br><span class="line">System.out.println(<span class="string">&quot;After deleting : &quot;</span> + mapper.getEmpById(newEmployee.getId()));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><ol><li>mybatis允许增删改直接定义以下类型返回值<ul><li>Integer、Long、Boolean、void</li></ul></li><li>我们需要手动提交数据<ul><li>sqlSessionFactory.openSession();&#x3D;&#x3D;&#x3D;》手动提交</li><li>sqlSessionFactory.openSession(true);&#x3D;&#x3D;&#x3D;》自动提交</li></ul></li></ol><h2 id="17-映射文件-insert-获取自增主键的值"><a href="#17-映射文件-insert-获取自增主键的值" class="headerlink" title="17.映射文件-insert-获取自增主键的值"></a>17.映射文件-insert-获取自增主键的值</h2><ul><li>parameterType：参数类型，可以省略，</li><li>获取自增主键的值：<ul><li>mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；</li><li>useGeneratedKeys&#x3D;”true”；使用自增主键获取主键值策略</li><li>keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</li></ul></li></ul><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void addEmp(Employee employee); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> &gt;</span></span><br><span class="line">insert into employee(last_name,email,gender) </span><br><span class="line">values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="18-映射文件-insert-Oracle使用序列生成主键演示"><a href="#18-映射文件-insert-Oracle使用序列生成主键演示" class="headerlink" title="18.映射文件-insert-Oracle使用序列生成主键演示"></a>18.映射文件-insert-Oracle使用序列生成主键演示</h2><ul><li>Oracle不支持自增；Oracle使用序列来模拟自增；</li><li>每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#从序列获取新主键值</span><br><span class="line"><span class="keyword">select</span> employee_seq.nextval <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h2 id="19-oracle使用）映射文件-insert-获取非自增主键的值-selectKey"><a href="#19-oracle使用）映射文件-insert-获取非自增主键的值-selectKey" class="headerlink" title="19.(oracle使用）映射文件-insert-获取非自增主键的值-selectKey"></a>19.(oracle使用）映射文件-insert-获取非自增主键的值-selectKey</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">keyProperty:查出的主键值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">order=&quot;BEFORE&quot;:当前sql在插入sql之前运行</span></span><br><span class="line"><span class="comment">   AFTER：当前sql在插入sql之后运行</span></span><br><span class="line"><span class="comment">resultType:查出的数据的返回值类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BEFORE运行顺序：</span></span><br><span class="line"><span class="comment">先运行selectKey查询id的sql；查出id值封装给javaBean的id属性</span></span><br><span class="line"><span class="comment">在运行插入的sql；就可以取出id属性对应的值</span></span><br><span class="line"><span class="comment">AFTER运行顺序：</span></span><br><span class="line"><span class="comment">先运行插入的sql（从序列中取出新值作为id）；</span></span><br><span class="line"><span class="comment">再运行selectKey查询id的sql；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- BEFORE--&gt;</span></span><br><span class="line">select EMPLOYEES_SEQ.nextval from dual </span><br><span class="line"><span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment"> select EMPLOYEES_SEQ.currval from dual --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插入时的主键是从序列中拿到的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- BEFORE:--&gt;</span></span><br><span class="line">insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) </span><br><span class="line">values(#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email<span class="comment">&lt;!-- ,jdbcType=NULL --&gt;</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment">insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) </span></span><br><span class="line"><span class="comment">values(employees_seq.nextval,#&#123;lastName&#125;,#&#123;email&#125;) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>selectKey 元素的属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>keyProperty</td><td>selectKey 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td>keyColumn</td><td>返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td>resultType</td><td>结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。</td></tr><tr><td>order</td><td>可以设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它首先会生成主键，设置 keyProperty 再执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。</td></tr><tr><td>statementType</td><td>和前面一样，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 类型的映射语句，分别代表 Statement, PreparedStatement 和 CallableStatement 类型。</td></tr></tbody></table><h2 id="20-映射文件-参数处理-单个参数-amp-多个参数-amp-命名参数"><a href="#20-映射文件-参数处理-单个参数-amp-多个参数-amp-命名参数" class="headerlink" title="20.映射文件-参数处理-单个参数&amp;多个参数&amp;命名参数"></a>20.映射文件-参数处理-单个参数&amp;多个参数&amp;命名参数</h2><ul><li>单个参数：mybatis不会做特殊处理，<ul><li><code>#&#123;参数名/任意名&#125;</code>：取出参数值。</li></ul></li><li>多个参数：mybatis会做特殊处理。<ul><li>通常操作：<ul><li>方法：public Employee getEmpByIdAndLastName(Integer id,String lastName);</li><li>取值：<code>#&#123;id&#125;</code>,<code>#&#123;lastName&#125;</code></li></ul></li><li>上述操作会抛出异常：<code>org.apache.ibatis.binding.BindingException: Parameter &#39;id&#39; not found. Available parameters are [1, 0, param1, param2]</code></li><li>多个参数会被封装成 一个map，<ul><li>key：param1…paramN,或者参数的索引也可以</li><li>value：传入的参数值</li></ul></li><li><code>#&#123;&#125;</code>就是从map中获取指定的key的值；</li></ul></li><li>【命名参数】：明确指定封装参数时map的key；@Param(“id”)<ul><li>多个参数会被封装成 一个map，<ul><li>key：使用@Param注解指定的值</li><li>value：参数值</li></ul></li><li><code>#&#123;指定的key&#125;</code>取出对应的参数值</li></ul></li></ul><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParameters</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. </span></span><br><span class="line"><span class="comment">//单个参数：mybatis不会做特殊处理</span></span><br><span class="line">System.out.println(mapper.getEmpById2(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="comment">//多个参数，未作处理 ，mapper直用#&#123;id&#125;,#&#123;lastName&#125;会抛异常 </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(mapper.getEmpByIdAndLastName(<span class="number">1</span>, <span class="string">&quot;jallen&quot;</span>));</span><br><span class="line"><span class="comment">//org.apache.ibatis.exceptions.PersistenceException: </span></span><br><span class="line"><span class="comment">//### Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter &#x27;id&#x27; not found. Available parameters are [0, 1, param1, param2]</span></span><br><span class="line"><span class="comment">//### Cause: org.apache.ibatis.binding.BindingException: Parameter &#x27;id&#x27; not found. Available parameters are [0, 1, param1, param2]</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(PersistenceException ex) &#123;</span><br><span class="line">System.err.println(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个参数会被封装成 一个map</span></span><br><span class="line"><span class="comment">//key：param1...paramN,或者参数的索引0, 1..也可以(这种方法的可读性较差)</span></span><br><span class="line"><span class="comment">//value：传入的参数值</span></span><br><span class="line">System.out.println(mapper.getEmpByIdAndLastName2(<span class="number">1</span>, <span class="string">&quot;jallen&quot;</span>));</span><br><span class="line">System.out.println(mapper.getEmpByIdAndLastName3(<span class="number">1</span>, <span class="string">&quot;jallen&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. </span></span><br><span class="line"><span class="comment">//【命名参数】：明确指定封装参数时map的key；@Param(&quot;id&quot;)</span></span><br><span class="line">System.out.println(mapper.getEmpByIdAndLastName4(<span class="number">1</span>, <span class="string">&quot;jallen&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多个参数，不能直写id或lastName，否则抛出 org.apache.ibatis.binding.BindingException: Parameter &#x27;id&#x27; not found. Available parameters are [1, 0, param1, param2]--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdAndLastName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from tbl_employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdAndLastName2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where id = #&#123;0&#125; and last_name=#&#123;1&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdAndLastName3&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where id = #&#123;param1&#125; and last_name=#&#123;param2&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdAndLastName4&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpByIdAndLastName</span><span class="params">(Integer id, String name)</span>;</span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpByIdAndLastName2</span><span class="params">(Integer id, String name)</span>;</span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpByIdAndLastName3</span><span class="params">(Integer id, String name)</span>;</span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpByIdAndLastName4</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span>Integer id,// </span></span><br><span class="line"><span class="params"><span class="meta">@Param(&quot;lastName&quot;)</span>String name)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="21-映射文件-参数处理-POJO-amp-Map-amp-TO"><a href="#21-映射文件-参数处理-POJO-amp-Map-amp-TO" class="headerlink" title="21.映射文件-参数处理-POJO&amp;Map&amp;TO"></a>21.映射文件-参数处理-POJO&amp;Map&amp;TO</h2><ul><li>POJO：如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo；<ul><li><code>#&#123;属性名&#125;</code>：取出传入的pojo的属性值</li></ul></li><li>Map：如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map<ul><li><code>#&#123;key&#125;</code>：取出map中对应的值</li></ul></li><li>TO：如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象，如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Page&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParameters</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="comment">//传入map</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;jallen&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;4. &quot;</span> + mapper.getEmpByMap(map));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- map 作参输入 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="22-映射文件-参数处理-参数封装扩展思考"><a href="#22-映射文件-参数处理-参数封装扩展思考" class="headerlink" title="22.映射文件-参数处理-参数封装扩展思考"></a>22.映射文件-参数处理-参数封装扩展思考</h2><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;思考&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><ul><li><p><code>public Employee getEmp(@Param(&quot;id&quot;)Integer id,String lastName);</code></p><ul><li>取值：id&#x3D;&#x3D;&gt;#{id&#x2F;param1}   lastName&#x3D;&#x3D;&gt;#{param2}</li></ul></li><li><p><code>public Employee getEmp(Integer id,@Param(&quot;e&quot;)Employee emp);</code></p><ul><li>取值：id&#x3D;&#x3D;&gt;#{param1}    lastName&#x3D;&#x3D;&#x3D;&gt;#{param2.lastName&#x2F;e.lastName}</li></ul></li><li><p><strong>特别注意</strong>：如果是Collection（List、Set）类型或者是数组，</p><ul><li>也会特殊处理。也是把传入的list或者数组封装在map中。</li><li>key：Collection（collection）,如果是List还可以使用这个key(list)</li><li><code>public Employee getEmpById(List&lt;Integer&gt; ids);</code><ul><li>取值：取出第一个id的值：   #{list[0]}</li></ul></li></ul></li></ul><h2 id="23-源码分析-参数处理-参数封装map的过程"><a href="#23-源码分析-参数处理-参数封装map的过程" class="headerlink" title="23.源码分析-参数处理-参数封装map的过程"></a>23.源码分析-参数处理-参数封装map的过程</h2><p><strong>结合源码，mybatis怎么处理参数</strong></p><ul><li>(@Param(“id”)Integer id,@Param(“lastName”)String lastName);</li><li>ParamNameResolver解析参数封装map的；</li><li>names：{0&#x3D;id, 1&#x3D;lastName}；构造器的时候就确定好了</li></ul><p>确定流程：<br>1.获取每个标了param注解的参数的@Param的值：id，lastName；  赋值给name;<br>2.每次解析一个参数给map中保存信息：（key：参数索引，value：name的值）<br>name的值：<br>标注了param注解：注解的值<br>没有标注：<br>1.全局配置：useActualParamName（jdk1.8）：name&#x3D;参数名<br>2.name&#x3D;map.size()；相当于当前元素的索引<br>{0&#x3D;id, 1&#x3D;lastName,2&#x3D;2}</p><p>args【1，”Tom”,’hello’】:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getNamedParams</span><span class="params">(Object[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">paramCount</span> <span class="operator">=</span> names.size();</span><br><span class="line">    <span class="comment">//1、参数为null直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (args == <span class="literal">null</span> || paramCount == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//2、如果只有一个元素，并且没有Param注解；args[0]：单个参数直接返回</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> args[names.firstKey()];</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//3、多个元素或者有Param标注</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">ParamMap</span>&lt;Object&gt;();</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//4、遍历names集合；&#123;0=id, 1=lastName,2=2&#125;</span></span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//names集合的value作为key;  names集合的key又作为取值的参考args[0]:args【1，&quot;Tom&quot;】:</span></span><br><span class="line">      <span class="comment">//eg:&#123;id=args[0]:1,lastName=args[1]:Tom,2=args[2]&#125;</span></span><br><span class="line">        param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// add generic param names (param1, param2, ...)param</span></span><br><span class="line">        <span class="comment">//额外的将每一个参数也保存到map中，使用新的key：param1...paramN</span></span><br><span class="line">        <span class="comment">//效果：有Param注解可以#&#123;指定的key&#125;，或者#&#123;param1&#125;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">genericParamName</span> <span class="operator">=</span> GENERIC_NAME_PREFIX + String.valueOf(i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// ensure not to overwrite parameter named with @Param</span></span><br><span class="line">        <span class="keyword">if</span> (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">          param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；#{key}就可以取出map中的值；</p><h2 id="24-映射文件-参数处理-与-取值区别"><a href="#24-映射文件-参数处理-与-取值区别" class="headerlink" title="24.映射文件-参数处理-#与$取值区别"></a>24.映射文件-参数处理-#与$取值区别</h2><p><code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>都可以获取map中的值或者pojo对象属性的值；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_employee <span class="keyword">where</span> id<span class="operator">=</span>$&#123;id&#125; <span class="keyword">and</span> last_name<span class="operator">=</span>#&#123;lastName&#125;</span><br><span class="line">#Preparing:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_employee <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> last_name<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p><strong>区别</strong>：</p><ul><li><code>#&#123;&#125;</code> : 是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入</li><li><code>$&#123;&#125;</code> : 取出的值<strong>直接拼装</strong>在sql语句中；会有安全问题；</li></ul><p>大多情况下，我们去参数的值都应该去使用<code>#&#123;&#125;</code>。</p><p>原生jdbc不支持占位符的地方我们就可以使用<code>$&#123;&#125;</code>进行取值，比如分表、排序。。。；按照年份分表拆分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> $&#123;<span class="keyword">year</span>&#125;_salary <span class="keyword">where</span> xxx;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_employee <span class="keyword">order</span> <span class="keyword">by</span> $&#123;f_name&#125; $&#123;<span class="keyword">order</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="25-映射文件-参数处理-取值时指定参数相关规则"><a href="#25-映射文件-参数处理-取值时指定参数相关规则" class="headerlink" title="25.映射文件-参数处理-#取值时指定参数相关规则"></a>25.映射文件-参数处理-#取值时指定参数相关规则</h2><p><code>#&#123;&#125;</code>:更丰富的用法：</p><p>规定参数的一些规则：</p><ul><li>javaType、</li><li>jdbcType、</li><li>mode（存储过程）、</li><li>numericScale、</li><li>resultMap、</li><li>typeHandler、</li><li>jdbcTypeName、</li><li>expression（未来准备支持的功能）；</li></ul><p>例如：jdbcType</p><p>jdbcType通常需要在某种特定的条件下被设置：</p><ul><li>在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle DB（报错）；</li><li>JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，Oracle DB不能正确处理;</li></ul><p>由于全局配置中：jdbcTypeForNull&#x3D;OTHER，Oracle DB不支持，两种解决方法：</p><ol><li>在mapper文件中写<code>#&#123;email,jdbcType=NULL&#125;</code>;</li><li>在全局配置文件<code>&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</code></li></ol><h2 id="26-映射文件-select-返回List"><a href="#26-映射文件-select-返回List" class="headerlink" title="26.映射文件-select-返回List"></a>26.映射文件-select-返回List</h2><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsByLastNameLike(String lastName); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resultType：如果返回的是一个集合，要写集合中元素的类型  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByLastNameLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">select * from employee where last_name like #&#123;lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// return Collection</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsByLastNameLike</span><span class="params">(String str)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">List&lt;Employee&gt; result = em.getEmpsByLastNameLike(<span class="string">&quot;%a%&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27-映射文件-select-记录封装map"><a href="#27-映射文件-select-记录封装map" class="headerlink" title="27.映射文件-select-记录封装map"></a>27.映射文件-select-记录封装map</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条记录封装一个map：Map&lt;Integer,Employee&gt;:键是这条记录的主键，值是记录封装后的javaBean</span></span><br><span class="line"><span class="comment">//@MapKey:告诉mybatis封装这个map的时候使用哪个属性作为map的key</span></span><br><span class="line"><span class="meta">@MapKey(&quot;lastName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Employee&gt; <span class="title function_">getEmpByLastNameLikeReturnMap</span><span class="params">(String lastName)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一条记录的map；key就是列名，值就是对应的值</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getEmpByIdReturnMap</span><span class="params">(Integer id)</span>;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--public Map&lt;Integer, Employee&gt; getEmpByLastNameLikeReturnMap(String lastName);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByLastNameLikeReturnMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--public Map&lt;String, Object&gt; getEmpByIdReturnMap(Integer id);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdReturnMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">MapperTest</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">Map&lt;String, Object&gt; result = em.getEmpByIdReturnMap(<span class="number">1</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">Map&lt;String, Employee&gt; result2 = em.getEmpByLastNameLikeReturnMap(<span class="string">&quot;%a%&quot;</span>);</span><br><span class="line">System.out.println(result2);</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-映射文件-select-resultMap-自定义结果映射规则"><a href="#28-映射文件-select-resultMap-自定义结果映射规则" class="headerlink" title="28.映射文件-select-resultMap-自定义结果映射规则"></a>28.映射文件-select-resultMap-自定义结果映射规则</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义结果映射规则</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpByIdWithResultMap</span><span class="params">(Integer id)</span>;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">type：自定义规则的Java类型</span></span><br><span class="line"><span class="comment">id:唯一id方便引用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MySimpleEmp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定主键列的封装规则</span></span><br><span class="line"><span class="comment">id定义主键会底层有优化；</span></span><br><span class="line"><span class="comment">column：指定哪一列</span></span><br><span class="line"><span class="comment">property：指定对应的javaBean属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义普通列封装规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- resultMap:自定义结果集映射规则；  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- public Employee getEmpById(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdWithResultMap&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;MySimpleEmp&quot;</span>&gt;</span></span><br><span class="line">select * from employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultMap</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">System.out.println(em.getEmpByIdWithResultMap(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="29-映射文件-select-resultMap-关联查询-环境搭建"><a href="#29-映射文件-select-resultMap-关联查询-环境搭建" class="headerlink" title="29.映射文件-select-resultMap-关联查询-环境搭建"></a>29.映射文件-select-resultMap-关联查询-环境搭建</h2><p>新建类<a href="src/main/java/com/lun/c01/helloworld/bean/Department.java">Department.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String departmentName;</span><br><span class="line"><span class="keyword">private</span> List&lt;Employee&gt; emps;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter and setter and toString()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>修改类<a href="src/main/java/com/lun/c01/helloworld/bean/Employee.java">Employee.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span> Department department;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add department&#x27;s getter and setter</span></span><br></pre></td></tr></table></figure><hr><p>创建数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">department_name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> department_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_employee_department </span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(department_id) <span class="keyword">REFERENCES</span> department(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department(department_name) <span class="keyword">values</span> (<span class="string">&#x27;开发部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department(department_name) <span class="keyword">values</span> (<span class="string">&#x27;测试部&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="30-映射文件-select-resultMap-关联查询-级联属性封装结果"><a href="#30-映射文件-select-resultMap-关联查询-级联属性封装结果" class="headerlink" title="30.映射文件-select-resultMap-关联查询-级联属性封装结果"></a>30.映射文件-select-resultMap-关联查询-级联属性封装结果</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//联合查询：级联属性封装结果集</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpAndDept</span><span class="params">(Integer id)</span>;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 联合查询：级联属性封装结果集</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDifEmp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;department_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;department.id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;department_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;department.departmentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  public Employee getEmpAndDept(Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDifEmp&quot;</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">e.id id,e.last_name last_name,e.gender gender,</span><br><span class="line">e.department_id department_id, d.department_name department_name </span><br><span class="line">FROM employee e, department d</span><br><span class="line">WHERE e.department_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultMapAssociation</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">System.out.println(em.getEmpAndDept(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="31-映射文件-select-resultMap-关联查询-association定义关联对象封装规则"><a href="#31-映射文件-select-resultMap-关联查询-association定义关联对象封装规则" class="headerlink" title="31.映射文件-select-resultMap-关联查询-association定义关联对象封装规则"></a>31.映射文件-select-resultMap-关联查询-association定义关联对象封装规则</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//联合查询：级联属性封装结果集</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpAndDept2</span><span class="params">(Integer id)</span>;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><font>注意：使用该方法不写的column和property不会自动封装，因此必须写全，不能偷懒！</font></p><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  association可以指定联合的javaBean对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDifEmp2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment">property=&quot;dept&quot;：指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment">javaType:指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;department&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Department&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;department_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;department_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  public Employee getEmpAndDept2(Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDifEmp2&quot;</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">e.id id,e.last_name last_name,e.gender gender,</span><br><span class="line">e.department_id department_id, d.department_name department_name </span><br><span class="line">FROM employee e, department d</span><br><span class="line">WHERE e.department_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultMapAssociation2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">System.out.println(em.getEmpAndDept2(<span class="number">1</span>));</span><br><span class="line">System.out.println(em.getEmpAndDept2(<span class="number">1</span>).getDepartment());</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-映射文件-select-resultMap-关联查询-association分步查询"><a href="#32-映射文件-select-resultMap-关联查询-association分步查询" class="headerlink" title="32.映射文件-select-resultMap-关联查询-association分步查询"></a>32.映射文件-select-resultMap-关联查询-association分步查询</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/DepartmentMapper.java">DepartmentMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DepartmentMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Department <span class="title function_">getDeptById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/DepartmentMapper.xml">DepartmentMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.DepartmentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--public Department getDeptById(Integer id);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Department&quot;</span>&gt;</span></span><br><span class="line">select id,department_name departmentName from department where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;c03/EmployeeMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;c03/DepartmentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//association分步查询</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpByIdStep</span><span class="params">(Integer id)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- association分步查询  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用association进行分步查询：</span></span><br><span class="line"><span class="comment">1、先按照员工id查询员工信息</span></span><br><span class="line"><span class="comment">2、根据查询员工信息中的department_id值去部门表查出部门信息</span></span><br><span class="line"><span class="comment">3、部门设置到员工中；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  id  last_name  email   gender    d_id   --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyEmpByStep&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment"> select:表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment"> column:指定将哪一列的值传给这个方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;department&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.lun.c03.mapper.dao.DepartmentMapper.getDeptById&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;department_id&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByIdStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyEmpByStep&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResultMapAssociation3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">System.out.println(em.getEmpByIdStep(<span class="number">1</span>));</span><br><span class="line">System.out.println(em.getEmpByIdStep(<span class="number">1</span>).getDepartment());</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-映射文件-select-resultMap-关联查询-分步查询-amp-延迟加载"><a href="#33-映射文件-select-resultMap-关联查询-分步查询-amp-延迟加载" class="headerlink" title="33.映射文件-select-resultMap-关联查询-分步查询&amp;延迟加载"></a>33.映射文件-select-resultMap-关联查询-分步查询&amp;延迟加载</h2><p>我们每次查询Employee对象的时候，都将一起查询出来。部门信息在我们使用的时候再去查询；分段查询的基础之上加上两个配置：</p><p>在全局配置文件中配置，实现<strong>懒加载</strong></p><p><a href="src/main/resources/c03/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">&lt;!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Setting</th><th>Description</th><th>Valid Values</th><th>Default</th></tr></thead><tbody><tr><td>lazyLoadingEnabled</td><td>Globally enables or disables lazy loading. When enabled, all relations will be lazily loaded. This value can be superseded for an specific relation by using the fetchType attribute on it.</td><td>true&#x2F;false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>When enabled, an object with lazy loaded properties will be loaded entirely upon a call to any of the lazy properties. Otherwise, each property is loaded on demand.</td><td>true&#x2F;false</td><td>true</td></tr></tbody></table><blockquote><p>aggressive<br>英 [əˈɡresɪv]   美 [əˈɡresɪv]<br>adj.<br>好斗的;挑衅的;侵略的;富于攻击性的;气势汹汹的;声势浩大的;志在必得的</p></blockquote><p>PS. 个人认为aggressiveLazyLoading 可防止<strong>懒加载对象链</strong>情况出现。TODO: 待验证</p><h2 id="34-映射文件-select-resultMap-关联查询-collection定义关联集合封装规则"><a href="#34-映射文件-select-resultMap-关联查询-collection定义关联集合封装规则" class="headerlink" title="34.映射文件-select-resultMap-关联查询-collection定义关联集合封装规则"></a>34.映射文件-select-resultMap-关联查询-collection定义关联集合封装规则</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/DepartmentMapper.java">DepartmentMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DepartmentMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Department <span class="title function_">getDeptByIdPlus</span><span class="params">(Integer id)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/DepartmentMapper.xml">DepartmentMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.DepartmentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">public class Department &#123;</span></span><br><span class="line"><span class="comment">private Integer id;</span></span><br><span class="line"><span class="comment">private String departmentName;</span></span><br><span class="line"><span class="comment">private List&lt;Employee&gt; emps;</span></span><br><span class="line"><span class="comment">  did  dept_name  ||  eid  last_name  email   gender  </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Department&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;department_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">collection定义关联集合类型的属性的封装规则 </span></span><br><span class="line"><span class="comment">ofType:指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- public Department getDeptByIdPlus(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByIdPlus&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDept&quot;</span>&gt;</span></span><br><span class="line">SELECT d.id did,d.department_name department_name,</span><br><span class="line">e.id eid,e.last_name last_name,</span><br><span class="line">e.email email,e.gender gender</span><br><span class="line">FROM department d LEFT JOIN employee e ON d.id=e.department_id</span><br><span class="line">WHERE d.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/DepartmentMapperTest.java">DepartmentMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptByIdPlus</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DepartmentMapper</span> <span class="variable">dm</span> <span class="operator">=</span> session.getMapper(DepartmentMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> dm.getDeptByIdPlus(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(department);</span><br><span class="line">System.out.println(department.getEmps());</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-映射文件-select-resultMap-关联查询-collection分步查询-amp-延迟加载"><a href="#35-映射文件-select-resultMap-关联查询-collection分步查询-amp-延迟加载" class="headerlink" title="35.映射文件-select-resultMap-关联查询-collection分步查询&amp;延迟加载"></a>35.映射文件-select-resultMap-关联查询-collection分步查询&amp;延迟加载</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpsByDeptId</span><span class="params">(Integer id)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--  public Employee getEmpsByDeptId(Integer departmentId);--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByDeptId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where department_id=#&#123;department_id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c03/mapper/dao/DepartmentMapper.java">DepartmentMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DepartmentMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Department <span class="title function_">getDeptByIdStep</span><span class="params">(Integer id)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/DepartmentMapper.xml">DepartmentMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.DepartmentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- collection：分段查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Department&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDeptStep&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;department_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper.getEmpsByDeptId&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- public Department getDeptByIdStep(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByIdStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDeptStep&quot;</span>&gt;</span></span><br><span class="line">select id,department_name from department where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/DepartmentMapperTest.java">DepartmentMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptByIdStep</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DepartmentMapper</span> <span class="variable">dm</span> <span class="operator">=</span> session.getMapper(DepartmentMapper.class);</span><br><span class="line"><span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> dm.getDeptByIdStep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(department);</span><br><span class="line">System.out.println(department.getEmps());</span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="36-映射文件-select-resultMap-分步查询传递多列值-amp-fetchType"><a href="#36-映射文件-select-resultMap-分步查询传递多列值-amp-fetchType" class="headerlink" title="36.映射文件-select-resultMap-分步查询传递多列值&amp;fetchType"></a>36.映射文件-select-resultMap-分步查询传递多列值&amp;fetchType</h2><p>扩展：</p><ul><li>多列的值传递过去：<ul><li>将多列的值封装map传递；<code>column=&quot;&#123;key1=column1,key2=column2&#125;&quot;</code></li></ul></li><li>fetchType&#x3D;”lazy”：表示使用延迟加载；<ul><li>lazy：延迟</li><li>eager：立即</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Department&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDeptStep&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;department_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper.getEmpsByDeptId&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;&#123;deptId=id&#125;&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- public Department getDeptByIdStep(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByIdStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDeptStep&quot;</span>&gt;</span></span><br><span class="line">select id,department_name from department where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="37-映射文件-select-resultMap-discriminator鉴别器"><a href="#37-映射文件-select-resultMap-discriminator鉴别器" class="headerlink" title="37.映射文件-select-resultMap-discriminator鉴别器"></a>37.映射文件-select-resultMap-discriminator鉴别器</h2><p><a href="src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带有鉴别器的</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsWithDiscriminator</span><span class="params">()</span>;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- =======================鉴别器============================ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;discriminator javaType=&quot;&quot;&gt;&lt;/discriminator&gt;</span></span><br><span class="line"><span class="comment">鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为</span></span><br><span class="line"><span class="comment">封装Employee：</span></span><br><span class="line"><span class="comment">如果查出的是女生：就把部门信息查询出来，否则不查询；</span></span><br><span class="line"><span class="comment">如果是男生，把last_name这一列的值赋值给email;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyEmpDis&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> column：指定判定的列名</span></span><br><span class="line"><span class="comment"> javaType：列值对应的java类型  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;department&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.lun.c03.mapper.dao.DepartmentMapper.getDeptById&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;department_id&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--男生 ;如果是男生，把last_name这一列的值赋值给email; --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsWithDiscriminator&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyEmpDis&quot;</span>&gt;</span></span><br><span class="line"> select * from employee limit 10</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpsWithDiscriminator</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">System.out.println(em.getEmpsWithDiscriminator());</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="38-动态sql-简介-amp-环境搭建"><a href="#38-动态sql-简介-amp-环境搭建" class="headerlink" title="38.动态sql-简介&amp;环境搭建"></a>38.动态sql-简介&amp;环境搭建</h2><ul><li>动态SQL是MyBatis强大特性之一。极大的简化我们拼装SQL的操作。</li><li>动态SQL元素和使用 JSTL 或其他类似基于 XML 的文本处理器相似。</li><li>MyBatis采用功能强大的基于 OGNL 的表达式来简化操作。<ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul></li></ul><h2 id="39-动态sql-if-判断-amp-OGNL"><a href="#39-动态sql-if-判断-amp-OGNL" class="headerlink" title="39.动态sql-if-判断&amp;OGNL"></a>39.动态sql-if-判断&amp;OGNL</h2><p><a href="src/main/java/com/lun/c04/dynamicsql/DynamicSQLMapper.java">DynamicSQLMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSQLMapper</span> &#123;</span><br><span class="line"><span class="comment">//携带了哪个字段查询条件就带上这个字段的值</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsByConditionIf</span><span class="params">(Employee employee)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c04/DynamicSQLMapper.xml">DynamicSQLMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c04.dynamicsql.DynamicSQLMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsByConditionIf(Employee employee); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee where</span><br><span class="line"> <span class="comment">&lt;!-- test：判断表达式（OGNL）</span></span><br><span class="line"><span class="comment"> OGNL参照PPT或者官方文档。</span></span><br><span class="line"><span class="comment">    c:if  test</span></span><br><span class="line"><span class="comment"> 从参数中取值进行判断</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 遇见特殊符号应该去写转义字符：</span></span><br><span class="line"><span class="comment"> &amp;&amp;：</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line"> and last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line"> and email=#&#123;email&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  &quot;0&quot;==0 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender==0 or gender==1&quot;</span>&gt;</span></span><br><span class="line">  and gender=#&#123;gender&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c04/dynamicsql/DynamicSQLMapperTest.java">DynamicSQLMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSQLMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpsByConditionIf</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c04/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">dsm</span> <span class="operator">=</span> session.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;jallen&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(dsm.getEmpsByConditionIf(employee));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OGNL"><a href="#OGNL" class="headerlink" title="OGNL"></a>OGNL</h3><p><a href="http://commons.apache.org/proper/commons-ognl/language-guide.html">OGNL官方文档</a></p><p>OGNL（ Object Graph Navigation Language ）对象图导航语言， 这是一种强大的表达式语言，通过它可以非常方便的来操作对象属性。 类似于我们的EL， SpEL等。</p><ul><li>访问对象属性： person.name</li><li>调用方法： person.getName()</li><li>调用静态属性&#x2F;方法： @java.lang.Math@PI、@java.util.UUID@randomUUID()</li><li>调用构造方法： new com.lun.Person(‘admin’).name</li><li>运算符： +, -*, &#x2F;, %</li><li>逻辑运算符： in, not in, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, &#x3D;&#x3D;, !&#x3D;</li></ul><p><strong>注意</strong>： xml中特殊符号如”,&gt;,&lt;等这些都需要使用转义字符</p><p>访问集合伪属性：</p><table><thead><tr><th>类型</th><th>伪属性</th><th>伪属性对应的 Java 方法</th></tr></thead><tbody><tr><td>List、 Set、 Map</td><td>size、 isEmpty</td><td>List&#x2F;Set&#x2F;Map.size(),List&#x2F;Set&#x2F;Map.isEmpty()</td></tr><tr><td>List、 Set</td><td>iterator</td><td>List.iterator()、 Set.iterator()</td></tr><tr><td>Map</td><td>keys、 values</td><td>Map.keySet()、 Map.values()</td></tr><tr><td>Iterator</td><td>next、 hasNext</td><td>Iterator.next()、 Iterator.hasNext()</td></tr></tbody></table><h2 id="40-动态sql-where-查询条件"><a href="#40-动态sql-where-查询条件" class="headerlink" title="40.动态sql-where-查询条件"></a>40.动态sql-where-查询条件</h2><p>查询的时候如果某些条件没带可能sql拼装会有问题</p><ol><li>给where后面加上1&#x3D;1，以后的条件都and xxx。</li><li>mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉（where只会去掉第一个多出来的and或者or，<strong>但最后一个多出来的and或者or则不会去掉</strong>）。</li></ol><p><a href="src/main/resources/c04/DynamicSQLMapper.xml">DynamicSQLMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c04.dynamicsql.DynamicSQLMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionIfWithWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee</span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line"> and last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line"> and email=#&#123;email&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  &quot;0&quot;==0 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender==0 or gender==1&quot;</span>&gt;</span></span><br><span class="line">  and gender=#&#123;gender&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c04/dynamicsql/DynamicSQLMapper.java">DynamicSQLMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSQLMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsByConditionIfWithWhere</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c04/dynamicsql/DynamicSQLMapperTest.java">DynamicSQLMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSQLMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpsByConditionIfWithWhere</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c04/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">dsm</span> <span class="operator">=</span> session.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="literal">null</span>, <span class="string">&quot;jallen&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(dsm.getEmpsByConditionIfWithWhere(employee));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="41-动态sql-trim-自定义字符串截取"><a href="#41-动态sql-trim-自定义字符串截取" class="headerlink" title="41.动态sql-trim-自定义字符串截取"></a>41.动态sql-trim-自定义字符串截取</h2><p>后面多出的and或者or where标签不能解决</p><ul><li>prefix&#x3D;””:前缀：trim标签体中是整个字符串拼串后的结果。<ul><li>prefix给拼串后的整个字符串加一个前缀</li></ul></li><li>prefixOverrides&#x3D;””:<ul><li>前缀覆盖： 去掉整个字符串前面多余的字符</li></ul></li><li>suffix&#x3D;””:后缀<ul><li>suffix给拼串后的整个字符串加一个后缀</li></ul></li><li>suffixOverrides&#x3D;””<ul><li>后缀覆盖：去掉整个字符串后面多余的字符</li></ul></li></ul><p><a href="src/main/java/com/lun/c04/dynamicsql/DynamicSQLMapper.java">DynamicSQLMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSQLMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsByConditionTrim</span><span class="params">(Employee employee)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c04/DynamicSQLMapper.xml">DynamicSQLMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c04.dynamicsql.DynamicSQLMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--public List&lt;Employee&gt; getEmpsByConditionTrim(Employee employee);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee</span><br><span class="line"> <span class="comment">&lt;!-- 自定义字符串的截取规则 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line"> last_name like #&#123;lastName&#125; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line"> email=#&#123;email&#125; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  &quot;0&quot;==0 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender==0 or gender==1&quot;</span>&gt;</span></span><br><span class="line">  gender=#&#123;gender&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c04/dynamicsql/DynamicSQLMapperTest.java">DynamicSQLMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSQLMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpsByConditionTrim</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c04/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">dsm</span> <span class="operator">=</span> session.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;jallen&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(dsm.getEmpsByConditionTrim(employee));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="42-动态sql-choose-分支选择"><a href="#42-动态sql-choose-分支选择" class="headerlink" title="42.动态sql-choose-分支选择"></a>42.动态sql-choose-分支选择</h2><p><a href="src/main/java/com/lun/c04/dynamicsql/DynamicSQLMapper.java">DynamicSQLMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSQLMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsByConditionChoose</span><span class="params">(Employee employee)</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c04/DynamicSQLMapper.xml">DynamicSQLMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c04.dynamicsql.DynamicSQLMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsByConditionChoose(Employee employee); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"> select * from employee </span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null&quot;</span>&gt;</span></span><br><span class="line"> last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line"> email = #&#123;email&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> gender = 0</span><br><span class="line"> <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c04/dynamicsql/DynamicSQLMapperTest.java">DynamicSQLMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSQLMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpsByConditionChoose</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c04/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">dsm</span> <span class="operator">=</span> session.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;jallen&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(dsm.getEmpsByConditionChoose(employee));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43-动态sql-set-与if结合的动态更新"><a href="#43-动态sql-set-与if结合的动态更新" class="headerlink" title="43.动态sql-set-与if结合的动态更新"></a>43.动态sql-set-与if结合的动态更新</h2><p><a href="src/main/java/com/lun/c04/dynamicsql/DynamicSQLMapper.java">DynamicSQLMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSQLMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateEmp</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c04/DynamicSQLMapper.xml">DynamicSQLMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c04.dynamicsql.DynamicSQLMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--public void updateEmp(Employee employee);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmp&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- Set标签的使用 --&gt;</span></span><br><span class="line"> update employee </span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null&quot;</span>&gt;</span></span><br><span class="line">last_name=#&#123;lastName&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span></span><br><span class="line">email=#&#123;email&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">gender=#&#123;gender&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">where id=#&#123;id&#125; </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Trim：更新拼串</span></span><br><span class="line"><span class="comment">update tbl_employee </span></span><br><span class="line"><span class="comment">&lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;if test=&quot;lastName!=null&quot;&gt;</span></span><br><span class="line"><span class="comment">last_name=#&#123;lastName&#125;,</span></span><br><span class="line"><span class="comment">&lt;/if&gt;</span></span><br><span class="line"><span class="comment">&lt;if test=&quot;email!=null&quot;&gt;</span></span><br><span class="line"><span class="comment">email=#&#123;email&#125;,</span></span><br><span class="line"><span class="comment">&lt;/if&gt;</span></span><br><span class="line"><span class="comment">&lt;if test=&quot;gender!=null&quot;&gt;</span></span><br><span class="line"><span class="comment">gender=#&#123;gender&#125;</span></span><br><span class="line"><span class="comment">&lt;/if&gt;</span></span><br><span class="line"><span class="comment">&lt;/trim&gt;</span></span><br><span class="line"><span class="comment">where id=#&#123;id&#125;  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c04/dynamicsql/DynamicSQLMapperTest.java">DynamicSQLMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSQLMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateEmp</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c04/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">dsm</span> <span class="operator">=</span> session.getMapper(DynamicSQLMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;jallen2&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">dsm.updateEmp(employee);</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="44-动态sql-foreach-遍历集合"><a href="#44-动态sql-foreach-遍历集合" class="headerlink" title="44.动态sql-foreach-遍历集合"></a>44.动态sql-foreach-遍历集合</h2><ul><li><p>collection：指定要遍历的集合：</p><ul><li>list类型的参数会特殊处理封装在map中，map的key就叫list</li></ul></li><li><p>item：将当前遍历出的元素赋值给指定的变量</p></li><li><p>separator:每个元素之间的分隔符</p></li><li><p>open：遍历出所有结果拼接一个开始的字符</p></li><li><p>close:遍历出所有结果拼接一个结束的字符</p></li><li><p>index:索引。遍历list的时候是index就是索引，item就是当前值</p><ul><li>遍历map的时候index表示的就是map的key，item就是map的值</li></ul></li><li><p><code>#&#123;变量名&#125;</code>就能取出变量的值也就是当前遍历出的元素</p></li></ul><p><a href="src/main/java/com/lun/c04/dynamicsql/DynamicSQLMapper.java">DynamicSQLMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSQLMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsByConditionForeach</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span>List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c04/DynamicSQLMapper.xml">DynamicSQLMapper.xml</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.lun.c04.dynamicsql.DynamicSQLMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--<span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmpsByConditionForeach</span><span class="params">(List&lt;Integer&gt; ids)</span>;  --&gt;</span><br><span class="line"> &lt;select id=<span class="string">&quot;getEmpsByConditionForeach&quot;</span> resultType=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br><span class="line"> select * from employee</span><br><span class="line"> &lt;foreach collection=<span class="string">&quot;ids&quot;</span> item=<span class="string">&quot;item_id&quot;</span> separator=<span class="string">&quot;,&quot;</span></span><br><span class="line"> open=<span class="string">&quot;where id in(&quot;</span> close=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line"> #&#123;item_id&#125;</span><br><span class="line"> &lt;/foreach&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c04/dynamicsql/DynamicSQLMapperTest.java">DynamicSQLMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSQLMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpsByConditionForeach</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c04/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">dsm</span> <span class="operator">=</span> session.getMapper(DynamicSQLMapper.class);</span><br><span class="line"></span><br><span class="line">System.out.println(dsm.getEmpsByConditionForeach(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="45-动态sql-foreach-mysql下foreach批量插入的两种方式"><a href="#45-动态sql-foreach-mysql下foreach批量插入的两种方式" class="headerlink" title="45.动态sql-foreach-mysql下foreach批量插入的两种方式"></a>45.动态sql-foreach-mysql下foreach批量插入的两种方式</h2><p><a href="src/main/java/com/lun/c04/dynamicsql/DynamicSQLMapper.java">DynamicSQLMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSQLMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEmps</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span>List&lt;Employee&gt; emps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEmps2</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span>List&lt;Employee&gt; emps)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c04/DynamicSQLMapper.xml">DynamicSQLMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c04.dynamicsql.DynamicSQLMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 批量保存 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--public void addEmps(@Param(&quot;emps&quot;)List&lt;Employee&gt; emps);  --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmps&quot;</span>&gt;</span></span><br><span class="line"> insert into employee(last_name,email,gender,department_id) </span><br><span class="line">values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.department.id&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span><span class="comment">&lt;!--   --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true；</span></span><br><span class="line"><span class="comment"> 这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmps2&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line"> insert into employee(last_name,email,gender,department_id)</span><br><span class="line"> values(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.department.id&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，MySQL数据库连接属性allowMultiQueries&#x3D;true，才能批量删除，修改数据。（在连接MySQL的URL后添加参数）。</p><hr><p><a href="src/test/java/com/lun/c04/dynamicsql/DynamicSQLMapperTest.java">DynamicSQLMapperTest.java</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicSQLMapperTest &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testAddEmps2() throws IOException &#123;</span><br><span class="line">SqlSessionFactory ssf = Tools.getSqlSessionFactory(&quot;c04/mybatis-config.xml&quot;);</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">try &#123;</span><br><span class="line">DynamicSQLMapper dsm = session.getMapper(DynamicSQLMapper.class);</span><br><span class="line"></span><br><span class="line">dsm.addEmps2(Arrays.asList(new Employee(null, &quot;abc&quot;, null, null),</span><br><span class="line">new Employee(null, &quot;cba&quot;,null, null)));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testAddEmps() throws IOException &#123;</span><br><span class="line">SqlSessionFactory ssf = Tools.getSqlSessionFactory(&quot;c04/mybatis-config.xml&quot;);</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">try &#123;</span><br><span class="line">DynamicSQLMapper dsm = session.getMapper(DynamicSQLMapper.class);</span><br><span class="line">dsm.addEmps(Arrays.asList(new Employee(null, &quot;abc&quot;, null, null),</span><br><span class="line">new Employee(null, &quot;cba&quot;,null, null)));</span><br><span class="line">session.commit();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46-动态sql-foreach-oracle下批量插入的两种方式"><a href="#46-动态sql-foreach-oracle下批量插入的两种方式" class="headerlink" title="46.动态sql-foreach-oracle下批量插入的两种方式"></a>46.动态sql-foreach-oracle下批量插入的两种方式</h2><p>Oracle数据库批量保存：</p><ul><li>Oracle不支持values(),(),()</li></ul><p>Oracle支持的批量方式:</p><ol><li>多个insert放在begin - end里面</li><li>利用中间表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 多个<span class="keyword">insert</span>放在<span class="keyword">begin</span> <span class="operator">-</span> <span class="keyword">end</span>里面</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> employees(employee_id,last_name,email) </span><br><span class="line">    <span class="keyword">values</span>(employees_seq.nextval,<span class="string">&#x27;test_001&#x27;</span>,<span class="string">&#x27;test_001@atguigu.com&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> employees(employee_id,last_name,email) </span><br><span class="line">    <span class="keyword">values</span>(employees_seq.nextval,<span class="string">&#x27;test_002&#x27;</span>,<span class="string">&#x27;test_002@atguigu.com&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"># 利用中间表</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees(employee_id,last_name,email)</span><br><span class="line">   <span class="keyword">select</span> employees_seq.nextval,lastName,email <span class="keyword">from</span>(</span><br><span class="line">          <span class="keyword">select</span> <span class="string">&#x27;test_a_01&#x27;</span> lastName,<span class="string">&#x27;test_a_e01&#x27;</span> email <span class="keyword">from</span> dual</span><br><span class="line">          <span class="keyword">union</span></span><br><span class="line">          <span class="keyword">select</span> <span class="string">&#x27;test_a_02&#x27;</span> lastName,<span class="string">&#x27;test_a_e02&#x27;</span> email <span class="keyword">from</span> dual</span><br><span class="line">          <span class="keyword">union</span></span><br><span class="line">          <span class="keyword">select</span> <span class="string">&#x27;test_a_03&#x27;</span> lastName,<span class="string">&#x27;test_a_e03&#x27;</span> email <span class="keyword">from</span> dual</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><h2 id="47-动态sql-foreach-oracle下foreach批量保存两种方式"><a href="#47-动态sql-foreach-oracle下foreach批量保存两种方式" class="headerlink" title="47.动态sql-foreach-oracle下foreach批量保存两种方式"></a>47.动态sql-foreach-oracle下foreach批量保存两种方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmps&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- oracle第一种批量方式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot; open=&quot;begin&quot; close=&quot;end;&quot;&gt;</span></span><br><span class="line"><span class="comment">insert into employees(employee_id,last_name,email) </span></span><br><span class="line"><span class="comment">    values(employees_seq.nextval,#&#123;emp.lastName&#125;,#&#123;emp.email&#125;);</span></span><br><span class="line"><span class="comment">&lt;/foreach&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- oracle第二种批量方式  --&gt;</span></span><br><span class="line">insert into employees(employee_id,last_name,email)</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;union&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">open</span>=<span class="string">&quot;select employees_seq.nextval,lastName,email from(&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">select #&#123;emp.lastName&#125; lastName,#&#123;emp.email&#125; email from dual</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="48-动态sql-内置参数-parameter-amp-databaseId"><a href="#48-动态sql-内置参数-parameter-amp-databaseId" class="headerlink" title="48.动态sql-内置参数 _parameter &amp; _databaseId"></a>48.动态sql-内置参数 _parameter &amp; _databaseId</h2><p>不只是方法传递过来的参数可以被用来判断，</p><p>mybatis默认还有<strong>两个内置参数</strong>：</p><ol><li><strong>_parameter</strong>:代表整个参数<ul><li>单个参数：_parameter就是这个参数</li><li>多个参数：参数会被封装为一个map；_parameter就是代表这个map</li></ul></li><li><strong>_databaseId</strong>:如果配置了databaseIdProvider标签。<ul><li>_databaseId就是代表当前数据库的别名oracle</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--public List&lt;Employee&gt; getEmpsTestInnerParameter(Employee employee);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsTestInnerParameter&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;mysql&#x27;&quot;</span>&gt;</span></span><br><span class="line">select * from tbl_employee</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="line">where last_name like #&#123;_parameter.lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">select * from employees</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="line">where last_name like #&#123;_parameter.lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="49-动态sql-bind-绑定（不常用）"><a href="#49-动态sql-bind-绑定（不常用）" class="headerlink" title="49.动态sql-bind-绑定（不常用）"></a>49.动态sql-bind-绑定（不常用）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--public List&lt;Employee&gt; getEmpsTestInnerParameter(Employee employee);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsTestInnerParameter&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+lastName+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;mysql&#x27;&quot;</span>&gt;</span></span><br><span class="line">select * from tbl_employee</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="line">where last_name like #&#123;lastName&#125;<span class="comment">&lt;!-- 这里使用到lastName --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">select * from employees</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="line">where last_name like #&#123;_parameter.lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="50-动态sql-sql-抽取可重用的sql片段"><a href="#50-动态sql-sql-抽取可重用的sql片段" class="headerlink" title="50.动态sql-sql-抽取可重用的sql片段"></a>50.动态sql-sql-抽取可重用的sql片段</h2><p>抽取可重用的sql片段。方便后面引用：</p><ol><li>sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</li><li>include来引用已经抽取的sql：</li><li>include还可以自定义一些property，sql标签内部就能使用自定义的属性<ul><li>include-property：取值的正确方式${prop},</li><li>不能使用<code>#&#123;&#125;</code>，而使用<code>$&#123;&#125;</code></li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">sql</span> id<span class="operator">=</span>&quot;userColumns&quot;<span class="operator">&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectUsers&quot; resultType<span class="operator">=</span>&quot;map&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="operator">&lt;</span>include refid<span class="operator">=</span>&quot;userColumns&quot;<span class="operator">&gt;</span><span class="operator">&lt;</span>property name<span class="operator">=</span>&quot;alias&quot; <span class="keyword">value</span><span class="operator">=</span>&quot;t1&quot;<span class="operator">/</span><span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>include<span class="operator">&gt;</span>,</span><br><span class="line"><span class="operator">&lt;</span>include refid<span class="operator">=</span>&quot;userColumns&quot;<span class="operator">&gt;</span><span class="operator">&lt;</span>property name<span class="operator">=</span>&quot;alias&quot; <span class="keyword">value</span><span class="operator">=</span>&quot;t2&quot;<span class="operator">/</span><span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>include<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> some_table t1</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> some_table t2</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">sql</span> id<span class="operator">=</span>&quot;insertColumn&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;_databaseId==&#x27;oracle&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">employee_id,last_name,email</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;_databaseId==&#x27;mysql&#x27;&quot;<span class="operator">&gt;</span></span><br><span class="line">last_name,email,gender,d_id</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">sql</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">insert</span> id<span class="operator">=</span>&quot;addEmps&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_employee(</span><br><span class="line"><span class="operator">&lt;</span>include refid<span class="operator">=</span>&quot;insertColumn&quot;<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>include<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- 使用地方 --&gt;</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">values</span></span><br><span class="line"><span class="operator">&lt;</span>foreach collection<span class="operator">=</span>&quot;emps&quot; item<span class="operator">=</span>&quot;emp&quot; separator<span class="operator">=</span>&quot;,&quot;<span class="operator">&gt;</span></span><br><span class="line">(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"> <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">insert</span><span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="51-缓存-缓存介绍"><a href="#51-缓存-缓存介绍" class="headerlink" title="51.缓存-缓存介绍"></a>51.缓存-缓存介绍</h2><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache">MyBatis官方文档</a></p><p>MyBatis 包含一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存，一级缓存和二级缓存。</p><ol><li>默认情况下，只有一级缓存（ SqlSession级别的缓存，也称为本地缓存）开启。</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性。 MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ol><h2 id="52-缓存-一级缓存体验"><a href="#52-缓存-一级缓存体验" class="headerlink" title="52.缓存-一级缓存体验"></a>52.缓存-一级缓存体验</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li>一级缓存(local cache)，即本地缓存，作用域默认为sqlSession。当 Session flush 或 close 后, 该Session 中的所有 Cache 将被清空。</li><li>本地缓存不能被关闭, 但可以调用 clearCache() 来清空本地缓存, 或者改变缓存的作用域.</li><li>在mybatis3.1之后, 可以配置本地缓存的作用域. 在 mybatis.xml 中配置</li></ul><table><thead><tr><th>-</th><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>localCacheScope</td><td>MyBatis uses local cache to prevent circular references and speed up repeated nested queries. By default (SESSION) all queries executed during a session are cached. If localCacheScope&#x3D;STATEMENT local session will be used just for statement execution, no data will be shared between two different calls to the same SqlSession.</td><td>SESSION&#x2F;STATEMENT</td><td>SESSION</td></tr></tbody></table><h3 id="一级缓存体验"><a href="#一级缓存体验" class="headerlink" title="一级缓存体验"></a>一级缓存体验</h3><p><a href="src/test/java/com/lun/c05/cache/CacheTest.java">CacheTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFirstCache</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c03/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> em.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(e1);</span><br><span class="line"></span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> em.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(e2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;e1 == e2 : &quot;</span> + (e1 == e2));</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 08-02 22:50:35,092 ==&gt;  Preparing: select * from employee where id = ?   (BaseJdbcLogger.java:145) </span><br><span class="line">DEBUG 08-02 22:50:35,192 ==&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:145) </span><br><span class="line">DEBUG 08-02 22:50:35,260 &lt;==      Total: 1  (BaseJdbcLogger.java:145) </span><br><span class="line">Employee [id=1, lastName=jallen2, email=jallen@good.com, gender=1, department=null]</span><br><span class="line">Employee [id=1, lastName=jallen2, email=jallen@good.com, gender=1, department=null]</span><br><span class="line">e1 == e2 : true &lt;-------------e1和e2指向相同的对象</span><br></pre></td></tr></table></figure><h2 id="53-缓存-一级缓存失效的四种情况"><a href="#53-缓存-一级缓存失效的四种情况" class="headerlink" title="53.缓存-一级缓存失效的四种情况"></a>53.缓存-一级缓存失效的四种情况</h2><p>同一次会话期间只要查询过的数据都会保存在当前SqlSession的一个Map中</p><ul><li>key &#x3D; hashCode + 查询的SqlId + 编写的sql查询语句 + 参数</li></ul><p>一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次<strong>增删改</strong>操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol><h2 id="54-缓存-二级缓存介绍"><a href="#54-缓存-二级缓存介绍" class="headerlink" title="54.缓存-二级缓存介绍"></a>54.缓存-二级缓存介绍</h2><ul><li>二级缓存(second level cache)，全局作用域缓存</li><li>二级缓存默认不开启，需要手动配置</li><li>MyBatis提供二级缓存的接口以及实现，缓存实现要求 POJO实现Serializable接口</li><li>二级缓存在 SqlSession 关闭或提交之后才会生效</li><li>使用步骤<ol><li>全局配置文件中开启二级缓存<ul><li><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></li></ul></li><li>需要使用二级缓存的映射文件处使用cache配置缓存<ul><li><code>&lt;cache /&gt;</code></li></ul></li><li><strong>注意</strong>： POJO需要实现Serializable接口</li></ol></li></ul><p>cache标签的属性：</p><ul><li>eviction:缓存的回收策略：<ul><li>LRU – 最近最少使用的：移除最长时间不被使用的对象。</li><li>FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU。</li></ul></li><li>flushInterval：缓存刷新间隔<ul><li>缓存多长时间清空一次，默认不清空，设置一个毫秒值</li></ul></li><li>readOnly:是否只读：<ul><li>true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快</li><li>false：非只读：mybatis觉得获取的数据可能会被修改。mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速度慢</li></ul></li><li>size：缓存存放多少元素；</li><li>type&#x3D;””：指定自定义缓存的全类名；<ul><li>实现Cache接口即可；</li></ul></li></ul><h2 id="55-缓存-二级缓存使用-amp-细节"><a href="#55-缓存-二级缓存使用-amp-细节" class="headerlink" title="55.缓存-二级缓存使用&amp;细节"></a>55.缓存-二级缓存使用&amp;细节</h2><p>使用步骤:</p><ol><li>全局配置文件中开启二级缓存<ul><li><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></li></ul></li><li>需要使用二级缓存的映射文件处使用cache配置缓存<ul><li><code>&lt;cache /&gt;</code></li></ul></li><li><strong>注意</strong>： POJO需要实现Serializable接口</li></ol><p><a href="src/main/resources/c05/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c01/helloworld/bean/Employee.java">Employee.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7390587151857533202L</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c05/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;false&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1024&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c05/cache/CacheTest.java">CacheTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSecondCache</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c05/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session2</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> em.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(e1);</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">em2</span> <span class="operator">=</span> session2.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> em2.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(e2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;e1 == e2 : &quot;</span> + (e1 == e2));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session2.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 08-03 01:13:02,575 Cache Hit Ratio [com.lun.c03.mapper.dao.EmployeeMapper]: 0.0  (LoggingCache.java:62) </span><br><span class="line">DEBUG 08-03 01:13:03,945 ==&gt;  Preparing: select * from employee where id = ?   (BaseJdbcLogger.java:145) </span><br><span class="line">DEBUG 08-03 01:13:04,081 ==&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:145) </span><br><span class="line">DEBUG 08-03 01:13:04,186 &lt;==      Total: 1  (BaseJdbcLogger.java:145) </span><br><span class="line">Employee [id=1, lastName=jallen2, email=jallen@good.com, gender=1, department=null]</span><br><span class="line">DEBUG 08-03 01:13:04,218 Cache Hit Ratio [com.lun.c03.mapper.dao.EmployeeMapper]: 0.5  (LoggingCache.java:62) </span><br><span class="line">Employee [id=1, lastName=jallen2, email=jallen@good.com, gender=1, department=null]</span><br><span class="line">e1 == e2 : false</span><br></pre></td></tr></table></figure><h2 id="56-缓存-缓存有关的设置以及属性"><a href="#56-缓存-缓存有关的设置以及属性" class="headerlink" title="56.缓存-缓存有关的设置以及属性"></a>56.缓存-缓存有关的设置以及属性</h2><ol><li>全局setting的cacheEnable：<br>– 配置二级缓存的开关。一级缓存一直是打开的。</li><li>select标签的useCache属性：<br>– 配置这个select是否使用二级缓存。一级缓存一直是使用的</li><li>每个增删改标签的flushCache属性：<br>– 增删改默认flushCache&#x3D;true。sql执行以后，会同时清空一级和二级缓存。查询默认flushCache&#x3D;false。</li><li>sqlSession.clearCache()：<br>– 只是用来清除一级缓存。</li><li>全局setting的localCacheScope：本地缓存作用域：（一级缓存SESSION），当前会话的所有数据保存在会话缓存中；STATEMENT：可以禁用一级缓存。</li></ol><h2 id="57-缓存-缓存原理图示"><a href="#57-缓存-缓存原理图示" class="headerlink" title="57.缓存-缓存原理图示"></a>57.缓存-缓存原理图示</h2><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/04.png"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220217184558739.png" alt="image-20220217184558739"></p><h2 id="58-缓存-第三方缓存整合原理-amp-ehcache适配包下载"><a href="#58-缓存-第三方缓存整合原理-amp-ehcache适配包下载" class="headerlink" title="58.缓存-第三方缓存整合原理&amp;ehcache适配包下载"></a>58.缓存-第三方缓存整合原理&amp;ehcache适配包下载</h2><ul><li>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。</li><li>MyBatis定义了Cache接口方便我们进行自定义扩展。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">  String <span class="title function_">getId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">  Object <span class="title function_">getObject</span><span class="params">(Object key)</span>;</span><br><span class="line"></span><br><span class="line">  Object <span class="title function_">removeObject</span><span class="params">(Object key)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>;</span><br><span class="line">  </span><br><span class="line">  ReadWriteLock <span class="title function_">getReadWriteLock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="59-缓存-MyBatis整合ehcache-amp-总结"><a href="#59-缓存-MyBatis整合ehcache-amp-总结" class="headerlink" title="59.缓存-MyBatis整合ehcache&amp;总结"></a>59.缓存-MyBatis整合ehcache&amp;总结</h2><p>步骤：</p><ul><li>加入mybatis-ehcache依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编写<a href="src/main/resources/ehcache.xml">ehcache.xml</a>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;C:\\ehcache&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">defaultCache</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">属性说明：</span></span><br><span class="line"><span class="comment">l diskStore：指定数据在磁盘中的存储位置。</span></span><br><span class="line"><span class="comment">l defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">以下属性是必须的：</span></span><br><span class="line"><span class="comment">l maxElementsInMemory - 在内存中缓存的element的最大数目 </span></span><br><span class="line"><span class="comment">l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大</span></span><br><span class="line"><span class="comment">l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断</span></span><br><span class="line"><span class="comment">l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">以下属性是可选的：</span></span><br><span class="line"><span class="comment">l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大</span></span><br><span class="line"><span class="comment">l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</span></span><br><span class="line"><span class="comment"> diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.</span></span><br><span class="line"><span class="comment">l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</span></span><br><span class="line"><span class="comment">l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作</span></span><br><span class="line"><span class="comment">l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置cache标签<code>&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;&lt;/cache&gt;</code></li></ul><hr><p>演示：</p><p><a href="src/main/resources/c05/DepartmentMapper.xml">DepartmentMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c03.mapper.dao.DepartmentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c05/cache/CacheTest.java">CacheTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEhcache</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">ssf</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c05/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session2</span> <span class="operator">=</span> ssf.openSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DepartmentMapper</span> <span class="variable">dm</span> <span class="operator">=</span> session.getMapper(DepartmentMapper.class);</span><br><span class="line"><span class="type">Department</span> <span class="variable">dp</span> <span class="operator">=</span> dm.getDeptById(<span class="number">1</span>);</span><br><span class="line">System.out.println(dp);</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line"><span class="type">DepartmentMapper</span> <span class="variable">dm2</span> <span class="operator">=</span> session2.getMapper(DepartmentMapper.class);</span><br><span class="line"><span class="type">Department</span> <span class="variable">dp2</span> <span class="operator">=</span> dm2.getDeptById(<span class="number">1</span>);</span><br><span class="line">System.out.println(dp2);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session2.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>另外</strong>：</p><p>参照缓存： 若想在命名空间中共享相同的缓存配置和实例。可以使用 cache-ref 元素来引用另外一个缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.mybatis.dao.DepartmentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用缓存：namespace：指定和哪个名称空间下的缓存一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.mybatis.dao.EmployeeMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="60-整合Spring-整合适配包下载"><a href="#60-整合Spring-整合适配包下载" class="headerlink" title="60.整合Spring-整合适配包下载"></a>60.整合Spring-整合适配包下载</h2><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 SqlSession 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 DataAccessException。最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p><p><a href="http://mybatis.org/spring/zh/index.html">官方文档</a></p><p><a href="https://github.com/mybatis/spring">源码仓库</a></p><p><a href="https://github.com/mybatis/jpetstore-6">官方整合示例</a></p><h2 id="61-整合Spring-所有需要的jar包导入"><a href="#61-整合Spring-所有需要的jar包导入" class="headerlink" title="61.整合Spring-所有需要的jar包导入"></a>61.整合Spring-所有需要的jar包导入</h2><p><a href="pom.xml">pom.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DB连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JSP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用于整合Spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="62-整合Spring-引入MyBatis之前的配置"><a href="#62-整合Spring-引入MyBatis之前的配置" class="headerlink" title="62.整合Spring-引入MyBatis之前的配置"></a>62.整合Spring-引入MyBatis之前的配置</h2><p><a href="src/main/resources/c06/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c06/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.c06.spring.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">select * from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmps&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">select * from employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c06/spring/EmployeeMapper.java">EmployeeMapper</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getEmpById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmps</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="63-整合Spring-SpringMVC配置文件编写"><a href="#63-整合Spring-SpringMVC配置文件编写" class="headerlink" title="63.整合Spring-SpringMVC配置文件编写"></a>63.整合Spring-SpringMVC配置文件编写</h2><p><a href="src/main/webapp/WEB-INF/web.xml">web.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Spring配置： needed for ContextLoaderListener --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SpringMVC配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/webapp/WEB-INF/spring-servlet.xml">spring-servlet.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SpringMVC只是控制网站跳转逻辑  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只扫描控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lun.c06&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="64-整合Spring-Spring配置文件编写"><a href="#64-整合Spring-Spring配置文件编写" class="headerlink" title="64.整合Spring-Spring配置文件编写"></a>64.整合Spring-Spring配置文件编写</h2><p><a href="src/main/resources/c06/applicationContext.xml">applicationContext.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring希望管理所有的业务逻辑组件，等。。。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lun.c06&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入数据库的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:c04/dbconfig.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring用来控制业务逻辑。数据源、事务控制、aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启基于注解的事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span>/&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="65-整合Spring-Spring整合MyBatis关键配置"><a href="#65-整合Spring-Spring整合MyBatis关键配置" class="headerlink" title="65.整合Spring-Spring整合MyBatis关键配置"></a>65.整合Spring-Spring整合MyBatis关键配置</h2><p><a href="src/main/resources/c06/applicationContext.xml">applicationContext.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">整合mybatis </span></span><br><span class="line"><span class="comment">目的：1、spring管理所有组件。mapper的实现类。</span></span><br><span class="line"><span class="comment">service==&gt;Dao   @Autowired:自动注入mapper；</span></span><br><span class="line"><span class="comment">2、spring用来管理事务，spring声明式事务</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建出SqlSessionFactory对象  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- configLocation指定全局配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:c06/mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mapperLocations: 指定mapper文件的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:c06/*Mapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置一个可以进行批量执行的sqlSession  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;executorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BATCH&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入；</span></span><br><span class="line"><span class="comment">base-package：指定mapper接口的包名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis-spring:scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lun.c06&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;property name=&quot;basePackage&quot; value=&quot;com.lun.dao&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="66-整合Spring-整合测试"><a href="#66-整合Spring-整合测试" class="headerlink" title="66.整合Spring-整合测试"></a>66.整合Spring-整合测试</h2><p><a href="src/main/java/com/lun/c06/spring/EmployeeController.java">EmployeeController.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5415910268862124882L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getemps&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">emps</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">List&lt;Employee&gt; emps = employeeService.getEmps();</span><br><span class="line">map.put(<span class="string">&quot;allEmps&quot;</span>, emps);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c06/spring/EmployeeService.java">EmployeeService.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmps</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper.class);</span></span><br><span class="line"><span class="keyword">return</span> employeeMapper.getEmps();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/webapp/WEB-INF/pages/list.jsp">list.jsp</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>员工列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;allEmps&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.lastName&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.email&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.gender&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>最后，在浏览器输入<code>http://localhost:8080/LearnMybatis/getemps</code>进行测试</p><h2 id="MyBatis-代码生成器"><a href="#MyBatis-代码生成器" class="headerlink" title="MyBatis-代码生成器"></a>MyBatis-代码生成器</h2><p>MyBatis Generator：</p><p>简称MBG，是一个专门为MyBatis框架使用者定制的代码生成器，可以快速的根据表生成对应的映射文件，接口，以及bean类。支持基本的增删改查，以及QBC风格的条件查询。但是表连接、存储过程等这些复杂sql的定义需要我们手工编写</p><p><a href="http://www.mybatis.org/generator/">官方文档地址</a></p><p><a href="https://github.com/mybatis/generator/releases">官方工程地址</a></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul><li>使用步骤：<ol><li>编写MBG的配置文件（重要几处配置）<ol><li>jdbcConnection配置数据库连接信息</li><li>javaModelGenerator配置javaBean的生成策略</li><li>sqlMapGenerator 配置sql映射文件生成策略</li><li>javaClientGenerator配置Mapper接口的生成策略</li><li>table 配置要逆向解析的数据表<ul><li>tableName：表名</li><li>domainObjectName：对应的javaBean名</li></ul></li></ol></li><li>运行代码生成器生成代码</li></ol></li><li>注意：<ul><li>Context标签<ul><li>targetRuntime&#x3D;“MyBatis3“可以生成带条件的增删改查</li><li>targetRuntime&#x3D;“MyBatis3Simple“可以生成基本的增删改查</li></ul></li><li>如果再次生成，建议将之前生成的数据删除，避免xml向后追加内容出现的问题。</li></ul></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><a href="src/main/resources/c07/mbg.xml">mbg.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">targetRuntime=&quot;MyBatis3Simple&quot;:生成简单版的CRUD</span></span><br><span class="line"><span class="comment">&quot;MyBatis3&quot;:豪华版</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;c04/dbconfig.properties&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- jdbcConnection：指定如何连接到目标数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javaModelGenerator：指定javaBean的生成策略 </span></span><br><span class="line"><span class="comment">targetPackage=&quot;test.model&quot;：目标包名</span></span><br><span class="line"><span class="comment">targetProject=&quot;\MBGTestProject\src&quot;：目标工程</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.lun.bean&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">targetProject</span>=<span class="string">&quot;C:\\src&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sqlMapGenerator：sql映射生成策略： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.lun.dao&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">targetProject</span>=<span class="string">&quot;C:\\src&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javaClientGenerator:指定mapper接口所在的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.lun.dao&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">targetProject</span>=<span class="string">&quot;C:\\src&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定要逆向分析哪些表：根据表要创建javaBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;department&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Department&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生成器代码"><a href="#生成器代码" class="headerlink" title="生成器代码"></a>生成器代码</h3><p><a href="src/main/java/com/lun/c07/generator/GenerateCode.java">GenerateCode.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenerateCode</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">overwrite</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">configFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(GenerateCode.class.getClassLoader().getResource(<span class="string">&quot;c07/mbg.xml&quot;</span>).getFile());</span><br><span class="line"><span class="type">ConfigurationParser</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationParser</span>(warnings);</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> cp.parseConfiguration(configFile);</span><br><span class="line"><span class="type">DefaultShellCallback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShellCallback</span>(overwrite);</span><br><span class="line"><span class="type">MyBatisGenerator</span> <span class="variable">myBatisGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBatisGenerator</span>(config, callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="literal">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QBC风格的带条件查询"><a href="#QBC风格的带条件查询" class="headerlink" title="QBC风格的带条件查询"></a>QBC风格的带条件查询</h3><p>生成器会QBC风格代码</p><blockquote><p>QBC(Query By Criteria) API提供了检索对象的另一种方式，它主要由Criteria接口、Criterion接口和Expresson类组成，它支持在运行时动态生成查询语句。</p><p>From <a href="https://baike.baidu.com/item/QBC/1529451">https://baike.baidu.com/item/QBC/1529451</a></p></blockquote><p>QBC风格代码使用实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line"><span class="type">DeptMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> openSession.getMapper(DeptMapper.class);</span><br><span class="line"><span class="type">DeptExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeptExample</span>();</span><br><span class="line"><span class="comment">//所有的条件都在example中封装</span></span><br><span class="line"><span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line"><span class="comment">//select id, deptName, locAdd from tbl_dept WHERE</span></span><br><span class="line"><span class="comment">//( deptName like ? and id &gt; ? )</span></span><br><span class="line">criteria.andDeptnameLike(<span class="string">&quot;%部%&quot;</span>);</span><br><span class="line">criteria.andIdGreaterThan(<span class="number">2</span>);</span><br><span class="line">List&lt;Dept&gt; list = mapper.selectByExample(example);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Dept dept : list) &#123;</span><br><span class="line">System.out.println(dept);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis-工作原理"><a href="#MyBatis-工作原理" class="headerlink" title="MyBatis-工作原理"></a>MyBatis-工作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/05.png"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/07.png"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/08.png" alt="根据配置文件创建SQLSessionFactory"></p><ul><li>Configuration封装了所有配置文件的详细信息</li><li>总结：把配置文件的信息解析并保存在Configuration对象中，返回包含了Configuration的DefaultSqlSession对象。</li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/09.png" alt="openSession获取sqlSession对象"></p><ul><li>返回SqlSession的实现类DefaultSqlSession对象。他里面包含了Executor和Configuration</li><li>Executor会在这一步被创建</li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/10.png" alt="getMapper返回接口的代理对象包含了SqlSession对象"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/11.png" alt="查询流程"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/12.png" alt="查询流程总结"></p><ul><li>StatementHandler：处理sql语句预编译，设置参数等相关工作；</li><li>ParameterHandler：设置预编译参数用的</li><li>ResultHandler：处理结果集</li><li>TypeHandler：在整个过程中，进行数据库类型和javaBean类型的映射</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>根据配置文件（全局，sql映射）初始化出Configuration对象</li><li>创建一个DefaultSqlSession对象，它里面包含Configuration以及Executor（根据全局配置文件中的defaultExecutorType创建出对应的Executor）</li><li>DefaultSqlSession.getMapper（）：拿到Mapper接口对应的MapperProxy；</li><li>MapperProxy里面有（DefaultSqlSession）；</li><li>执行增删改查方法：<ol><li>调用DefaultSqlSession的增删改查（Executor）；</li><li>会创建一个StatementHandler对象。同时也会创建出ParameterHandler和ResultSetHandler）</li><li>调用StatementHandler预编译参数以及设置参数值，使用ParameterHandler来给sql设置参数</li><li>调用StatementHandler的增删改查方法；</li><li>ResultSetHandler封装结果</li></ol></li></ol><p><strong>注意</strong>：四大对象(Executor、ParameterHandler、ResultSetHandler)每个创建的时候都有一个interceptorChain.pluginAll(parameterHandler);</p><h2 id="MyBatis-插件开发"><a href="#MyBatis-插件开发" class="headerlink" title="MyBatis-插件开发"></a>MyBatis-插件开发</h2><p>在四大对象创建的时候</p><ol><li>每个创建出来的对象不是直接返回的，而是interceptorChain.pluginAll(parameterHandler);</li><li>获取到所有的Interceptor（拦截器）（插件需要实现的接口）；调用interceptor.plugin(target);返回target包装后的对象</li><li>插件机制，我们可以使用插件为目标对象创建一个代理对象；AOP（面向切面）我们的插件可以为四大对象创建出代理对象；代理对象就可以拦截到四大对象的每一个执行；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">pluginAll</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Interceptor interceptor : interceptors) &#123;</span><br><span class="line">      target = interceptor.plugin(target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><h3 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h3><p>插件开发步骤：</p><ol><li>编写插件实现Interceptor接口，并使用 @Intercepts注解完成插件签名</li><li>在全局配置文件中注册插件</li></ol><p><a href="src/main/java/com/lun/c08/interceptor/MyFirstPlugin.java">MyFirstPlugin.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完成插件签名，用于拦截哪个对象的哪个方法</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type=StatementHandler.class,method=&quot;parameterize&quot;,args=java.sql.Statement.class)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFirstPlugin</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * intercept:拦截</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;myfirstplugin...intercept：&quot;</span> + invocation.getMethod());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> invocation.getTarget();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前拦截到的对象：&quot;</span>+target);</span><br><span class="line">        <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> SystemMetaObject.forObject(target);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> metaObject.getValue(<span class="string">&quot;parameterHandler.parameterObject&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sql语句中的参数是：&quot;</span>+value);</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;parameterHandler.parameterObject&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//执行目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">        <span class="comment">//返回执行后的返回值</span></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//包装目标对象，为目标对象创建一个代理对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--&gt;myfirstplugin...plugin，将要包装的对象：&quot;</span>+target);</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrap</span> <span class="operator">=</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//返回为当前target创建的动态代理</span></span><br><span class="line">        <span class="keyword">return</span> wrap;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将插件注册时的property属性设置进来</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;插件配置的信息：&quot;</span>+properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="src/main/resources/c08/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.lun.c08.interceptor.MyFirstPlugin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可实现多个插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.lun.c08.interceptor.MySecondPlugin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><ul><li>按照插件注解声明，按照插件配置顺序调用插件plugin方法，生成被拦截对象的动态代理</li><li>多个插件依次生成目标对象的代理对象，层层包裹，先声明的先包裹；形成代理链</li><li>目标方法执行时依次从外到内执行插件的intercept方法。</li><li>多个插件情况下，我们往往需要在某个插件中分离出目标对象。可以借助MyBatis提供的SystemMetaObject类来进行获取最后一层的h以及target属性的值</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/06.png"></p><h3 id="Interceptor接口"><a href="#Interceptor接口" class="headerlink" title="Interceptor接口"></a>Interceptor接口</h3><ul><li>Intercept：拦截目标方法执行</li><li>plugin：生成动态代理对象，可以使用MyBatis提供的Plugin类的wrap方法</li><li>setProperties：注入插件配置时设置的属性</li></ul><h3 id="常用代码"><a href="#常用代码" class="headerlink" title="常用代码"></a>常用代码</h3><p>从代理链中分离真实被代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、分离代理对象。由于会形成多次代理，所以需要通过一个</span></span><br><span class="line"><span class="keyword">while</span> 循环分离出最终被代理对象，从而方便提取信息</span><br><span class="line"><span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> SystemMetaObject.forObject(target);</span><br><span class="line"><span class="keyword">while</span> (metaObject.hasGetter(<span class="string">&quot;h&quot;</span>)) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">h</span> <span class="operator">=</span> metaObject.getValue(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">metaObject = SystemMetaObject.forObject(h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、获取到代理对象中包含的被代理的真实对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> metaObject.getValue(<span class="string">&quot;target&quot;</span>);</span><br><span class="line"><span class="comment">//3、获取被代理对象的MetaObject方便进行信息提取</span></span><br><span class="line"><span class="type">MetaObject</span> <span class="variable">forObject</span> <span class="operator">=</span> SystemMetaObject.forObject(obj);</span><br></pre></td></tr></table></figure><h2 id="扩展-MyBatis实用场景-PageHelper插件进行分页"><a href="#扩展-MyBatis实用场景-PageHelper插件进行分页" class="headerlink" title="扩展-MyBatis实用场景-PageHelper插件进行分页"></a>扩展-MyBatis实用场景-PageHelper插件进行分页</h2><p><a href="https://github.com/pagehelper/Mybatis-PageHelper">PageHelper插件官网</a></p><p><a href="pom.xml">pom.xml</a>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c09/mybatis-config.xml">MyBatis全局配置文件</a>注册插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c09/other/PageHelperTest.java">使用示例</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageHelperTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 1、获取sqlSessionFactory对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c09/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 2、获取sqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> openSession.getMapper(EmployeeMapper.class);</span><br><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">5</span>, <span class="number">1</span>);<span class="comment">//&lt;---------------------</span></span><br><span class="line"></span><br><span class="line">List&lt;Employee&gt; emps = mapper.getEmps();</span><br><span class="line"><span class="comment">//传入要连续显示多少页</span></span><br><span class="line">PageInfo&lt;Employee&gt; info = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps, <span class="number">5</span>);<span class="comment">//&lt;---------------------</span></span><br><span class="line"><span class="keyword">for</span> (Employee employee : emps) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*System.out.println(&quot;当前页码：&quot;+page.getPageNum());</span></span><br><span class="line"><span class="comment">System.out.println(&quot;总记录数：&quot;+page.getTotal());</span></span><br><span class="line"><span class="comment">System.out.println(&quot;每页的记录数：&quot;+page.getPageSize());</span></span><br><span class="line"><span class="comment">System.out.println(&quot;总页码：&quot;+page.getPages());*/</span></span><br><span class="line"><span class="comment">///xxx</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前页码：&quot;</span>+info.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;总记录数：&quot;</span>+info.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;每页的记录数：&quot;</span>+info.getPageSize());</span><br><span class="line">System.out.println(<span class="string">&quot;总页码：&quot;</span>+info.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;是否第一页：&quot;</span>+info.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">&quot;连续显示的页码：&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] nums = info.getNavigatepageNums();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">System.out.println(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//xxxx</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展-MyBatis实用场景-批量操作"><a href="#扩展-MyBatis实用场景-批量操作" class="headerlink" title="扩展-MyBatis实用场景-批量操作"></a>扩展-MyBatis实用场景-批量操作</h2><ul><li>默认的 openSession() 方法没有参数,它会创建有如下特性的<ul><li>会开启一个事务(也就是不自动提交)</li><li>连接对象会从由活动环境配置的数据源实例得到。</li><li>事务隔离级别将会使用驱动或数据源的默认设置。</li><li>预处理语句不会被复用,也不会批量处理更新。</li></ul></li><li>openSession 方法的 ExecutorType 类型的参数，枚举类型:<ul><li>ExecutorType.SIMPLE: 这个执行器类型不做特殊的事情（这是默认装配的）。它为每个语句的执行创建一个新的预处理语句。</li><li>ExecutorType.REUSE: 这个执行器类型会复用预处理语句。</li><li>ExecutorType.BATCH: 这个执行器会批量执行所有更新语句</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/13.png"></p><p>批量操作我们是使用MyBatis提供的BatchExecutor进行的，它的底层就是通过jdbc攒sql的方式进行的。我们可以让他攒够一定数量后发给数据库一次。</p><p><a href="src/test/java/com/lun/c09/other/BatchTest.java">BatchTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c09/mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以执行批量操作的sqlSession</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> openSession.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">mapper.addEmp(<span class="keyword">new</span> <span class="title class_">Employee</span>(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>), <span class="string">&quot;b&quot;</span>, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">openSession.commit();</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//批量：（预编译sql一次==&gt;设置参数===&gt;10000次===&gt;执行（1次））</span></span><br><span class="line"><span class="comment">//Parameters: 616c1(String), b(String), 1(String)==&gt;4598</span></span><br><span class="line"><span class="comment">//非批量：（预编译sql=设置参数=执行）==》10000    10200</span></span><br><span class="line">System.out.println(<span class="string">&quot;执行时长：&quot;</span>+(end-start));</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>与Spring整合中，我们推荐，额外的配置一个可以专门用来执行批量操作的SqlSession</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一个可以进行批量执行的sqlSession  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;executorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BATCH&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要用到批量操作的时候，我们可以注入配置的这个批量SqlSession。通过他获取到mapper映射器进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>批量操作是在session.commit()以后才发送sql语句给数据库进行执行的</li><li>如果我们想让其提前执行，以方便后续可能的查询操作获取数据，我们可以使用sqlSession.flushStatements()方法，让其直接冲刷到数据库进行执行。</li></ol><h2 id="扩展-MyBatis实用场景-存储过程"><a href="#扩展-MyBatis实用场景-存储过程" class="headerlink" title="扩展-MyBatis实用场景-存储过程"></a>扩展-MyBatis实用场景-存储过程</h2><p>实际开发中，我们通常也会写一些存储过程，MyBatis也支持对存储过程的调用</p><p>一个最简单的存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure test()</span><br><span class="line">begin</span><br><span class="line">select &#x27;hello&#x27;;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>存储过程的调用：</p><ol><li>select标签中statementType&#x3D;“CALLABLE”</li><li>标签体中调用语法：<code>&#123;call procedure_name(#&#123;param1_info&#125;,#&#123;param2_info&#125;)&#125;</code></li></ol><p>MyBatis对存储过程的游标提供了一个JdbcType&#x3D;CURSOR的支持，可以智能的把游标读取到的数据，映射到我们声明的结果集中</p><p>oracle存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span></span><br><span class="line">hello_ test(</span><br><span class="line">p_start <span class="keyword">in</span> <span class="type">int</span>,p_end <span class="keyword">in</span> <span class="type">int</span>,p_count <span class="keyword">out</span> <span class="type">int</span>,p_emps <span class="keyword">out</span> sys_refcursor)</span><br><span class="line">) <span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> p_count <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">open</span> p_emps <span class="keyword">for</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> rownum rn,e.<span class="operator">*</span> <span class="keyword">from</span> employees e <span class="keyword">where</span> rownum<span class="operator">&lt;=</span>p_end )</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&gt;=</span>p_start;</span><br><span class="line"><span class="keyword">end</span> hello_test;</span><br></pre></td></tr></table></figure><p>mapper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lun.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void getPageByProcedure(); </span></span><br><span class="line"><span class="comment">1、使用select标签定义调用存储过程</span></span><br><span class="line"><span class="comment">2、statementType=&quot;CALLABLE&quot;:表示要调用存储过程</span></span><br><span class="line"><span class="comment">3、&#123;call procedure_name(params)&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPageByProcedure&quot;</span> <span class="attr">statementType</span>=<span class="string">&quot;CALLABLE&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">&#123;call hello_test(</span><br><span class="line">#&#123;start,mode=IN,jdbcType=INTEGER&#125;,</span><br><span class="line">#&#123;end,mode=IN,jdbcType=INTEGER&#125;,</span><br><span class="line">#&#123;count,mode=OUT,jdbcType=INTEGER&#125;,</span><br><span class="line">#&#123;emps,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=PageEmp&#125;</span><br><span class="line">)&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;PageEmp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;EMPLOYEE_ID&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;LAST_NAME&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;EMAIL&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * oracle分页：</span></span><br><span class="line"><span class="comment"> * 借助rownum：行号；子查询；</span></span><br><span class="line"><span class="comment"> * 存储过程包装分页逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProcedure</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> getSqlSessionFactory();</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> openSession.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="type">OraclePage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OraclePage</span>();</span><br><span class="line">page.setStart(<span class="number">1</span>);</span><br><span class="line">page.setEnd(<span class="number">5</span>);</span><br><span class="line">mapper.getPageByProcedure(page);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;总记录数：&quot;</span>+page.getCount());</span><br><span class="line">System.out.println(<span class="string">&quot;查出的数据：&quot;</span>+page.getEmps().size());</span><br><span class="line">System.out.println(<span class="string">&quot;查出的数据：&quot;</span>+page.getEmps());</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OraclePage</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">private</span> List&lt;Employee&gt; emps;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setter and getter</span></span><br></pre></td></tr></table></figure><h2 id="扩展-MyBatis实用场景-typeHandler处理枚举"><a href="#扩展-MyBatis实用场景-typeHandler处理枚举" class="headerlink" title="扩展-MyBatis实用场景-typeHandler处理枚举"></a>扩展-MyBatis实用场景-typeHandler处理枚举</h2><h3 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h3><p>新建一个枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EmpStatus</span> &#123;</span><br><span class="line">LOGIN,LOGOUT,REMOVE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举的相关属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnumUse</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">EmpStatus</span> <span class="variable">login</span> <span class="operator">=</span> EmpStatus.LOGIN;</span><br><span class="line">System.out.println(<span class="string">&quot;枚举的索引：&quot;</span> + login.ordinal());</span><br><span class="line">System.out.println(<span class="string">&quot;枚举的名字：&quot;</span> + login.name());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">枚举的索引：0</span><br><span class="line">枚举的名字：LOGIN</span><br></pre></td></tr></table></figure><hr><p>若存入枚举属性到数据库，数据库表会呈现怎样的值？</p><p><a href="src/main/java/com/lun/c09/other/bean/Employee.java">Employee类</a>添加一个枚举属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"><span class="keyword">private</span> <span class="type">EmpStatus</span> <span class="variable">empStatus</span> <span class="operator">=</span> EmpStatus.LOGOUT;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> EmpStatus <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c09/other/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEmp2</span><span class="params">(com.lun.c09.other.bean.Employee em)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> com.lun.c09.other.bean.Employee <span class="title function_">getEmpById2</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="src/main/resources/c09/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lun.c09.other.bean.Employee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> &gt;</span></span><br><span class="line">insert into employee(last_name,email,gender,empStatus) </span><br><span class="line">values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;empStatus&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lun.c09.other.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">select id,last_name lastName,email,gender,empStatus from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/test/java/com/lun/c09/other/EnumTest.java">测试方法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认mybatis在处理枚举对象的时候保存的是枚举的名字：EnumTypeHandler</span></span><br><span class="line"><span class="comment"> * 改变使用：EnumOrdinalTypeHandler：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnum</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> Tools.getSqlSessionFactory(<span class="string">&quot;c09/mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">openSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> openSession.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;test_enum&quot;</span>, <span class="string">&quot;enum@abc.com&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">mapper.addEmp2(employee);</span><br><span class="line"><span class="comment">//System.out.println(&quot;保存成功&quot;+employee.getId());</span></span><br><span class="line"><span class="comment">//openSession.commit();</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">empById</span> <span class="operator">=</span> mapper.getEmpById2(employee.getId());</span><br><span class="line">System.out.println(empById.getEmpStatus());</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是存入<code>LOGOUT</code>到数据库表。</p><p>因此，默认mybatis在处理枚举对象的时候保存的是枚举的名字：EnumTypeHandler</p><p>将想<strong>存数值</strong>到数据库表，改用EnumOrdinalTypeHandler</p><p>在<a href="src/main/resources/c09/mybatis-config.xml">MyBatis存储文件</a>注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">javaType</span>=<span class="string">&quot;com.lun.c09.other.bean.EmpStatus&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义TypeHandler"><a href="#自定义TypeHandler" class="headerlink" title="自定义TypeHandler"></a>自定义TypeHandler</h3><p>我们可以通过自定义TypeHandler的形式来在设置参数或者取出结果集的时候自定义参数封装策略。</p><p>步骤：</p><ol><li>实现TypeHandler接口或者继承BaseTypeHandler</li><li>使用@MappedTypes定义处理的java类型，使用@MappedJdbcTypes定义jdbcType类型</li><li>在自定义结果集标签或者参数处理的时候声明使用自定义TypeHandler进行处理或者在全局配置TypeHandler要处理的javaType。</li></ol><hr><p>示例：希望数据库保存的是100,200这些状态码，而不是默认0,1或者枚举的名字</p><p><a href="src/main/java/com/lun/c09/other/bean/EmpStatus.java">EmpStatus.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EmpStatus</span> &#123;</span><br><span class="line">LOGIN(<span class="number">100</span>,<span class="string">&quot;用户登录&quot;</span>),LOGOUT(<span class="number">200</span>,<span class="string">&quot;用户登出&quot;</span>),REMOVE(<span class="number">300</span>,<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">EmpStatus</span><span class="params">(Integer code,String msg)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line"><span class="built_in">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照状态码返回枚举对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> EmpStatus <span class="title function_">getEmpStatusByCode</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line"><span class="keyword">return</span> LOGIN;</span><br><span class="line"><span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line"><span class="keyword">return</span> LOGOUT;</span><br><span class="line"><span class="keyword">case</span> <span class="number">300</span>:</span><br><span class="line"><span class="keyword">return</span> REMOVE;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="src/main/java/com/lun/c09/other/typehandler/MyEnumEmpStatusTypeHandler.java">自定义Handler</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEnumEmpStatusTypeHandler</span> <span class="keyword">implements</span> <span class="title class_">TypeHandler</span>&lt;EmpStatus&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义当前数据如何保存到数据库中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(PreparedStatement ps, <span class="type">int</span> i, EmpStatus parameter,</span></span><br><span class="line"><span class="params">JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;要保存的状态码：&quot;</span>+parameter.getCode());</span><br><span class="line">ps.setString(i, parameter.getCode().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> EmpStatus <span class="title function_">getResult</span><span class="params">(ResultSet rs, String columnName)</span></span><br><span class="line"><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//需要根据从数据库中拿到的枚举的状态码返回一个枚举对象</span></span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> rs.getInt(columnName);</span><br><span class="line">System.out.println(<span class="string">&quot;从数据库中获取的状态码：&quot;</span>+code);</span><br><span class="line"><span class="type">EmpStatus</span> <span class="variable">status</span> <span class="operator">=</span> EmpStatus.getEmpStatusByCode(code);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> EmpStatus <span class="title function_">getResult</span><span class="params">(ResultSet rs, <span class="type">int</span> columnIndex)</span></span><br><span class="line"><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> rs.getInt(columnIndex);</span><br><span class="line">System.out.println(<span class="string">&quot;从数据库中获取的状态码：&quot;</span>+code);</span><br><span class="line"><span class="type">EmpStatus</span> <span class="variable">status</span> <span class="operator">=</span> EmpStatus.getEmpStatusByCode(code);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> EmpStatus <span class="title function_">getResult</span><span class="params">(CallableStatement cs, <span class="type">int</span> columnIndex)</span></span><br><span class="line"><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> cs.getInt(columnIndex);</span><br><span class="line">System.out.println(<span class="string">&quot;从数据库中获取的状态码：&quot;</span>+code);</span><br><span class="line"><span class="type">EmpStatus</span> <span class="variable">status</span> <span class="operator">=</span> EmpStatus.getEmpStatusByCode(code);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>注册自定义TypeHandler：</p><p>1.<a href="src/main/resources/c09/mybatis-config.xml">MyBatis全局配置文件</a>中注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.lun.c09.other.typehandler.MyEnumEmpStatusTypeHandler&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">javaType</span>=<span class="string">&quot;com.lun.c09.other.bean.EmpStatus&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>也可以在处理某个字段的时候告诉MyBatis用什么类型处理器</li></ol><ul><li>保存：<code>#&#123;empStatus,typeHandler=xxxx&#125;</code></li><li>查询：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lun.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyEmp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;empStatus&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empStatus&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;xxxxx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果在参数位置修改TypeHandler，应该保证保存数据和查询数据用的TypeHandler是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC笔记</title>
      <link href="//posts/e545fed0.html"/>
      <url>//posts/e545fed0.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote><h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat7</p><p>Spring版本：5.3.1</p><h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p><p><strong>provided—只在maven编译和测试阶段生效，不在打包，安装，部署中生效</strong></p><p>依赖范围-&gt;provided:运行时无效，Tomcat会有servlet-api，但是编译期需要，所有要有这个依赖，要不然无法通过编译。所以它不需要被打包，因为服务器有。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img001.png"></p><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p><h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml，但是我们使用maven就是需要将所有配置文件放到resource文件下进行管理，所以这种默认配置方式会使项目不够规范。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求，这里这样设置是因为jsp本质就是一个servlet，jsp请求应该由专门的jsp请求处理，而不用springMVC的DispatcherServlet处理，所以这里需要过滤掉jsp请求。</span></span><br><span class="line"><span class="comment">（注： 前期所学的/*就表示所有请求，包括jsp请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>&lt;url-pattern&gt;标签中使用&#x2F;和&#x2F;*的区别：</p><p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;*的写法</p></blockquote><h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thymeleaf介绍"><a href="#Thymeleaf介绍" class="headerlink" title="Thymeleaf介绍"></a>Thymeleaf介绍</h3><ul><li>Thymeleaf是用来开发Web和独立环境项目的服务器端的Java模版引擎</li><li>Spring官方支持的服务的渲染模板中，并不包含jsp。而是Thymeleaf和Freemarker等，而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</li></ul><h4 id="Thymeleaf特点"><a href="#Thymeleaf特点" class="headerlink" title="Thymeleaf特点"></a>Thymeleaf特点</h4><ul><li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li></ul><h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><p>RequestMapping就相当于之前 web.xml 的 servlet-mapping 啊，value 就相当于 url-pattern,  而这个方法就相当于servlet的service方法</p><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="comment">//RequestMapping就相当于之前 web.xml 的 servlet-mapping，value 就相当于 url-pattern,  而这个方法就相当于servlet的service方法</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>跳转到targt.html页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>不写method属性默认不以请求方式为条件，即能够匹配get请求，post请求，put请求，delete请求</p><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf拼接参数可以使用以下方法，而不用?name=value&amp;name=value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParamsAndHeaders(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试params属性---&gt;，请求地址为testParamsAndHeaders<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure></blockquote><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testParamsAndHeaders&quot;,headers = &#123;&quot;Host=localhost:8080&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p><strong>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</strong></p><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用**时，只能使用&#x2F;**&#x2F;xxx的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(&quot;/?/testAnt&quot;)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;/*atestAnt&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/**/testAnt&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;deleteUser&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过<code>@PathVariable注解</code>，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure><h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p><strong>若设置为true时，则当前请求必须传输value所指定的请求参数</strong>，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//required默认值为true</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;user_name&quot;,required = false,defaultValue = &quot;baby&quot;)</span> String username, </span></span><br><span class="line"><span class="params">             String password, String hobby)</span>&#123;</span><br></pre></td></tr></table></figure><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestHeader(value = &quot;sayHaha&quot;,defaultValue = &quot;haha&quot;)</span> String host,...</span><br></pre></td></tr></table></figure><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span></span><br><span class="line">    <span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;, required = false, defaultValue = &quot;baby&quot;)</span></span></span><br><span class="line"><span class="params">                                String username,</span></span><br><span class="line"><span class="params">                  <span class="meta">@RequestHeader(value = &quot;sayHaha&quot;,defaultValue = &quot;haha&quot;)</span> String host,</span></span><br><span class="line"><span class="params">                        String password, String hobby,</span></span><br><span class="line"><span class="params">                        <span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String JSESSIONID)</span> &#123;</span><br></pre></td></tr></table></figure><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，<strong>此时若浏览器传输的请求参数的参数名和实体类中的属性名一致</strong>，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>如果是get请求的乱码可以通过设置tomcat的server.xml配置文件解决</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220120183426768.png" alt="image-20220120183426768" style="zoom:67%;" /><p>在如图所示位置加上<code>URIEncoding=&quot;UTF-8&quot;</code></p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220120183532787.png" alt="image-20220120183532787" style="zoom:67%;" /><p>javaweb三大组件执行顺序：监听器listener-&gt;过滤器filter-&gt;servlet</p><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><p>通过查看CharacterEncodingFilter的源码，得知该类中仅有三个属性，分别为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String encoding;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> forceRequestEncoding;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> forceResponseEncoding;</span><br></pre></td></tr></table></figure><p>并定位到以下方法，该方法起过滤作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> <span class="built_in">this</span>.getEncoding();</span><br><span class="line">    <span class="keyword">if</span> (encoding != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isForceRequestEncoding() || request.getCharacterEncoding() == <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setCharacterEncoding(encoding);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isForceResponseEncoding()) &#123;</span><br><span class="line">            response.setCharacterEncoding(encoding);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此过滤方法中如果编码值不为空会改变编码，以此为原理，做出配置springMVC编码过滤器如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><p>p34<a href="https://www.bilibili.com/video/BV1Ry4y1574R?p=34">回顾域对象</a></p><p>四个域对象分别是：</p><ul><li><p>pageContext(PageContextImpl类)当前jsp页面范围内有效</p></li><li><p>request (HttpServletRequest类)一次请求内有效</p></li><li><p>session(HttpSession类)一次会话范围内有效（打开浏览器访问服务器，直到关闭服务器）</p></li><li><p>application (ServletContext类)整个web工程范围内有效（只要web工程不停止，数据都在）</p></li></ul><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="comment">//使用ModelAndView必须将ModelAndView对象作为该方法的返回值返回</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="向request域对象共享数据的本质"><a href="#向request域对象共享数据的本质" class="headerlink" title="向request域对象共享数据的本质"></a>向request域对象共享数据的本质</h3><p>所有向request域对象共享数据的方式，</p><p>本质上都是在DistpatcherServlet的方法中封装成ModelAndView对象。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220121165122590.png" alt="image-20220121165122590"></p><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><p>推荐使用原生api，因为springMVC提供的比较复杂，不如原生api方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img002.png"></p><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img003.png" alt="image-20210706201316593"></p><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>回顾转发和重定向的区别</p><p>转发：</p><ul><li>浏览器发送的一次请求（一次请求由浏览器发出，一次请求在服务器内部发生）</li><li>转发可以获取到请求域中的数据</li><li>可以访问WEB-INF下的资源</li><li>不可以跨域，只能访问服务器的资源</li></ul><p>重定向：</p><ul><li>浏览器发送的两次请求，第一次访问servlet，第二次访问重定向到的地址</li><li>获取不到请求域的数据</li><li>不能访问WEB-INF下的资源.</li><li>可以跨域，能够访问外部资源，如可以重定向到baidu.com</li></ul><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img004.png" alt="image-20210706201602267"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，没有其他请求过程的处理，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven &#x2F;&gt;</p></blockquote><h1 id="处理jsp转发"><a href="#处理jsp转发" class="headerlink" title="处理jsp转发"></a>处理jsp转发</h1><h3 id="springMVC的配置稍有不同"><a href="#springMVC的配置稍有不同" class="headerlink" title="springMVC的配置稍有不同"></a>springMVC的配置稍有不同</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置InternalResourceViewResolver--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p>主页 index.jsp直接放在webapp目录下，启动服务器就会直接访问该页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--jstl表达式:$&#123;&#125; --%&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/success&quot;</span>&gt;测试跳转页面&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><p>表现层：前端的视图页面和后端的控制层servlet层</p><h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p><strong>REST 风格提倡 URL 地址使用统一的风格设计</strong>，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p>转换的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    ALLOWED_METHODS = Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(), HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">requestToUse</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(<span class="string">&quot;javax.servlet.error.exception&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//methodParam恒等于&quot;_method&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br><span class="line">        <span class="comment">//ALLOWED_METHODS就是 PUT,DELETE,PATCH</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">            <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                <span class="comment">//这一步就是将 请求的request重新包装</span></span><br><span class="line">     requestToUse = <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>.HttpMethodRequestWrapper(request, method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter((ServletRequest)requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><p>&#96;&#96;&#96;<br>String paramValue &#x3D; request.getParameter(this.methodParam);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># RESTful风格参数拼接</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!--      restful链接1--&gt;</span><br><span class="line">&lt;!--      &lt;a th:href=&quot;@&#123;/deleteEmployee/&#125;+$&#123;employee.id&#125;&quot;&gt;delete&lt;/a&gt;--&gt;</span><br><span class="line">&lt;!--      restful链接2--&gt;</span><br><span class="line">     &lt;a th:href=&quot;@&#123;&#x27;/deleteEmployee/&#x27;+$&#123;employee.id&#125;&#125;&quot;&gt;delete&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="八、RESTful案例"><a href="#八、RESTful案例" class="headerlink" title="八、RESTful案例"></a>八、RESTful案例</h1><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p><ul><li><p>搭建环境</p></li><li><p>准备实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">   <span class="comment">//1 male, 0 female</span></span><br><span class="line">   <span class="keyword">private</span> Integer gender;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> lastName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.email = email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> gender;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Integer gender)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.gender = gender;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">      <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">      <span class="built_in">this</span>.email = email;</span><br><span class="line">      <span class="built_in">this</span>.gender = gender;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>准备dao模拟数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">      employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      &#125;</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>&#x2F;</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>&#x2F;employee</td><td>GET</td></tr><tr><td>删除√</td><td>&#x2F;employee&#x2F;2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>&#x2F;toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>&#x2F;employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>&#x2F;employee&#x2F;2</td><td>GET</td></tr><tr><td>执行更新√</td><td>&#x2F;employee</td><td>PUT</td></tr></tbody></table><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>注意：</p><p>1.静态资源的文件刚加入进去不会被打包，进而不会被服务器读取，因此要到maven打包更新一下资源。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220124180050109.png" alt="image-20220124180050109"></p><p>2.引入js的链接会被会被设置的DispatcherServlet接管而导致错误，因此我们需要额外配置默认servlet，并且该配置必须和开启注解驱动一起使用，否则会变成所有资源都被默认servlet处理。</p><p>这里的处理逻辑是：资源访问先由DispatcherServlet处理，DispartcherServlet处理不了，再交到默认servlet处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;!--    开启springMVC注解驱动--&gt;</span><br><span class="line">&gt;&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--    配置默认servlet，开放对静态资源的访问--&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age&#x3D;0”, sec-ch-ua:”” Not A;Brand”;v&#x3D;”99”, “Chromium”;v&#x3D;”90”, “Google Chrome”;v&#x3D;”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080/">http://localhost:8080</a>“, user-agent:”Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.93 Safari&#x2F;537.36”]<br>requestBody:username&#x3D;admin&amp;password&#x3D;123</p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//有@ResponseBody注解的情况下，返回值就是服务器给浏览器的响应体，如果没有该注解，返回值就会被Thymeleaf视图解析器解析为跳转的地址。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p><p>a&gt;导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;通过vue和axios处理点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">testAjax</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:event.<span class="property">target</span>.<span class="property">href</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAjax</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组 is.available()得到该文件的字节大小</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b&gt;在SpringMVC的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象</span></span><br><span class="line"><span class="comment"> 注意：这里必须配置id，并且id名必须是multipartResolver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testUp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="comment">//这里的参数名 photo是根据上传的name决定的，类型MultipartFile封装了上传文件的信息</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>tips:ctrl+o重现父类接口方法</p><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p><strong>SpringMVC中的拦截器需要实现<code>HandlerInterceptor</code></strong></p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用ref bean 方式必须在 类上面添加创建对象的注解，并且要开启组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">这里就是当出现算数异常的时候会跳转到 被视图解析器解析的error页面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>error页面配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>出现错误<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;ex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常,</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"><span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img005.png" alt="images"></p><h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol><li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p></li><li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p></li></ol><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img006.png" alt="image-20210709214911404"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img007.png" alt="image-20210709214947432"></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img008.png" alt="image-20210709215255693"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/img009.png" alt="image-20210709215336097"></p><p>b) 存在则执行下面的流程</p><ol start="3"><li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p></li><li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p></li><li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p></li><li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p></li></ol><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol start="7"><li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p></li><li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p></li><li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p></li><li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p></li><li><p>将渲染结果返回给客户端。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring家族 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb【旧】</title>
      <link href="//posts/6be9069f.html"/>
      <url>//posts/6be9069f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Html页面标签"><a href="#Html页面标签" class="headerlink" title="Html页面标签"></a>Html页面标签</h2><p>注：Java 文件是需要先编译，再由 java 虚拟机跑起来。但 HTML 文件它不需要编译，直接由浏览器进行解析执行。</p><h3 id="html页面标签的书写规范"><a href="#html页面标签的书写规范" class="headerlink" title="html页面标签的书写规范"></a>html页面标签的书写规范</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOCTYPE：告诉浏览器使用什么规范（默认是html） --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 语言 zh中文 en英文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- head标签代表网页头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- meta 描述性标签，表示用来描述网站的一些信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一般用来做SEO：搜索殷勤优化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;cess,javaweb&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;一起来学习java&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 网站标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- body代表主体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello World！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 这是 html 注释，可以在页面右键查看源代码中看到 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html标签介绍"><a href="#html标签介绍" class="headerlink" title="html标签介绍"></a>html标签介绍</h3><p>1.标签的格式:</p><p>​&lt;标签名&gt;封装的数据</p><p>2.标签名大小写不敏感。</p><p>3.标签拥有自己的属性。</p><p>​ i. 分为基本属性：bgcolor&#x3D;”red” 可以修改简单的样式效果</p><p>​ ii. 事件属性： onclick&#x3D;”alert(‘你好！’);” 可以直接设置事件响应后的代码。</p><p>4.标签又分为，单标签和双标签。</p><p>​i. 单标签格式： &lt;标签名 &#x2F;&gt; br 换行 hr 水平线</p><p>​ii. 双标签格式:&lt;标签名&gt; …封装的数据…&lt;&#x2F;标签名&gt;**</p><h3 id="html标签语法"><a href="#html标签语法" class="headerlink" title="html标签语法"></a>html标签语法</h3><ol><li>标签不能交叉嵌套</li><li>标签必须正确关闭</li><li>属性必须有值，属性值必须加引号</li><li>注释不能 嵌套</li><li>浏览器会自动修复一些错误</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ①标签不能交叉嵌套 --&gt;</span></span><br><span class="line">正确：<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>早安，尚硅谷<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">错误：<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>早安，尚硅谷<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ②标签必须正确关闭 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- i.有文本内容的标签： --&gt;</span></span><br><span class="line">正确：<span class="tag">&lt;<span class="name">div</span>&gt;</span>早安，尚硅谷<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">错误：<span class="tag">&lt;<span class="name">div</span>&gt;</span>早安，尚硅谷</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ii.没有文本内容的标签： --&gt;</span></span><br><span class="line">正确：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">错误：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ③属性必须有值，属性值必须加引号 --&gt;</span></span><br><span class="line">正确：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>早安，尚硅谷<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">错误：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span>早安，尚硅谷<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">错误：<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>&gt;</span>早安，尚硅谷<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ④注释不能嵌套 --&gt;</span></span><br><span class="line">正确：<span class="comment">&lt;!-- 注释内容 --&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">错误：<span class="comment">&lt;!-- &lt;!-- 这是错误的 html 注释 --&gt;</span> --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">注意事项：</span><br><span class="line">1.html 代码不是很严谨。有时候标签不闭合，也不会报错。</span><br></pre></td></tr></table></figure><h3 id="常用html标签"><a href="#常用html标签" class="headerlink" title="常用html标签"></a>常用html标签</h3><h4 id="font标签"><a href="#font标签" class="headerlink" title="font标签"></a>font标签</h4><p>需求 1：在网页上显示 我是字体标签 ，并修改字体为 宋体，颜色为红</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       <span class="comment">&lt;!--font修改字体标签 ，</span></span><br><span class="line"><span class="comment">        color修改字体颜色 </span></span><br><span class="line"><span class="comment">        size修改字体大小 1-7，</span></span><br><span class="line"><span class="comment">        face修改字体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>字体标签演示<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><p>需求 1：把   换行标签 变成文本 转换成字符显示在页面上</p><p>常见的特殊字符表</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211112152919632.png" alt="image-20211112152919632">&gt;-</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt; 用于转义 &lt;  less than</span></span><br><span class="line"><span class="comment">        &amp;gt; 用于转义 &gt;  greater than</span></span><br><span class="line"><span class="comment">        &amp;nbsp; 用于转义 空格</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> 我是 <span class="symbol">&amp;lt;</span>br<span class="symbol">&amp;gt;</span>标签<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"> Monkey<span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span> King</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><p>标题标签是 h1 到 h6</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        标题标签 h1 - h6 h1最大，h6最小</span></span><br><span class="line"><span class="comment">        默认左对齐</span></span><br><span class="line"><span class="comment">           标题属性 align</span></span><br><span class="line"><span class="comment">            left 左对齐</span></span><br><span class="line"><span class="comment">            center 居中</span></span><br><span class="line"><span class="comment">            right 右对齐</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="超链接（重点！！！）"><a href="#超链接（重点！！！）" class="headerlink" title="超链接（重点！！！）"></a>超链接（重点！！！）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        a 是超链接标签</span></span><br><span class="line"><span class="comment">        href属性 表示跳转的连接</span></span><br><span class="line"><span class="comment">        target属性设置哪个目标进行跳转</span></span><br><span class="line"><span class="comment">        _self 表示当前页面(默认值)</span></span><br><span class="line"><span class="comment">        _blank 表示打开新页面来进行跳转</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><p><strong>分为无序列表和有序列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    无序列表 标签 ul</span></span><br><span class="line"><span class="comment">        li是列表项</span></span><br><span class="line"><span class="comment">    有序列表 标签 ol --》order list</span></span><br><span class="line"><span class="comment">    属性 type可以修改列表项前面的符号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>黎明<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h4><p><strong>img 标签可以在 html 页面上显示图片</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求1：使用img标签显示一张美女的照片。并修改宽高，和边框属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       img标签是图片标签,用来显示图片</span></span><br><span class="line"><span class="comment">           src属性可以设置图片的路径</span></span><br><span class="line"><span class="comment">           width属性设置图片的宽度</span></span><br><span class="line"><span class="comment">           height属性设置图片的高度</span></span><br><span class="line"><span class="comment">           border属性设置图片边框大小</span></span><br><span class="line"><span class="comment">           alt属性设置当指定路径找不到图片时,用来代替显示的文本内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       在JavaSE中路径也分为相对路径和绝对路径.</span></span><br><span class="line"><span class="comment">           相对路径:从工程名开始算</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           绝对路径:盘符:/目录/文件名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       在web中路径分为相对路径和绝对路径两种</span></span><br><span class="line"><span class="comment">           相对路径:</span></span><br><span class="line"><span class="comment">               .           表示当前文件所在的目录</span></span><br><span class="line"><span class="comment">               ..          表示当前文件所在的上一级目录</span></span><br><span class="line"><span class="comment">               文件名      表示当前文件所在目录的文件,相当于 ./文件名            ./ 可以省略</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           绝对路径:</span></span><br><span class="line"><span class="comment">               正确格式是:  http://ip:port/工程名/资源路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">               错误格式是:  盘符:/目录/文件名</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../imgs/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;没有该图片&quot;</span> <span class="attr">border</span>=<span class="string">&quot;20px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;268&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../imgs/10.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;没有该图片&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;268&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../imgs/50.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;没有该图片&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;268&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../imgs/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;没有该图片&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;268&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;13.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;没有该图片&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;268&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格标签（！！！）"><a href="#表格标签（！！！）" class="headerlink" title="表格标签（！！！）"></a>表格标签（！！！）</h4><p>需求 1：做一个 带表头的 ，三行，三列的表格，并显示边框</p><p>需求 2：修改表格的宽度，高度，表格的对齐方式，单元格间距。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">需求1：做一个 带表头的 ，三行，三列的表格，并显示边框</span></span><br><span class="line"><span class="comment">需求2：修改表格的宽度，高度，表格的对齐方式，单元格间距。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">table 标签是表格标签</span></span><br><span class="line"><span class="comment">border 设置表格标签</span></span><br><span class="line"><span class="comment">width 设置表格宽度</span></span><br><span class="line"><span class="comment">height 设置表格高度</span></span><br><span class="line"><span class="comment">align 设置表格相对于页面的对齐方式</span></span><br><span class="line"><span class="comment">cellspacing 设置单元格间距</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">tr 是行标签</span></span><br><span class="line"><span class="comment">th是表头标签</span></span><br><span class="line"><span class="comment">td  是单元格标签</span></span><br><span class="line"><span class="comment">align 设置单元格文本对齐方式</span></span><br><span class="line"><span class="comment">b是加粗标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="跨行跨列表格"><a href="#跨行跨列表格" class="headerlink" title="跨行跨列表格"></a>跨行跨列表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求 1：新建一个五行，五列的表格，第一行，第一列的单元格要跨两列，第二行第一列的单元格跨两行，第四行第四</span></span><br><span class="line"><span class="comment">列的单元格跨两行两列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   colspan 属性设置跨列</span></span><br><span class="line"><span class="comment">    rowspan 属性设置跨行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="iFrame框架标签（内嵌窗口）"><a href="#iFrame框架标签（内嵌窗口）" class="headerlink" title="iFrame框架标签（内嵌窗口）"></a>iFrame框架标签（内嵌窗口）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--iframe 标签可以在页面上开辟一个小区域显示一个单独的页面</span></span><br><span class="line"><span class="comment">iframe 和 a 标签组合使用的步骤:</span></span><br><span class="line"><span class="comment">1 在 iframe 标签中使用 name 属性定义一个名称</span></span><br><span class="line"><span class="comment">2 在 a 标签的 target 属性上设置 iframe 的 name 的属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>我是一个页面上的单独一个区域页面<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;标题标签.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;img标签.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>img标签.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;列表标签.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>列表标签.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;表格标签.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>表格标签.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单标签-（-重点！！！）"><a href="#表单标签-（-重点！！！）" class="headerlink" title="表单标签 （ 重点！！！）"></a>表单标签 （ 重点！！！）</h4><p>什么是表单?</p><p>表单就是 html 页面中,用来收集用户信息的所有元素集合.然后把这些信息发送给服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">需求 1:创建一个个人信息注册的表单界面。包含用户名，密码，确认密码。性别（单选），兴趣爱好（多选），国籍（下</span></span><br><span class="line"><span class="comment">拉列表）。</span></span><br><span class="line"><span class="comment">隐藏域，自我评价（多行文本域）。重置，提交。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        form标签就是表单</span></span><br><span class="line"><span class="comment">            input type=text     是文件输入框  value设置默认显示内容</span></span><br><span class="line"><span class="comment">            input type=password 是密码输入框  value设置默认显示内容</span></span><br><span class="line"><span class="comment">            input type=radio    是单选框    name属性可以对其进行分组   checked=&quot;checked&quot;表示默认选中</span></span><br><span class="line"><span class="comment">            input type=checkbox 是复选框   checked=&quot;checked&quot;表示默认选中</span></span><br><span class="line"><span class="comment">            input type=reset    是重置按钮      value属性修改按钮上的文本</span></span><br><span class="line"><span class="comment">            input type=submit   是提交按钮      value属性修改按钮上的文本</span></span><br><span class="line"><span class="comment">            input type=button   是按钮          value属性修改按钮上的文本</span></span><br><span class="line"><span class="comment">            input type=file     是文件上传域</span></span><br><span class="line"><span class="comment">            input type=hidden   是隐藏域    当我们要发送某些信息，而这些信息，不需要用户参与，就可以使用隐藏域（提交的时候同时发送给服务器）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            select 标签是下拉列表框</span></span><br><span class="line"><span class="comment">            option 标签是下拉列表框中的选项 selected=&quot;selected&quot;设置默认选中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            textarea 表示多行文本输入框 （起始标签和结束标签中的内容是默认值）</span></span><br><span class="line"><span class="comment">                rows 属性设置可以显示几行的高度</span></span><br><span class="line"><span class="comment">                cols 属性设置每行可以显示几个字符宽度</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        确认密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>Java<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>C++</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>Python<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        国籍：<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>-请选择国国籍-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>小日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        自我评价：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span>&gt;</span>我是默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;恢复默认设置&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认并提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;这是一个按钮&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span> = <span class="string">&quot;abc&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jlg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单格式化"><a href="#表单格式化" class="headerlink" title="表单格式化"></a>表单格式化</h4><p>将上一个表单放到table表里面，这样的显示效果更好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    .....</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单提交的细节"><a href="#表单提交的细节" class="headerlink" title="表单提交的细节"></a>表单提交的细节</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        form标签是表单标签</span></span><br><span class="line"><span class="comment">            action属性设置提交的服务器地址</span></span><br><span class="line"><span class="comment">            method属性设置提交的方式GET(默认值)或POST</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        表单提交的时候，数据没有发送给服务器的三种情况：</span></span><br><span class="line"><span class="comment">            1、表单项没有name属性值</span></span><br><span class="line"><span class="comment">            2、单选、复选（下拉列表中的option标签）都需要添加value属性，以便发送给服务器</span></span><br><span class="line"><span class="comment">            3、表单项不在提交的form标签中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        GET请求的特点是：</span></span><br><span class="line"><span class="comment">            1、浏览器地址栏中的地址是：action属性[+?+请求参数]</span></span><br><span class="line"><span class="comment">                请求参数的格式是：name=value&amp;name=value</span></span><br><span class="line"><span class="comment">            2、不安全</span></span><br><span class="line"><span class="comment">            3、它有数据长度的限制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        POST请求的特点是：</span></span><br><span class="line"><span class="comment">            1、浏览器地址栏中只有action属性值</span></span><br><span class="line"><span class="comment">            2、相对于GET请求要安全</span></span><br><span class="line"><span class="comment">            3、理论上没有数据长度的限制</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span>/&gt;</span>男</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>/&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>兴趣爱好：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>/&gt;</span>Java</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span>/&gt;</span>C++</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span> /&gt;</span>Python<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>国籍：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;none&quot;</span>&gt;</span>-请选择国国籍-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;jp&quot;</span>&gt;</span>小日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>自我评价：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">name</span>=<span class="string">&quot;self&quot;</span>&gt;</span>我是默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;恢复默认设置&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认并提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;这是一个按钮&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span> = <span class="string">&quot;abc&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jlg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h4><p>演示 div span p标签的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求 1：div、span、p 标签的演示</span></span><br><span class="line"><span class="comment">div 标签 默认独占一行</span></span><br><span class="line"><span class="comment">span 标签 它的长度是封装数据的长度 </span></span><br><span class="line"><span class="comment">这里span标签1和span标签2直接有个小空格是因为这俩标签之间有很多空格，浏览器自动优化成一个空格</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">p 段落标签 默认会在段落的上方或下方各空出一行来（如果已有就不再空）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS技术"><a href="#CSS技术" class="headerlink" title="CSS技术"></a>CSS技术</h2><h3 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h3><p>CSS 是「层叠样式表单」。是用于(增强)控制网页样式并允许将样式信息与网页内容分离的一种标记性语言。</p><h3 id="CSS语法规则"><a href="#CSS语法规则" class="headerlink" title="CSS语法规则"></a>CSS语法规则</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211112210748108.png" alt="image-20211112210748108"></p><p>选择器：浏览器根据“选择器”决定受 CSS 样式影响的 HTML 元素（标签）。</p><p>属性 (property) 是你要改变的样式名，并且每个属性都有一个值。属性和值被冒号分开，并 由花括号包围，这样就组成了一个完整的样式声明（declaration），例如：p {color: blue} 多个声明：如果要定义不止一个声明，则需要用分号将每个声明分开。虽然最后一条声明的 最后可以不加分号(但尽量在每条声明的末尾都加上分号)</p><p>例如： p{</p><p>color:red;</p><p>font-size:30px;</p><p>}</p><p><strong>注：一般每行只描述一个属性 CSS 注释：<code>/*注释内容*/</code></strong></p><h3 id="CSS和html的结合方式"><a href="#CSS和html的结合方式" class="headerlink" title="CSS和html的结合方式"></a>CSS和html的结合方式</h3><h4 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h4><p><strong>在标签的 style 属性上设置”key:value value;”，修改标签样式。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求 1：分别定义两个 div、span 标签，分别修改每个 div 标签的样式为：边框 1 个像素，实线，红色。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;&quot;</span>&gt;</span>span标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;&quot;</span>&gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">问题：这种方式的缺点？</span><br><span class="line"> 1.如果标签多了。样式多了。代码量非常庞大。</span><br><span class="line">2.可读性非常差。</span><br><span class="line"> 3.Css 代码没什么复用性可言</span><br></pre></td></tr></table></figure><p><strong>快捷键：ctrl+r快捷替换</strong></p><h4 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h4><p>**在 head 标签中，使用 style 标签来定义各种自己需要的 css 样式。</p><p>格式如下： xxx {</p><p>​Key : value value;</p><p>​ }**</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    style标签专门定义 css样式代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*这是css的注释*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: red solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: red solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> &gt;</span>span标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> &gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>问题：这种方式的缺点。</strong></p><p><strong>1.只能在同一页面内复用代码，不能在多个页面中复用 css 代码。</strong></p><p><strong>2.维护起来不方便，实际的项目中会有成千上万的页面，要到每个页面中去修改。工作量太大了。</strong></p><h4 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h4><p><strong>把 css 样式写成一个单独的 css 文件，再通过 link 标签引入即可复用。 使用 html 的</strong></p><p><strong><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css文件路径&quot; /&gt;</code></strong></p><p><strong>标签 导入 css 样 式文件。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是css的注释*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: red solid <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: red solid <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;cssfor03.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> &gt;</span>span标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> &gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="标签名选择器"><a href="#标签名选择器" class="headerlink" title="标签名选择器"></a>标签名选择器</h4><p>标签名选择器的格式是：</p><p>标签名{</p><p>​属性：值;</p><p>​ }</p><p>标签名选择器，可以决定哪些标签被动的使用这个样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: yellow solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;<span class="comment">/*字体颜色*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;<span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: blue dashed <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: yellow;<span class="comment">/*字体颜色*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需求 1：在所有 div 标签上修改字体颜色为蓝色，字体大小 30 个像素。边框为 1 像素黄色实线。</span></span><br><span class="line"><span class="comment">并且修改所有 span 标签的字体颜色为黄色，字体大小 20 个像素。边框为 5 像素蓝色虚线。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id 选择器的格式是：</span><br><span class="line">#id 属性值&#123;</span><br><span class="line">属性：值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id 选择器，可以让我们通过 id 属性选择性的去使用这个样</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#id001</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: yellow <span class="number">1px</span> dotted;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#id002</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: blue <span class="number">5px</span> dotted;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需求 1：分别定义两个 div 标签，</span></span><br><span class="line"><span class="comment">第一个 div 标签定义 id 为 id001 ，然后根据 id 属性定义 css 样式修改字体颜色为蓝色，</span></span><br><span class="line"><span class="comment">字体大小 30 个像素。边框为 1 像素黄色实线。</span></span><br><span class="line"><span class="comment">第二个 div 标签定义 id 为 id002 ，然后根据 id 属性定义 css 样式 修改的字体颜色为红色，字体大小 20 个像</span></span><br><span class="line"><span class="comment">素。边框为 5--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id001&quot;</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id002&quot;</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="class选择器（类选择器）"><a href="#class选择器（类选择器）" class="headerlink" title="class选择器（类选择器）"></a>class选择器（类选择器）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class 类型选择器的格式是：</span><br><span class="line">.class 属性值&#123;</span><br><span class="line">属性：值;</span><br><span class="line">&#125;</span><br><span class="line">class 类型选择器，可以通过 class 属性有效的选择性地去使用这个样式。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>class类型选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.class01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.class02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: grey;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">需求1：修改 class 属性值为 class01的 span 或 div 标签，字体颜色为蓝色，字体大小30个像素。边框为1像素黄色实线。</span></span><br><span class="line"><span class="comment">需求2：修改 class 属性值为 class02的 div 标签，字体颜色为灰色，字体大小26个像素。边框为1像素红色实线。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class02&quot;</span>&gt;</span>div标签class01<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class02&quot;</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;class02&quot;</span>&gt;</span>span标签class01<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">组合选择器的格式是：</span><br><span class="line">选择器 1，选择器 2，选择器 n&#123;</span><br><span class="line">属性：值;</span><br><span class="line">&#125;</span><br><span class="line">组合选择器可以让多个选择器共用同一个 css 样式代码</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>class类型选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.class01</span> , <span class="selector-id">#id01</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>:  yellow <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求1：修改 class=&quot;class01&quot; 的div 标签 和 id=&quot;id01&quot; 所有的span标签，</span></span><br><span class="line"><span class="comment">字体颜色为蓝色，字体大小20个像素。边框为1像素黄色实线。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id01&quot;</span>&gt;</span>div标签class01<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>span 标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签id01<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用样式"><a href="#常用样式" class="headerlink" title="常用样式"></a>常用样式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1、字体颜色</span><br><span class="line">color：red；</span><br><span class="line">颜色可以写颜色名如：black, blue, red, green 等</span><br><span class="line">颜色也可以写 rgb 值和十六进制表示值：如 rgb(255,0,0)，#00F6DE，如果写十六进制值必</span><br><span class="line">须加#</span><br><span class="line"></span><br><span class="line">2、宽度</span><br><span class="line">width:19px;</span><br><span class="line">宽度可以写像素值：19px；</span><br><span class="line">也可以写百分比值：20%；</span><br><span class="line"></span><br><span class="line">3、高度</span><br><span class="line">height:20px;</span><br><span class="line">高度可以写像素值：19px；</span><br><span class="line">也可以写百分比值：20%；</span><br><span class="line"></span><br><span class="line">4、背景颜色</span><br><span class="line">background-color:#0F2D4C</span><br><span class="line"></span><br><span class="line">4、字体样式：</span><br><span class="line">color：#FF0000；字体颜色红色</span><br><span class="line">font-size：20px; 字体大小</span><br><span class="line"></span><br><span class="line">5、红色 1 像素实线边框</span><br><span class="line">border：1px solid red;</span><br><span class="line"></span><br><span class="line">7、DIV 居中</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line"></span><br><span class="line">8、文本居中：</span><br><span class="line">text-align: center;</span><br><span class="line"></span><br><span class="line">9、超连接去下划线</span><br><span class="line">text-decoration: none;</span><br><span class="line"></span><br><span class="line">10、表格细线</span><br><span class="line">table &#123;</span><br><span class="line">border: 1px solid black; /*设置边框*/</span><br><span class="line">border-collapse: collapse; /*将边框合并*/</span><br><span class="line">&#125;</span><br><span class="line">td,th &#123;</span><br><span class="line">border: 1px solid black; /*设置边框*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">11、列表去除修饰</span><br><span class="line">ul &#123;</span><br><span class="line">list-style: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>06-css常用样式.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> yellow solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h3><p>Javascript 语言诞生主要是完成页面的数据验证。</p><p>因此它运行在客户端，需要运行浏览器来解析执行 JavaScript 代码。</p><p>JS 是 Netscape 网景公司的产品，最早取名为 LiveScript;为了吸引更多 java 程序员。更名为 JavaScript。</p><p><strong>JS 是弱类型，Java 是强类型。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">弱类型就是类型可变。</span><br><span class="line">强类型，就是定义变量的时候。类型已确定。而且不可变。</span><br><span class="line">int i = 12；</span><br><span class="line">var i； 类型不确定，可变</span><br><span class="line">i=12； 数值型</span><br><span class="line">i= &quot;abc&quot; 字符串类型</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li><p>交互性（它可以做的就是信息的动态交互）</p></li><li><p>安全性（不允许直接访问本地硬盘）</p></li><li><p>跨平台性（只要是可以解释 JS 的浏览器都可以执行，和平台无关)</p></li></ol><h3 id="JavaScript和html结合"><a href="#JavaScript和html结合" class="headerlink" title="JavaScript和html结合"></a>JavaScript和html结合</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>只需要在 head 标签中，或者在 body 标签中， 使用 script 标签 来书写 JavaScript 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  alert是JavaScript提供的一个警告框函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  它可以接收任意类型的参数，这个参数就是警告框的提示信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello,JavaScript!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>使用 script 标签引入 单独的 JavaScript 代码文件</p><p>在外部定义js文件 ,再通过标签属性 src引入<code>&lt;script type=&quot;text/javascript&quot; src=&quot;For02.js&quot;&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这里用到从外部引入js文件的方法，注意这里不能再嵌套使用第一种方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;For02.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//alert();不能再在这里写，而是要另开标签再使用</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;这是在html文件定义的js文件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>什么是变量？变量是可以存放某些值的内存的命名。</p></li><li><p>JavaScript 的变量类型：<br>数值类型： number<br>字符串类型： string<br>对象类型： object<br>布尔类型： boolean<br>函数类型： function</p></li><li><p>JavaScript 里特殊的值：<br>undefined 未定义，所有 js 变量未赋于初始值的时候，默认值都是 undefined.<br>null 空值<br>NaN 全称是：Not a Number。非数字。非数值。</p></li><li><p>JS 中的定义变量格式：<br>var 变量名;<br>var 变量名 &#x3D; 值</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//typeof是JavaScript提供的一个函数，可以返回参数的类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//alert(typeof (i)); //undefined</span></span></span><br><span class="line"><span class="language-javascript">    i = <span class="number">13</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//alert(typeof (i));//number</span></span></span><br><span class="line"><span class="language-javascript">    i = <span class="string">&quot;aba&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//alert(typeof (i));//string</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a =<span class="number">12</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a*b); <span class="comment">//NaN 全称是 not a number 非数字，非数值。</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关系运算（比较运算）"><a href="#关系运算（比较运算）" class="headerlink" title="关系运算（比较运算）"></a>关系运算（比较运算）</h3><p>等于： &#x3D;&#x3D; 等于是简单的做字面值的比较</p><p>全等于： &#x3D;&#x3D;&#x3D; 除了做字面值的比较之外，还会比较两个变量的数据类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> a = <span class="number">12</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> b = <span class="string">&quot;12&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//alert(a==b); //true  ==简单的字面上的比较 ，中间会自动做类型转换</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(a===b); <span class="comment">//false </span></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>且运算： &amp;&amp;</p><p>或运算： ||</p><p>取反运算： !</p><p>在 JavaScript 语言中，所有的变量，都可以做为一个 boolean 类型的变量去使用。</p><p>0 、null、 undefined、””(空串) 都认为是 false；**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;&amp; 且运算。</span></span><br><span class="line"><span class="comment">有两种情况：</span></span><br><span class="line"><span class="comment">第一种：当表达式全为真的时候。返回最后一个表达式的值。</span></span><br><span class="line"><span class="comment">第二种：当表达式中，有一个为假的时候。返回第一个为假的表达式的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">|| 或运算</span></span><br><span class="line"><span class="comment">第一种情况：当表达式全为假时，返回最后一个表达式的值</span></span><br><span class="line"><span class="comment">第二种情况：只要有一个表达式为真。就会把回第一个为真的表达式的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">并且 &amp;&amp; 与运算 和 ||或运算 有短路。</span></span><br><span class="line"><span class="comment">短路就是说，当这个&amp;&amp;或||运算有结果了之后 。后面的表达式不再执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(b &amp;&amp; c &amp;&amp; d); <span class="comment">//只要有一个为假，就返回第一个为假的值 //null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组（！！！）"><a href="#数组（！！！）" class="headerlink" title="数组（！！！）"></a>数组（！！！）</h3><p>JS 中 数组的定义：</p><p>格式： var 数组名 &#x3D; []; &#x2F;&#x2F; 空数组</p><p>var 数组名 &#x3D; [1 , ’abc’ , true]; &#x2F;&#x2F; 定义数组同时赋值元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[]; <span class="comment">//空数组</span></span><br><span class="line">        <span class="keyword">var</span> brr = [<span class="literal">true</span> ,<span class="number">1</span>,<span class="literal">null</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;&quot;</span>];<span class="comment">//数组元素不要求同类型</span></span><br><span class="line"></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">12</span></span><br><span class="line">        <span class="comment">//alert(arr[0]);//12</span></span><br><span class="line">        arr[<span class="number">2</span>]=<span class="string">&quot;java&quot;</span>;</span><br><span class="line">        <span class="comment">//alert(arr[2])//java</span></span><br><span class="line">        <span class="comment">//alert(arr.length)//3 这里定义arr[2]的时候自动扩容成了长度为3的数组，</span></span><br><span class="line"><span class="comment">//至于arr[1]没有赋值，所以是undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//alert(arr[9]); //读操作不会给数组扩容</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;<span class="comment">//javaScript数组也可以进行遍历操作</span></span><br><span class="line">            <span class="title function_">alert</span>(arr[i]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数的两种定义方式（！！！）"><a href="#函数的两种定义方式（！！！）" class="headerlink" title="函数的两种定义方式（！！！）"></a>函数的两种定义方式（！！！）</h4><h5 id="第一种，可以使用-function"><a href="#第一种，可以使用-function" class="headerlink" title="第一种，可以使用 function"></a>第一种，可以使用 function</h5><p>使用的格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(形参列表)&#123; </span><br><span class="line">函数体 </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在 JavaScript 语言中，如何定义带有返回值的函数？</p><p>只需要在函数体内直接使用 return 语句返回值即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function定义函数</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">&quot;这是一个无参函数&quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//f();//和java一样，需要调用函数</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">s,m</span>) &#123;  <span class="comment">//定义有参函数，参数不需要写类型。</span></span><br><span class="line">           <span class="keyword">return</span> s+m;     <span class="comment">//返回值直接使用return</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="title function_">alert</span>(<span class="title function_">f1</span>(<span class="number">100</span>,<span class="number">50</span>));<span class="comment">//调用有参函数</span></span><br></pre></td></tr></table></figure><h5 id="第二种-1"><a href="#第二种-1" class="headerlink" title="第二种"></a>第二种</h5><p>使用格式如下：</p><p>​<code>var 函数名 = function(形参列表)&#123;&#125;</code></p><p><strong>注意：JavaScript不允许函数重载，若使用重载，则会覆盖上一次的定义</strong></p><h4 id="函数的-arguments-隐形参数（只在-function-函数内）"><a href="#函数的-arguments-隐形参数（只在-function-函数内）" class="headerlink" title="函数的 arguments 隐形参数（只在 function 函数内）"></a>函数的 arguments 隐形参数（只在 function 函数内）</h4><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><ul><li><p>就是在 function 函数中不需要定义，但却可以直接用来获取所有参数的变量。</p><p>我们管它叫隐形参数。 隐形参数特别像 java 基础的可变长参数一样。</p><p>public void fun( Object … args );</p><p>可变长参数其实就是一个数组。</p><p>那么 js 中的隐形参数也跟 java的可变长参数一样。操作类似数组。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>) &#123;<span class="comment">//这里的参数列表不会影响可变参数 arguments</span></span><br><span class="line">     <span class="title function_">alert</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//f(1,3,6,&quot;abc&quot;);</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//arguments的使用案例演示</span></span><br><span class="line"> <span class="comment">//要求：求函数参数列表的和</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">num1,num2</span>) &#123;<span class="comment">//这里传递两个参数是为了可读性，实际调用的时候可以传递多个参数</span></span><br><span class="line">     <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">             <span class="keyword">if</span> (<span class="title function_">typeof</span>(<span class="variable language_">arguments</span>[i])==<span class="string">&quot;number&quot;</span>) <span class="comment">//这里做一个类型判断</span></span><br><span class="line">                 result += <span class="variable language_">arguments</span>[i];</span><br><span class="line">         &#125;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">f1</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="string">&quot;abcv&quot;</span>));<span class="comment">//55</span></span><br></pre></td></tr></table></figure><h3 id="js中自定义对象"><a href="#js中自定义对象" class="headerlink" title="js中自定义对象"></a>js中自定义对象</h3><h4 id="object形式的自定义对象"><a href="#object形式的自定义对象" class="headerlink" title="object形式的自定义对象"></a>object形式的自定义对象</h4><p>对象的定义： var 变量名 &#x3D; new Object(); &#x2F;&#x2F; 对象实例（空对象）</p><p>变量名.属性名 &#x3D; 值; &#x2F;&#x2F; 定义一个属性</p><p>变量名.函数名 &#x3D; function(){} &#x2F;&#x2F; 定义一个函数</p><p>对象的访问： 变量名.属性 &#x2F; 函数名()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义 object 类型的对象</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        obj.<span class="property">name</span> = <span class="string">&quot;周星驰&quot;</span>;</span><br><span class="line">        obj.<span class="property">age</span>=<span class="string">&quot;18&quot;</span>;</span><br><span class="line">        obj.<span class="property">fun</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;,年龄：&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// alert(obj.name);</span></span><br><span class="line">        <span class="comment">// alert(obj.age);</span></span><br><span class="line">        obj.<span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><h4 id="大括号形式的自定义对象"><a href="#大括号形式的自定义对象" class="headerlink" title="大括号形式的自定义对象"></a>大括号形式的自定义对象</h4><p>对象的定义：</p><p>var 变量名 &#x3D; { &#x2F;&#x2F; 空对象</p><p>​属性名：值, &#x2F;&#x2F; 定义一个属性 注意：不是最后一个就要加<code>,</code></p><p>​ 属性名：值, &#x2F;&#x2F; 定义一个属性</p><p>​函数名：function(){} &#x2F;&#x2F; 定义一个函数</p><p>};</p><p>对象的访问： 变量名.属性 &#x2F; 函数名();**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大括号形式的自定义对象</span></span><br><span class="line">     <span class="keyword">var</span> obj = &#123;   <span class="comment">//定义对象</span></span><br><span class="line">         <span class="attr">name</span>: <span class="string">&quot;周星驰&quot;</span>,</span><br><span class="line">         <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">         <span class="attr">fun</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;，年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">//对象调用</span></span><br><span class="line">     <span class="title function_">alert</span>(obj.<span class="property">name</span>);</span><br><span class="line">     <span class="title function_">alert</span>(obj.<span class="property">age</span>);</span><br><span class="line">     obj.<span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><h3 id="js中的事件"><a href="#js中的事件" class="headerlink" title="js中的事件"></a>js中的事件</h3><p>什么是事件？事件是电脑输入设备与页面进行交互的响应。我们称之为事件。</p><h4 id="常用的事件"><a href="#常用的事件" class="headerlink" title="常用的事件"></a>常用的事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onload 加载完成事件： 页面加载完成之后，常用于做页面 js 代码初始化操作</span><br><span class="line">onclick 单击事件： 常用于按钮的点击响应操作。</span><br><span class="line">onblur 失去焦点事件： 常用用于输入框失去焦点后验证其输入内容是否合法。</span><br><span class="line">onchange 内容发生改变事件： 常用于下拉列表和输入框内容发生改变后操作</span><br><span class="line">onsubmit 表单提交事件： 常用于表单提交前，验证所有表单项是否合法。</span><br></pre></td></tr></table></figure><h4 id="事件的注册又分为静态注册和动态注册两种"><a href="#事件的注册又分为静态注册和动态注册两种" class="headerlink" title="事件的注册又分为静态注册和动态注册两种"></a>事件的注册又分为静态注册和动态注册两种</h4><h5 id="什么是事件的注册（绑定）？"><a href="#什么是事件的注册（绑定）？" class="headerlink" title="什么是事件的注册（绑定）？"></a>什么是事件的注册（绑定）？</h5><ul><li>其实就是告诉浏览器，当事件响应后要执行哪些操作代码，叫事件注册或事件绑定。</li></ul><h5 id="静态注册事件："><a href="#静态注册事件：" class="headerlink" title="静态注册事件："></a>静态注册事件：</h5><ul><li>通过 html 标签的事件属性直接赋于事件响应后的代码，这种方式我们叫静态注册。</li></ul><h5 id="动态注册事件："><a href="#动态注册事件：" class="headerlink" title="动态注册事件："></a>动态注册事件：</h5><ul><li>是指先通过 js 代码得到标签的 dom 对象，然后再通过 dom 对象.事件名 &#x3D; function(){} 这种形式赋于事件响应后的代码，叫动态注册。</li></ul><h5 id="动态注册基本步骤："><a href="#动态注册基本步骤：" class="headerlink" title="动态注册基本步骤："></a>动态注册基本步骤：</h5><p>​固定写法</p><ul><li>1、获取标签对象<br>2、标签对象.事件名 &#x3D; fucntion()</li></ul><h4 id="onload-加载完成事件"><a href="#onload-加载完成事件" class="headerlink" title="onload 加载完成事件"></a>onload 加载完成事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//onload事件</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> onloadFun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;这是静态注册Onload事件...很多代码&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//onload事件动态注册 是固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;这是动态注册 Onload事件&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;body onload=&quot;alert(&#x27;这是静态注册onload事件&#x27;)&quot;&gt; 可以直接写在 body标签里面，但不推荐这种写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        静态注册onload事件：</span></span><br><span class="line"><span class="comment">            onload事件是浏览器解析完成页面之后自动触发的事件</span></span><br><span class="line"><span class="comment">            &lt;body onload=&quot;onloadFun()&quot;&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="onclick-单击事件"><a href="#onclick-单击事件" class="headerlink" title="onclick 单击事件"></a>onclick 单击事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> onclickFun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;这是静态注册 onclick事件&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//动态注册 onclick事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//动态注册的步骤</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//1.获取标签对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> btnObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">/* document 是 JavaScript语言提供的一个对象（文档） 相当于整个页面</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                   getElementById 通过 id属性获取标签对象</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">             */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//2.标签对象.事件名 = function()&#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            btnObj.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;这是动态注册 onclick事件&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--        演示onclick事件--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun()&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--通过按钮2 演示 动态注册onclick事件--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="onblur-失去焦点事件"><a href="#onblur-失去焦点事件" class="headerlink" title="onblur 失去焦点事件"></a>onblur 失去焦点事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> onBlurFun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//演示静态注册onblur事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//console 是 浏览器的控制台，是JavaScript提供的一个对象，用于在浏览器控制台输出</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//log   就是打印的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;静态注册onblur事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//动态注册onblur事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//仍然是固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pwdObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pwd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            pwdObj.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是动态注册onblur事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;onBlurFun()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="onchange-内容发生改变事件"><a href="#onchange-内容发生改变事件" class="headerlink" title="onchange 内容发生改变事件"></a>onchange 内容发生改变事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//静态注册onchange事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> onChangeFun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;档次发生变化&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//动态注册</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//固定步骤</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取标签对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> goodsObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;selGoods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//标签对象.事件名 = function()&#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript">            goodsObj.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;商品发生变化&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">请选择购买档次<span class="tag">&lt;<span class="name">select</span> <span class="attr">onchange</span>=<span class="string">&quot;onChangeFun()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>-档次-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>低级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>普通<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">请选择商品<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selGoods&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-商品-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>13<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>13pro<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>13proMax<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="onsubmit-表单提交事"><a href="#onsubmit-表单提交事" class="headerlink" title="onsubmit 表单提交事"></a>onsubmit 表单提交事</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onSubmitFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册 onsubmit事件...不合法，阻止提交&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//演示动态注册onsubmit事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//固定写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> formObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form02&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            formObj.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册 onsubmit事件...不合法，阻止提交&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return onSubmitFun()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;静态注册&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form02&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;动态注册&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js的正则表达式"><a href="#js的正则表达式" class="headerlink" title="js的正则表达式"></a>js的正则表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 表示要求字符串中，是否包含字母e</span><br><span class="line">        // var patt = new RegExp(&quot;e&quot;);</span><br><span class="line">        // var patt = /e/; // 也是正则表达式对象</span><br><span class="line">        // 表示要求字符串中，是否包含字母a或b或c的任意一个</span><br><span class="line">        // var patt = /[abc]/;</span><br><span class="line">        // 表示要求字符串，是否包含小写字母</span><br><span class="line">        // var patt = /[a-z]/;</span><br><span class="line">        // 表示要求字符串，是否包含任意大写字母</span><br><span class="line">        // var patt = /[A-Z]/;</span><br><span class="line">        // 表示要求字符串，是否包含任意数字</span><br><span class="line">        // var patt = /[0-9]/;</span><br><span class="line">        // 表示要求字符串，是否包含字母，数字，下划线</span><br><span class="line">        // var patt = /\w/;</span><br><span class="line">        // 表示要求 字符串中是否包含至少一个a(1到多)</span><br><span class="line">        // var patt = /a+/;</span><br><span class="line">        // 表示要求 字符串中是否 *包含* 零个 或 多个a</span><br><span class="line">        // var patt = /a*/;</span><br><span class="line">        // 表示要求 字符串是否包含一个或零个a</span><br><span class="line">        // var patt = /a?/;</span><br><span class="line">        // 表示要求 字符串是否包含连续三个a</span><br><span class="line">        // var patt = /a&#123;3&#125;/;</span><br><span class="line">        // 表示要求 字符串是否包 至少3个连续的a，最多5个连续的a</span><br><span class="line">        // var patt = /a&#123;3,5&#125;/;</span><br><span class="line">        // 表示要求 字符串是否包 至少3个连续的a，</span><br><span class="line">        // var patt = /a&#123;3,&#125;/;</span><br><span class="line">        // 表示要求 字符串必须以a结尾</span><br><span class="line">        // var patt = /a$/;</span><br><span class="line">        // 表示要求 字符串必须以a打头</span><br><span class="line">        // var patt = /^a/;</span><br><span class="line"></span><br><span class="line">        // 要求字符串中是否*包含* 至少3个连续的a</span><br><span class="line">        // var patt = /a&#123;3,5&#125;/;</span><br><span class="line">        // 要求字符串，从头到尾都必须完全匹配</span><br><span class="line">        // var patt = /^a&#123;3,5&#125;$/;</span><br><span class="line"></span><br><span class="line">        var patt = /^\w&#123;5,12&#125;$/;</span><br><span class="line"></span><br><span class="line">        var str = &quot;wzg168[[[&quot;;</span><br><span class="line"></span><br><span class="line">        alert( patt.test(str) );</span><br></pre></td></tr></table></figure><h3 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h3><p>DOM 全称是 Document Object Model 文档对象模型</p><p>​大白话，就是把文档中的标签，属性，文本，转换成为对象来管理。</p><p>​ 那么 它们是如何实现把标签，属性，文本转换成为对象来管理呢。这就是我们马上要学习的重点。</p><h4 id="Document对象（重点！！！）"><a href="#Document对象（重点！！！）" class="headerlink" title="Document对象（重点！！！）"></a>Document对象（重点！！！）</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211113224646603.png" alt="image-20211113224646603"></p><ul><li><p><strong>Document 对象的理解：</strong></p></li><li><p>第一点：Document 它管理了所有的 HTML 文档内容。</p></li><li><p>第二点：document 它是一种树结构的文档。有层级关系。</p></li><li><p>第三点：它让我们把所有的标签 都 对象化</p></li><li><p>第四点：我们可以通过 document 访问所有的标签对象。</p></li><li><p><strong>什么是对象化？？</strong></p><ul><li><p>我们已经学过面向对象。请问什么是对象化？</p><p>举例： 有一个人有年龄：18 岁，性别：女，名字：张某某</p><p>我们要把这个人的信息对象化怎么办！</p><pre><code>     Class Person &#123; </code></pre><p>​private int age;</p><p>​private String sex;</p><p>​private String name;</p><p>​ }</p></li></ul></li><li><p><strong>那么 html 标签 要 对象化 怎么办？</strong></p><ul><li><p>模拟对象化，相当于：</p></li><li><p>&#96;&#96;&#96;</p></li></ul><p>  class Dom{ </p><pre><code>   private String id; // id 属性    private String tagName; //表示标签名    private Dom parentNode; //父亲    private List&lt;Dom&gt; children; // 孩子结点        private String innerHTML; // 起始标签和结束标签中间的内容 </code></pre><p>  }<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Document 对象中的方法介绍（重点！！！）</span><br><span class="line"></span><br><span class="line">****</span><br><span class="line"></span><br><span class="line">- **`document.getElementById（elementId）`</span><br><span class="line">  通过标签的id属性查找标签dom对象， elementId是标签的id属性值</span><br><span class="line"></span><br><span class="line">- `document.getElementsByName （elementName）`</span><br><span class="line">  通过标签的name属性查找标签dom对象， elementName标签的name属性值</span><br><span class="line"></span><br><span class="line">- `document.getElementsByTagName （tagname）`</span><br><span class="line">  通过标签名查找标签dom对象。tagname是标签名</span><br><span class="line"></span><br><span class="line">- `document.createElement（ tagName）`</span><br><span class="line">  方法，通过给定的标签名，创建一个标签对象。tagName是要创建的标签名</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">document对象的三个查询方法，如果有id属性，优先使用`getElementById`方法来进行查询</span><br><span class="line">如果没有id属性，则优先使用`getElementsByName`方法来进行查询</span><br><span class="line">如果id属性和name属性都没有最后再按标签名查`getElementsByTagName`</span><br><span class="line"></span><br><span class="line">以上三个方法，一定要在页面加载完成之后执行，才能查询到标签对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### getElementById</span><br><span class="line"></span><br><span class="line">##### 完成用户输入校验</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        //设计：通过校验按钮校验 用户名输入框的合法性</span><br><span class="line"></span><br><span class="line">        function onClickFun() &#123;/*</span><br><span class="line">        思路：首先要获取 用户名输入框的内容</span><br><span class="line">        通过document 的 getElementById方法获取标签对象</span><br><span class="line">        得到的对象实际就是 dom，该对象包含了标签的属性</span><br><span class="line">         */</span><br><span class="line">            var userNameObj = document.getElementById(&quot;userName&quot;);</span><br><span class="line">            var value = userNameObj.value;//获取该标签的value，即输入框的内容</span><br><span class="line">            //通过正则表达式校验</span><br><span class="line">            var patt = /^\w&#123;5,12&#125;$/;</span><br><span class="line">            /*</span><br><span class="line">           * test()方法用于测试某个字符串，是不是匹配我的规则 ，</span><br><span class="line">           * 匹配就返回 true。不匹配就返回 false.</span><br><span class="line">           * */</span><br><span class="line">            //通过document对象操作span标签</span><br><span class="line">            var spanObj = document.getElementById(&quot;userNameSpan&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if (patt.test(value)) &#123;</span><br><span class="line">                // alert(&quot;合法&quot;)</span><br><span class="line">                //spanObj.innerHTML = &quot;用户名合法&quot;;</span><br><span class="line"></span><br><span class="line">                //注意这里的img标签里的“需要转义</span><br><span class="line">                spanObj.innerHTML = &quot;&lt;img src=\&quot;right.png\&quot; width=\&quot;18px\&quot; height=\&quot;18\&quot;px&gt;&quot;;</span><br><span class="line">            &#125; else</span><br><span class="line">                spanObj.innerHTML = &quot;&lt;img src=\&quot;wrong.png\&quot; width=\&quot;18px\&quot; height=\&quot;18\&quot;px&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--    完成用户名输入校验,要求 5-12位 数字，字母，下划线 --&gt;</span><br><span class="line">        用户名:&lt;input type=&quot;text&quot; value=&quot;wag&quot; id=&quot;userName&quot;&gt;</span><br><span class="line">        &lt;span id=&quot;userNameSpan&quot; style=&quot;color: red&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;button onclick=&quot;onClickFun()&quot;&gt;校验&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p></li></ul><h4 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a>getElementsByName</h4><h5 id="完成全选，全不选和反选功能"><a href="#完成全选，全不选和反选功能" class="headerlink" title="完成全选，全不选和反选功能"></a>完成全选，全不选和反选功能</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//通过js操作实现复选框的全选，全不选，反选功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//通过 getElementsByName方法返回 多个标签对象集合</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这个集合的操作跟数组 一样</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 集合中每个元素都是 dom 对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这个集合中的元素顺序是他们在 html 页面中从上到下的顺序</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//集合里的元素的checked属性可读可写，当checked = true时表示选中，反之未选中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                hobbys[i].<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkNone</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//集合里的元素的checked属性可读可写，当checked = true时表示选中，反之未选中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                hobbys[i].<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkReberse</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                hobbys[i].<span class="property">checked</span> =! hobbys[i].<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>java</span><br><span class="line">    兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>cpp</span><br><span class="line">    兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>python<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll()&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkNone()&quot;</span>&gt;</span>全不选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkReberse()&quot;</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h4><p>用过标签名获取元素集合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//getElementsByTagName是通过 标签名来获取标签对象集合,其他操作和getElementsByName类似，</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> inputObjs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputObjs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                inputObjs[i].<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>java</span><br><span class="line">        兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>cpp</span><br><span class="line">        兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>python<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll()&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="createElement-amp-appendChild"><a href="#createElement-amp-appendChild" class="headerlink" title="createElement &amp; appendChild"></a>createElement &amp; appendChild</h4><p><code>document.createElement(tagName)</code></p><p>方法，通过给定的标签名，创建一个标签对象。tagName是要创建的标签名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 现在需要我们使用js代码来创建html标签，并显示在页面上</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 标签的内容就是：&lt;div&gt;你也能变成光&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> divObj = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>); <span class="comment">// 在内存中 &lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> textNodeObj = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;你也能变成光&quot;</span>);<span class="comment">//有一个文本节点对象 #你也能变成光</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            divObj.<span class="title function_">appendChild</span>(textNodeObj); <span class="comment">// &lt;div&gt;你也能变成光&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// divObj.innerHTML = &quot;你也能变成光&quot;; // &lt;div&gt;你也能变成光&lt;/div&gt;,但，还只是在内存中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 添加子元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(divObj);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="节点的常用属性和方法"><a href="#节点的常用属性和方法" class="headerlink" title="节点的常用属性和方法"></a>节点的常用属性和方法</h4><p>节点就是标签对象</p><h5 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h5><ul><li><p>通过具体的元素节点调用</p><p>getElementsByTagName()</p><p>方法，获取当前节点的指定标签名孩子节点</p></li><li><p>appendChild( oChildNode )</p><p>方法，可以添加一个子节点，oChildNode 是要添加的孩子节点</p></li></ul><h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><ul><li><p>childNodes<br>属性，获取当前节点的所有子节点</p></li><li><p>firstChild<br>属性，获取当前节点的第一个子节点</p></li><li><p>lastChild<br>属性，获取当前节点的最后一个子节点</p></li><li><p>parentNode<br>属性，获取当前节点的父节点</p></li><li><p><strong>nextSibling</strong><br><strong>属性，获取当前节点的下一个节点</strong></p></li><li><p>previousSibling<br>属性，获取当前节点的上一个节点</p></li><li><p>className<br>用于获取或设置标签的class属性值</p></li><li><p>innerHTML<br>属性，表示获取&#x2F;设置起始标签和结束标签中的内容（包含里面的标签）</p></li><li><p>innerText<br>属性，表示获取&#x2F;设置起始标签和结束标签中的文本</p></li></ul><h5 id="练习，DOM查询练习"><a href="#练习，DOM查询练习" class="headerlink" title="练习，DOM查询练习"></a>练习，DOM查询练习</h5><h2 id="jQury"><a href="#jQury" class="headerlink" title="jQury"></a>jQury</h2><h3 id="jQury介绍"><a href="#jQury介绍" class="headerlink" title="jQury介绍"></a>jQury介绍</h3><p><strong>什么是 jQuery ?</strong><br>jQuery，顾名思义，也就是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库。</p><p><strong>jQuery 核心思想！！！</strong><br>它的核心思想是 write less,do more(写得更少,做得更多)，所以它实现了很多浏览器的兼容问题。</p><p><strong>jQuery 流行程度</strong><br>jQuery 现在已经成为最流行的 JavaScript 库，在世界前 10000 个访问最多的网站中，有超过 55%在使用<br>jQuery。</p><p><strong>jQuery 好处！！！</strong><br>jQuery 是免费、开源的，jQuery 的语法设计可以使开发更加便捷，例如操作文档对象、选择 DOM 元素、<br>制作动画效果、事件处理、使用 <code>Ajax</code> 以及其他功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入jq jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*window.onload = function () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var buttonObj = document.getElementById(&quot;btnId&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">buttonObj.onclick = function () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">alert(&quot;这是通过js实现的按钮点击响应效果&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;*/</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//页面加载完成之后， 相当于  window.onload = function () &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> $btnObj= $(<span class="string">&quot;#btnId&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">$btnObj.<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;jq实现响应效果&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常见问题？</strong><br>1、使用jQuery一定要引入jQuery库吗？答案：是，必须</p><p>2、jQuery中的<code>$</code>到底是什么？ 答案： 它是一个函数</p><p>3、怎么为按钮添加点击响应函数的？</p><p>答案：</p><p>1、使用jQuery查询到标签对象<br>2、使用标签对象.click（ function（）{} ）；**</p><h3 id="jQuery-核心函数"><a href="#jQuery-核心函数" class="headerlink" title="jQuery 核心函数"></a>jQuery 核心函数</h3><p>$ 是 jQuery 的核心函数，能完成 jQuery 的很多功能。$()就是调用$这个函数</p><p>1、传入参数为 [ 函数 ] 时：</p><p><code>$(function()&#123;&#125;);</code></p><p>表示页面加载完成之后。相当于 window.onload &#x3D; function(){}</p><p>2、传入参数为 [ HTML 字符串 ] 时：<br>会对我们创建这个 html 标签对象</p><p>3、传入参数为 [ 选择器字符串 ] 时：<br>$(“#id 属性值”); id 选择器，根据 id 查询标签对象<br>$(“标签名”); 标签名选择器，根据指定的标签名查询标签对象<br>$(“.class 属性值”); 类型选择器，可以根据 class 属性查询标签对象</p><p>4、传入参数为 [ DOM 对象 ] 时：<br>会把这个 dom 对象转换为 jQuery 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//核心函数的4个作用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//传入参数为[函数]时：在文档加载完成后执行这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// $(function () &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     alert(&quot;1111&quot;); //相当于   window.onload = function()&#123;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;&lt;div&gt;&quot;</span> +</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;        &lt;span&gt;div-span标签1&lt;/span&gt;&quot;</span> +</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;        &lt;span&gt;div-span标签2&lt;/span&gt;&quot;</span> +</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;    &lt;/div&gt;&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;body&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//alert($(&quot;button&quot;).length);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btnObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>($(btnObj))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br></pre></td></tr></table></figure><h3 id="jQuery对象和DOM对象区分"><a href="#jQuery对象和DOM对象区分" class="headerlink" title="jQuery对象和DOM对象区分"></a>jQuery对象和DOM对象区分</h3><h4 id="Dom-对象"><a href="#Dom-对象" class="headerlink" title="Dom 对象"></a>Dom 对象</h4><p>1.通过 getElementById()查询出来的标签对象是 Dom 对象</p><p>2.通过 getElementsByName()查询出来的标签对象是 Dom 对象</p><p>3.通过 getElementsByTagName()查询出来的标签对象是 Dom 对象</p><p>4.通过 createElement() 方法创建的对象，是 Dom 对象</p><p>DOM 对象 Alert 出来的效果是：<code>[object HTML 标签名 Element]</code></p><h4 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a>jQuery 对象</h4><p>5.通过 JQuery 提供的 API 创建的对象，是 JQuery 对象</p><p>6.通过 JQuery 包装的 Dom 对象，也是 JQuery 对象</p><p>7.通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象</p><p>jQuery 对象 Alert 出来的效果是：<code>[object Object]</code></p><h4 id="问题：jQuery-对象的本质是什么"><a href="#问题：jQuery-对象的本质是什么" class="headerlink" title="问题：jQuery 对象的本质是什么"></a>问题：jQuery 对象的本质是什么</h4><p>jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能</p><p>说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> $btns =$(<span class="string">&quot;button&quot;</span>); <span class="comment">//有 4 个button</span></span><br><span class="line"><span class="title function_">alert</span>($btns);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>$btns</code> 对象</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211114195606842.png" alt="image-20211114195606842"></p><h4 id="DOM对象和jQuery对象使用区别"><a href="#DOM对象和jQuery对象使用区别" class="headerlink" title="DOM对象和jQuery对象使用区别"></a>DOM对象和jQuery对象使用区别</h4><p>jQuery 对象不能使用 DOM 对象的属性和方法</p><p>DOM 对象也不能使用 jQuery 对象的属性和方法</p><h4 id="DOM对象和jQuery对象互转（！！！）"><a href="#DOM对象和jQuery对象互转（！！！）" class="headerlink" title="DOM对象和jQuery对象互转（！！！）"></a>DOM对象和jQuery对象互转（！！！）</h4><p><strong>1、dom 对象转化为 jQuery 对象（重点）</strong><br>1、先有 DOM 对象<br>2、$( DOM 对象 ) 就可以转换成为 jQuery 对象</p><p><strong>2、jQuery 对象转为 dom 对象（重点）</strong><br>1、先有 jQuery 对象<br>2、jQuery 对象[下标]取出相应的 DOM 对象</p><h3 id="jQuery选择器（重点！！！）"><a href="#jQuery选择器（重点！！！）" class="headerlink" title="jQuery选择器（重点！！！）"></a>jQuery选择器（重点！！！）</h3><h4 id="基本选择器（！！！）"><a href="#基本选择器（！！！）" class="headerlink" title="基本选择器（！！！）"></a>基本选择器（！！！）</h4><p><code>#ID 选择器</code>：根据 id 查找标签对象</p><p><code>.class 选择器</code>：根据 class 查找标签对象</p><p><code>element 选择器</code>：根据标签名查找标签对象</p><p><code>*选择器</code>：表示任意的，所有的元素</p><p><code>selector1，selector2 组合选择器</code>：合并选择器 1，选择器 2 的结果并返回</p><p><code>p.myClass </code>  : 表示标签名必须是 p 标签，而且 class 类型还要是 myClass</p><p>演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.选择 id 为 one 的元素 &quot;background-color&quot;,&quot;#bbffaa&quot;</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//jQuery对象的css方法可以设置和获取样式</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#one&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.选择 class 为 mini 的所有元素</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;.mini&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//3.选择 元素名是 div 的所有元素</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//4.选择所有的元素</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#btn4&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;*&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//5.选择所有的 span 元素和id为two的元素</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#btn5&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;span,#two&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br></pre></td></tr></table></figure><h4 id="层级选择器（！！！）"><a href="#层级选择器（！！！）" class="headerlink" title="层级选择器（！！！）"></a>层级选择器（！！！）</h4><p>ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素</p><p>parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素</p><p>prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素</p><p>prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings 兄弟元素</p><p>演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//这个是 $( function()&#123;&#125; )的全写</span></span><br><span class="line"><span class="comment">//1.选择 body 内的所有 div 元素 </span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;body div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.在 body 内, 选择div子元素  </span></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;body &gt; div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.选择 id 为 one 的下一个 div 元素 </span></span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;#one+div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.选择 id 为 two 的元素后面的所有 div 兄弟元素</span></span><br><span class="line">$(<span class="string">&quot;#btn4&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;#two~div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4><h5 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h5><p>:first 获取第一个元素</p><p>:last 获取最后个元素</p><p>:not(selector) 去除所有与给定选择器匹配的元素</p><p>:even 匹配所有索引值为偶数的元素，从 0 开始计数</p><p>:odd 匹配所有索引值为奇数的元素，从 0 开始计数</p><p>:eq(index) 匹配一个给定索引值的元素</p><p>:gt(index) 匹配所有大于给定索引值的元素</p><p>:lt(index) 匹配所有小于给定索引值的元素</p><p>:header 匹配如 h1, h2, h3 之类的标题元素</p><p>:animated 匹配所有正在执行动画效果的元素</p><h5 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h5><p>:contains(text) 匹配包含给定文本的元素</p><p>:empty 匹配所有不包含子元素或者文本的空元素</p><p>:parent 匹配含有子元素或者文本的元素</p><p>:has(selector) 匹配含有选择器所匹配的元素的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//1.选择 含有文本 &#x27;di&#x27; 的 div 元素</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;div:contains(di)&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.选择不包含子元素(或者文本元素) 的 div 空元素</span></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;div:empty&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.选择含有 class 为 mini 元素的 div 元素</span></span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;div:has(.mini)&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.选择含有子元素(或者文本元素)的div元素</span></span><br><span class="line">$(<span class="string">&quot;#btn4&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;div:parent&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="属性过滤器："><a href="#属性过滤器：" class="headerlink" title="属性过滤器："></a>属性过滤器：</h5><p>[attribute]       匹配包含给定属性的元素。</p><p>[attribute&#x3D;value] 匹配给定的属性是某个特定值的元素</p><p>[attribute!&#x3D;value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。</p><p>[attribute^&#x3D;value] 匹配给定的属性是以某些值开始的元素</p><p>[attribute$&#x3D;value] 匹配给定的属性是以某些值结尾的元素</p><p>[attribute*&#x3D;value] 匹配给定的属性是以包含某些值的元素</p><p><code>[attrSel1][attrSel2][attrSelN]</code> 复合属性选择器，需要同时满足多个条件时使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//1.选取含有 属性title 的div元素</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[title]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//2.选取 属性title值等于&#x27;test&#x27;的div元素</span></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[title = &#x27;test&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3.选取 属性title值不等于&#x27;test&#x27;的div元素(*没有属性title的也将被选中)</span></span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[title !=&#x27;test&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4.选取 属性title值 以&#x27;te&#x27;开始 的div元素</span></span><br><span class="line">$(<span class="string">&quot;#btn4&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[title^=&#x27;te&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//5.选取 属性title值 以&#x27;est&#x27;结束 的div元素</span></span><br><span class="line">$(<span class="string">&quot;#btn5&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[title $= &#x27;est&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//6.选取 属性title值 含有&#x27;es&#x27;的div元素</span></span><br><span class="line">$(<span class="string">&quot;#btn6&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[title *=&#x27;es&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素</span></span><br><span class="line">$(<span class="string">&quot;#btn7&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[id][title *=&#x27;es&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//8.选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素</span></span><br><span class="line">$(<span class="string">&quot;#btn8&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div[title][title != &#x27;test&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h5><p>:input 匹配所有 input, textarea, select 和 button 元素</p><p>:text 匹配所有 文本输入框</p><p>:password 匹配所有的密码输入框</p><p>:radio 匹配所有的单选框</p><p>:checkbox 匹配所有的复选框</p><p>:submit 匹配所有提交按钮</p><p>:image 匹配所有 img 标签</p><p>:reset 匹配所有重置按钮</p><p>:button 匹配所有 input type&#x3D;button 按钮</p><p>:file 匹配所有 input type&#x3D;file 文件上传</p><p>:hidden 匹配所有不可见元素 display:none 或 input type&#x3D;hidden</p><h5 id="表单对象属性过滤器"><a href="#表单对象属性过滤器" class="headerlink" title="表单对象属性过滤器"></a>表单对象属性过滤器</h5><p>:enabled 匹配所有可用元素</p><p>:disabled 匹配所有不可用元素</p><p>:checked 匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象</p><p>:selected 匹配所有选中的 option</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.对表单内 可用input 赋值操作</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// val()可以操作表单项的value属性值</span></span><br><span class="line"><span class="comment">// 它可以设置和获取</span></span><br><span class="line">$(<span class="string">&quot;:text&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;你也能变成光&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//2.对表单内 不可用input 赋值操作</span></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;:text:disabled&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;Monster&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3.获取多选框选中的个数  使用size()方法获取选取到的元素集合的元素个数</span></span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>($(<span class="string">&quot;:checkbox:checked&quot;</span>).<span class="property">length</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4.获取多选框，每个选中的value值</span></span><br><span class="line">$(<span class="string">&quot;#btn4&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//先获取多选框</span></span><br><span class="line"><span class="keyword">var</span> $checkboxes = $(<span class="string">&quot;:checkbox:checked&quot;</span>);</span><br><span class="line"><span class="comment">//遍历多选框 ,使用 jq的each方法遍历</span></span><br><span class="line">$checkboxes.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//5.获取下拉框选中的内容  </span></span><br><span class="line">$(<span class="string">&quot;#btn5&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $selecteds = $(<span class="string">&quot;:selected:selected&quot;</span>);</span><br><span class="line">$selecteds.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">innerText</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="jQuery-元素筛选"><a href="#jQuery-元素筛选" class="headerlink" title="jQuery 元素筛选"></a>jQuery 元素筛选</h4><p>eq() 获取给定索引的元素 功能跟 :eq() 一样</p><p>first() 获取第一个元素 功能跟 :first 一样</p><p>last() 获取最后一个元素 功能跟 :last 一样</p><p>filter(exp) 留下匹配的元素</p><p>is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true</p><p>has(exp) 返回包含有匹配选择器的元素的元素 功能跟 :has 一样</p><p>not(exp) 删除匹配选择器的元素 功能跟 :not 一样</p><p>children(exp) 返回匹配给定选择器的子元素 功能跟 parent&gt;child 一样</p><p>find(exp) 返回匹配给定选择器的后代元素 功能跟 ancestor descendant 一样</p><p>next() 返回当前元素的下一个兄弟元素 功能跟 prev + next 功能一样</p><p>nextAll() 返回当前元素后面所有的兄弟元素 功能跟 prev ~ siblings 功能一样</p><p>nextUntil() 返回当前元素到指定匹配的元素为止的后面元素</p><p>parent() 返回父元素</p><p>prev(exp) 返回当前元素的上一个兄弟元素</p><p>prevAll() 返回当前元素前面所有的兄弟元素</p><p>prevUnit(exp) 返回当前元素到指定匹配的元素为止的前面元素</p><p>siblings(exp) 返回所有兄弟元素</p><p>add() 把 add 匹配的选择器的元素添加到当前 jquery 对象中</p><p>:visible 匹配所有可见元素</p><p>:hidden匹配所有不可见元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//(1)eq()  选择索引值为等于 3 的 div 元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(2)first()选择第一个 div 元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//first()   选取第一个元素</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">first</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(3)last()选择最后一个 div 元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//last()  选取最后一个元素</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">last</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(4)filter()在div中选择索引为偶数的</span></span><br><span class="line">    $(<span class="string">&quot;#btn4&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//filter()  过滤   传入的是选择器字符串</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">filter</span>(<span class="string">&quot;:even&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(5)is()判断#one是否为:empty或:parent</span></span><br><span class="line">    <span class="comment">//is用来检测jq对象是否符合指定的选择器</span></span><br><span class="line">    $(<span class="string">&quot;#btn5&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>($(<span class="string">&quot;#one&quot;</span>).<span class="title function_">is</span>(<span class="string">&quot;:parent&quot;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(6)has()选择div中包含.mini的</span></span><br><span class="line">    $(<span class="string">&quot;#btn6&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//has(selector)  选择器字符串    是否包含selector</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">has</span>(<span class="string">&quot;.mini&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(7)not()选择div中class不为one的</span></span><br><span class="line">    $(<span class="string">&quot;#btn7&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//not(selector)  选择不是selector的元素</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">not</span>(<span class="string">&quot;.one&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(8)children()在body中选择所有class为one的div子元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn8&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//children()  选出所有的子元素</span></span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).<span class="title function_">children</span>(<span class="string">&quot;div.one&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//(9)find()在body中选择所有class为mini的div元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn9&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//find()  选出所有的后代元素</span></span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;div.mini&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(10)next() #one的下一个div</span></span><br><span class="line">    $(<span class="string">&quot;#btn10&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//next()  选择下一个兄弟元素</span></span><br><span class="line">        $(<span class="string">&quot;#one&quot;</span>).<span class="title function_">next</span>(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(11)nextAll() #one后面所有的span元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn11&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//nextAll()   选出后面所有的元素</span></span><br><span class="line">        $(<span class="string">&quot;#one&quot;</span>).<span class="title function_">nextAll</span>(<span class="string">&quot;span&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(12)nextUntil() #one和span之间的元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn12&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        $(<span class="string">&quot;#one&quot;</span>).<span class="title function_">nextUntil</span>(<span class="string">&quot;span&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(13)parent() .mini的父元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn13&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;.mini&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(14)prev() #two的上一个div</span></span><br><span class="line">    $(<span class="string">&quot;#btn14&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//prev()</span></span><br><span class="line">        $(<span class="string">&quot;#two&quot;</span>).<span class="title function_">prev</span>(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(15)prevAll() span前面所有的div</span></span><br><span class="line">    $(<span class="string">&quot;#btn15&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//prevAll()   选出前面所有的元素</span></span><br><span class="line">        $(<span class="string">&quot;span&quot;</span>).<span class="title function_">prevAll</span>(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(16)prevUntil() span向前直到#one的元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn16&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//prevUntil(exp)   找到之前所有的兄弟元素直到找到exp停止</span></span><br><span class="line">        $(<span class="string">&quot;span&quot;</span>).<span class="title function_">prevUntil</span>(<span class="string">&quot;#one&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//(17)siblings() #two的所有兄弟元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn17&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//siblings()    找到所有的兄弟元素，包括前面的和后面的</span></span><br><span class="line">        $(<span class="string">&quot;#two&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//(18)add()选择所有的 span 元素和id为two的元素</span></span><br><span class="line">    $(<span class="string">&quot;#btn18&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   $(&quot;span,#two,.mini,#one&quot;)</span></span><br><span class="line">        $(<span class="string">&quot;span&quot;</span>).<span class="title function_">add</span>(<span class="string">&quot;#two&quot;</span>)</span><br><span class="line">           .<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery属性操作"><a href="#jQuery属性操作" class="headerlink" title="jQuery属性操作"></a>jQuery属性操作</h3><p>html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。</p><p>text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。</p><p>val() 它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="line">          <span class="comment">// alert( $(&quot;div&quot;).html() );// 获取</span></span><br><span class="line">          <span class="comment">// $(&quot;div&quot;).html(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;);// 设置</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="line">          <span class="comment">// alert( $(&quot;div&quot;).text() ); // 获取</span></span><br><span class="line">          <span class="comment">// $(&quot;div&quot;).text(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;); // 设置</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="line">          $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">              <span class="title function_">alert</span>($(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>());<span class="comment">//获取</span></span><br><span class="line">              $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;超级程序猿&quot;</span>);<span class="comment">// 设置</span></span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p>val 方法同时设置多个表单项的选中状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            // 批量操作单选</span></span><br><span class="line"><span class="comment">            $(&quot;:radio&quot;).val([&quot;radio2&quot;]);</span></span><br><span class="line"><span class="comment">            // 批量操作筛选框的选中状态</span></span><br><span class="line"><span class="comment">            $(&quot;:checkbox&quot;).val([&quot;checkbox3&quot;,&quot;checkbox2&quot;]);</span></span><br><span class="line"><span class="comment">            // 批量操作多选的下拉框选中状态</span></span><br><span class="line"><span class="comment">            $(&quot;#multiple&quot;).val([&quot;mul2&quot;,&quot;mul3&quot;,&quot;mul4&quot;]);</span></span><br><span class="line"><span class="comment">            // 操作单选的下拉框选中状态</span></span><br><span class="line"><span class="comment">            $(&quot;#single&quot;).val([&quot;sin2&quot;]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            $(<span class="string">&quot;#multiple,#single,:radio,:checkbox&quot;</span>).<span class="title function_">val</span>([<span class="string">&quot;radio2&quot;</span>,<span class="string">&quot;checkbox1&quot;</span>,<span class="string">&quot;checkbox3&quot;</span>,<span class="string">&quot;mul1&quot;</span>,<span class="string">&quot;mul4&quot;</span>,<span class="string">&quot;sin3&quot;</span>]);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>attr() 可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等</p><p>​attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj</p><p>prop() 可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等</p><h3 id="jQuery练习"><a href="#jQuery练习" class="headerlink" title="jQuery练习"></a>jQuery练习</h3><p>2.全选，全不选，反选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//全选按钮单击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#checkedAllBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;:checkbox&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//全不选按钮绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#checkedNoBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;:checkbox&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//反选按钮绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#checkedRevBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">checked</span> = !<span class="variable language_">this</span>.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//判定是否满选，操作 全选/全不选 复选框</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> $all = $(<span class="string">&quot;:checkbox[name =&#x27;items&#x27;]&quot;</span>).<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> $selected = $(<span class="string">&quot;:checkbox[name = &#x27;items&#x27;]:checked&quot;</span>).<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#checkedAllBox&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, $all === $selected);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//提交按钮绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#sendBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取选中的复选框的文本信息</span></span></span><br><span class="line"><span class="language-javascript">                 $(<span class="string">&quot;:checkbox[name = &#x27;items&#x27;]:checked&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">                 &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//  全选/全不选复选框绑定单击事件(妙!)</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#checkedAllBox&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;:checkbox[name = &#x27;items&#x27;]&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="variable language_">this</span>.<span class="property">checked</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//给全部球类绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;:checkbox[name = &#x27;items&#x27;]&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//判定是否满选，操作 全选/全不选 复选框</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> $all = $(<span class="string">&quot;:checkbox[name =&#x27;items&#x27;]&quot;</span>).<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> $selected = $(<span class="string">&quot;:checkbox[name = &#x27;items&#x27;]:checked&quot;</span>).<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#checkedAllBox&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, $all === $selected);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    你爱好的运动是？<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkedAllBox&quot;</span>/&gt;</span>全选/全不选</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;items&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>/&gt;</span>足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;items&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>/&gt;</span>篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;items&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span>/&gt;</span>羽毛球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;items&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span>/&gt;</span>乒乓球</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkedAllBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全　选&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkedNoBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全不选&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkedRevBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反　选&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提　交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Dom的增删改"><a href="#Dom的增删改" class="headerlink" title="Dom的增删改"></a>Dom的增删改</h3><h4 id="内部插入："><a href="#内部插入：" class="headerlink" title="内部插入："></a>内部插入：</h4><p>appendTo() a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素<br>prependTo()   a.prependTo(b)    把 a 插到 b 所有子元素前面，成为第一个子元素**</p><h4 id="外部插入："><a href="#外部插入：" class="headerlink" title="外部插入："></a>外部插入：</h4><p>insertAfter()a.insertAfter(b) 得到 ba<br>insertBefore() a.insertBefore(b)  得到 ab**</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换:"></a>替换:</h4><p>replaceWith() a.replaceWith(b) 用 b 替换掉 a ,并且多个a只被替换成1个b<br>replaceAll() a.replaceAll(b) 用 a 替换掉所有 b，多个b可以被多个a替换掉**</p><h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h4><p>remove() a.remove(); 删除 a 标签<br>empty()    a.empty();  清空 a 标签里的内容**</p><h3 id="jQuery练习二"><a href="#jQuery练习二" class="headerlink" title="jQuery练习二"></a>jQuery练习二</h3><h4 id="2-从左到右，从右到左"><a href="#2-从左到右，从右到左" class="headerlink" title="2.从左到右，从右到左"></a>2.从左到右，从右到左</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 给选中添加到右边按钮绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;button:eq(0)&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//获取选中的选项</span></span><br><span class="line"><span class="comment">//把选中的选项appendTo到 右边</span></span><br><span class="line">$(<span class="string">&quot;select:eq(0) option:selected&quot;</span>).<span class="title function_">appendTo</span>($(<span class="string">&quot;select:eq(1)&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给 全部添加到右边(第二个按钮) 按钮绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;button:eq(1)&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;select:eq(0) option&quot;</span>).<span class="title function_">appendTo</span>($(<span class="string">&quot;select:eq(1)&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 选中添加到左边(第三个按钮) 按钮绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;button:eq(2)&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;select:eq(1) option:selected&quot;</span>).<span class="title function_">appendTo</span>($(<span class="string">&quot;select:eq(0)&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 全部添加到左边(第四个按钮) 按钮绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;button:eq(3)&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;select:eq(1) option&quot;</span>).<span class="title function_">appendTo</span>($(<span class="string">&quot;select:eq(0)&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="动态添加、删除表格记录（！！！）"><a href="#动态添加、删除表格记录（！！！）" class="headerlink" title="动态添加、删除表格记录（！！！）"></a>动态添加、删除表格记录（！！！）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//定义一个删除函数</span></span><br><span class="line">    <span class="keyword">var</span> deleteFun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在事件响应的function函数中，有一个this对象。这个this对象是当前正在响应事件的dom对象。</span></span><br><span class="line">        <span class="keyword">var</span> $trObj = $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>();</span><br><span class="line">        <span class="keyword">var</span> $name = $trObj.<span class="title function_">find</span>(<span class="string">&quot;td:first&quot;</span>).<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * confirm 是JavaScript语言提供的一个确认提示框函数。你给它传什么，它就提示什么&lt;br/&gt;</span></span><br><span class="line"><span class="comment">         * 当用户点击了确定，就返回true。当用户点击了取消，就返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;你确定要删除[&quot;</span> + $name + <span class="string">&quot;]这个数据吗&quot;</span>)) &#123;</span><br><span class="line">            $trObj.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return false 可以阻止默认行为</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加记录</span></span><br><span class="line">    $(<span class="string">&quot;#addEmpButton&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//获取添加表格的输入框信息</span></span><br><span class="line">        <span class="keyword">var</span> name = $(<span class="string">&quot;#empName&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">var</span> email = $(<span class="string">&quot;#email&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">var</span> salary = $(<span class="string">&quot;#salary&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="comment">//创建表格添加到table表格最后</span></span><br><span class="line">        <span class="keyword">var</span> $trObj = $(<span class="string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;td&gt;&quot;</span> + name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;td&gt;&quot;</span> + email + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;td&gt;&quot;</span> + salary + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;td&gt;&lt;a href=\&quot;deleteEmp?id=001\&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/tr&gt;&quot;</span>).<span class="title function_">appendTo</span>($(<span class="string">&quot;#employeeTable&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加记录后要给delete绑定单击事件</span></span><br><span class="line">        <span class="comment">// 给添加的行的a标签绑上事件</span></span><br><span class="line">        $trObj.<span class="title function_">find</span>(<span class="string">&quot;a&quot;</span>).<span class="title function_">click</span>(deleteFun);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除记录</span></span><br><span class="line">    $(<span class="string">&quot;a&quot;</span>).<span class="title function_">click</span>(deleteFun);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CSS样式操作"><a href="#CSS样式操作" class="headerlink" title="CSS样式操作"></a>CSS样式操作</h3><p>addClass() 添加样式</p><p>removeClass() 删除样式</p><p>toggleClass() 有就删除，没有就添加样式。</p><p>offset() 获取和设置元素的坐标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css">//css</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.border</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">2px</span> white solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.redDiv</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.blackDiv</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">5px</span> blue solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">CSS</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">css(name|pro|[,val|fn])       读写匹配元素的样式属性。 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a.css(&#x27;color&#x27;)取出a元素的color</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a.css(&#x27;color&#x27;,&quot;red&quot;)设置a元素的color为red</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">CSS 类</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">addClass(class|fn) 为元素添加一个class值;&lt;div class=&quot;mini big&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">removeClass([class|fn]) 删除元素的class值；传递一个具体的class值，就会删除具体的某个class</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a.removeClass()：移除所有的class值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">**/</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> $divEle = $(<span class="string">&#x27;div:first&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btn01&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//addClass() - 向被选元素添加一个或多个类</span></span></span><br><span class="line"><span class="language-javascript">$divEle.<span class="title function_">addClass</span>(<span class="string">&quot;redDiv blackDiv&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btn02&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//removeClass() - 从被选元素删除一个或多个类 </span></span></span><br><span class="line"><span class="language-javascript">$divEle.<span class="title function_">removeClass</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btn03&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//toggleClass() - 对被选元素进行添加/删除类的切换操作 </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//切换就是如果具有该类那么删除，如果没有那么添加上</span></span></span><br><span class="line"><span class="language-javascript">$divEle.<span class="title function_">toggleClass</span>(<span class="string">&quot;redDiv&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btn04&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//offset() - 返回第一个匹配元素相对于文档的位置。</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> os = $divEle.<span class="title function_">offset</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//注意通过offset获取到的是一个对象，这个对象有两个属性top表示顶边距，left表示左边距</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;顶边距：&quot;</span>+os.<span class="property">top</span>+<span class="string">&quot; 左边距：&quot;</span>+os.<span class="property">left</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//调用offset设置元素位置时，也需要传递一个js对象，对象有两个属性top和left</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//offset(&#123; top: 10, left: 30 &#125;);</span></span></span><br><span class="line"><span class="language-javascript"> $divEle.<span class="title function_">offset</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="attr">top</span>:<span class="number">50</span>,</span></span><br><span class="line"><span class="language-javascript"> <span class="attr">left</span>:<span class="number">60</span></span></span><br><span class="line"><span class="language-javascript"> &#125;); </span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h3><h4 id="基本动画"><a href="#基本动画" class="headerlink" title="基本动画"></a>基本动画</h4><p>show() 将隐藏的元素显示<br>hide() 将可见的元素隐藏。<br>toggle() 可见就隐藏，不可见就显示。</p><ul><li><p>以上动画方法都可以添加参数。</p><ul><li><p>第一个参数是动画 执行的时长，以毫秒为单位</p></li><li><p>第二个参数是动画的回调函数 (动画完成后自动调用的函数)</p></li></ul></li></ul><h4 id="淡入淡出动画"><a href="#淡入淡出动画" class="headerlink" title="淡入淡出动画"></a>淡入淡出动画</h4><p>fadeIn() 淡入（慢慢可见）</p><p>fadeOut() 淡出（慢慢消失）</p><p>fadeTo() 在指定时长内慢慢的将透明度修改到指定的值。0 透明，1 完成可见，0.5 半透明</p><p>fadeToggle() 淡入&#x2F;淡出 切换</p><ul><li><p>以上动画方法都可以添加参数。</p><ul><li><p>第一个参数是动画 执行的时长，以毫秒为单位</p></li><li><p>第二个参数是动画的回调函数 (动画完成后自动调用的函数)</p></li></ul></li></ul><h4 id="练习-06、CSS-动画-品牌展"><a href="#练习-06、CSS-动画-品牌展" class="headerlink" title="练习 06、CSS_动画 品牌展"></a>练习 06、CSS_动画 品牌展</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">详见idea模块</span><br></pre></td></tr></table></figure><h3 id="jQuery事件操作"><a href="#jQuery事件操作" class="headerlink" title="jQuery事件操作"></a>jQuery事件操作</h3><h4 id="function-和-window-onload-x3D-function-的区别？"><a href="#function-和-window-onload-x3D-function-的区别？" class="headerlink" title="$( function(){} );  和  window.onload &#x3D; function(){}  的区别？"></a>$( function(){} );  和  window.onload &#x3D; function(){}  的区别？</h4><p><strong>他们分别是在什么时候触发？</strong><br>1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。</p><p>2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，</p><p>​还要等标签显示时需要的内容加载完成。</p><p><strong>他们触发的顺序？</strong><br>1、jQuery 页面加载完成之后先执行</p><p>2、原生 js 的页面加载完成之后</p><p><strong>他们执行的次数？</strong><br>1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数（前面的都被覆盖了js没有重载）。</p><p>2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行。</p><h4 id="jQuery中其他事件的处理方法"><a href="#jQuery中其他事件的处理方法" class="headerlink" title="jQuery中其他事件的处理方法"></a>jQuery中其他事件的处理方法</h4><p><code>click() </code>它可以绑定单击事件，以及触发单击事件</p><p><code>mouseover()</code> 鼠标移入事件</p><p><code>mouseout() </code>  鼠标移出事件</p><p><code>bind() </code>   可以给元素一次性绑定一个或多个事件。</p><p><strong>例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;h5&quot;).bind(&quot;click mouseover mouseout&quot;,function () &#123; //function之间可以传一个或多个绑定事件</span><br><span class="line">      console.log(&quot;这是bind绑定的事件&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>one() </code>使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。</p><p><code>unbind() </code>跟 bind 方法相反的操作，解除事件的绑定</p><p><code>live() </code>也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。</p><p>​          哪怕这个元素是后面动态创建出来的也有效</p><h4 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h4><p><strong>什么是事件的冒泡？</strong></p><p>事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，</p><p>同一个事件也被传递到了父元素的事件里去 响应。</p><p><strong>那么如何阻止事件冒泡呢？</strong></p><p>在子元素事件函数体内，<code>return false;  </code>   可以阻止事件的冒泡传递。**</p><h4 id="JavaScript事件对象"><a href="#JavaScript事件对象" class="headerlink" title="JavaScript事件对象"></a>JavaScript事件对象</h4><p>事件对象，是封装有触发的事件信息的一个 javascript 对象。<br>我们重点关心的是怎么拿到这个 javascript 的事件对象。以及使用。</p><p><strong>如何获取呢 javascript 事件对象呢？</strong><br>在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，</p><p>这个参数名，我们习惯取名为 event。<br>这个 event 就是 javascript 传递参事件处理函数的事件对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//1.原生javascript获取 事件对象</span><br><span class="line">/*window.onload = function () &#123;</span><br><span class="line">   document.getElementById(&quot;areaDiv&quot;).onclick = function (event) &#123;</span><br><span class="line">      console.log(event);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;*/</span><br><span class="line">//2.JQuery代码获取 事件对象</span><br><span class="line">/*$(function () &#123;</span><br><span class="line">   $(&quot;#areaDiv&quot;).click(function (event) &#123;</span><br><span class="line">         console.log(event);</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)*/</span><br><span class="line">//3.使用bind同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</span><br><span class="line">   $(function () &#123;</span><br><span class="line">      $(&quot;#areaDiv&quot;).bind(&quot;mouseover mouseout&quot;,function (event) &#123;</span><br><span class="line">         if (event.type==&quot;mouseover&quot;)&#123;</span><br><span class="line">            console.log(&quot;bind绑定鼠标移入事件&quot;)</span><br><span class="line">         &#125;else &#123;</span><br><span class="line">            console.log(&quot;bind绑定鼠标移出事件&quot;)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h4 id="练习-事件-图片跟随"><a href="#练习-事件-图片跟随" class="headerlink" title="练习 事件 图片跟随"></a>练习 事件 图片跟随</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&quot;#small&quot;</span>).<span class="title function_">bind</span>(<span class="string">&quot;mouseover mouseout mousemove&quot;</span>,<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">type</span>==<span class="string">&quot;mouseover&quot;</span>)&#123;</span><br><span class="line">         $(<span class="string">&quot;#showBig&quot;</span>).<span class="title function_">show</span>()</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">type</span>==<span class="string">&quot;mouseout&quot;</span>)&#123;</span><br><span class="line">         $(<span class="string">&quot;#showBig&quot;</span>).<span class="title function_">hide</span>()</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">type</span>==<span class="string">&quot;mousemove&quot;</span>) &#123;</span><br><span class="line">         $(<span class="string">&quot;#showBig&quot;</span>).<span class="title function_">offset</span>(&#123;<span class="comment">//pageX和 pageY都是 event的属性</span></span><br><span class="line">            <span class="attr">left</span>: event.<span class="property">pageX</span>+<span class="number">10</span>,</span><br><span class="line">            <span class="attr">top</span>:event.<span class="property">pageY</span>+<span class="number">10</span></span><br><span class="line">         &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>（其他详见笔记）</p><h3 id="xml解析技术介绍"><a href="#xml解析技术介绍" class="headerlink" title="xml解析技术介绍"></a>xml解析技术介绍</h3><p>第三方的解析：</p><p>jdom 在 dom 基础上进行了封装 、</p><p>dom4j 又对 jdom 进行了封装。</p><p>pull 主要用在 Android 手机开发，是在跟 sax 非常类似都是事件机制解析 xml 文件</p><p>这个 Dom4j 它是第三方的解析技术<strong>。</strong></p><p>我们需要使用第三方给我们提供好的类库才可以解析 xml 文件。</p><h3 id="dom4j解析技术（！！！）"><a href="#dom4j解析技术（！！！）" class="headerlink" title="dom4j解析技术（！！！）"></a>dom4j解析技术（！！！）</h3><p>需要分四步操作:<br>第一步，通过创建 SAXReader 对象。来读取 xml 文件，获取 Document 对象<br>第二步，通过 Document 对象。拿到 XML 的根元素对象<br>第三步，通过根元素对象。获取所有的 book 标签对象<br>第四步，遍历每个 book 标签对象。然后获取到 book 标签对象内的每一个元素，再通过 getText() 方法拿到起始标签和结<br>束标签之间的文本内容&#x2F;elementText()方法可以直接获得指定标签文本内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.izumi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dom4jTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="comment">//创建一个SaxReader输入流,去读取xml配置文件，获得document对象</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="string">&quot;src/books.xml&quot;</span>);</span><br><span class="line">        System.out.println(document);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="comment">//创建一个SaxReader输入流,去读取xml配置文件，获得document对象</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="comment">//再JUnit测试中，相对路径是从模块名开始算</span></span><br><span class="line">        <span class="comment">//获得 document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="string">&quot;src/books.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过 document对象获取根元素</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="comment">//element()和 elements()都是通过标签名查找子元素</span></span><br><span class="line">        List&lt;Element&gt; books = rootElement.elements(<span class="string">&quot;book&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历，处理每个book标签转化为Book类</span></span><br><span class="line">        <span class="keyword">for</span> (Element book : books) &#123;</span><br><span class="line">            <span class="comment">//asXml()方法把标签对象转化为标签字符串</span></span><br><span class="line">           <span class="comment">// System.out.println(book.asXML());</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">nameElement</span> <span class="operator">=</span> book.element(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">//System.out.println(nameElement.asXML());</span></span><br><span class="line">            <span class="comment">//getTest()可以得到标签文本内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> nameElement.getText();</span><br><span class="line">            <span class="comment">//System.out.println(text);</span></span><br><span class="line">            <span class="comment">//elementText()方法可以直接获得指定标签文本内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> book.elementText(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> book.elementText(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">            <span class="comment">//attributeValue()可以获得标签属性的值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> book.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(id, name, author, Double.parseDouble(price));</span><br><span class="line">            System.out.println(book1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h3 id="JavaWeb基本介绍"><a href="#JavaWeb基本介绍" class="headerlink" title="JavaWeb基本介绍"></a>JavaWeb基本介绍</h3><h4 id="什么是JavaWeb"><a href="#什么是JavaWeb" class="headerlink" title="什么是JavaWeb"></a>什么是JavaWeb</h4><p>JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。</p><p>JavaWeb 是基于请求和响应来开发的。**</p><h4 id="什么是请求"><a href="#什么是请求" class="headerlink" title="什么是请求"></a>什么是请求</h4><p>请求是指客户端给服务端发送数据，叫请求request</p><h4 id="什么是响应"><a href="#什么是响应" class="headerlink" title="什么是响应"></a>什么是响应</h4><p>响应是指服务端给客户端回传数据，叫响应response</p><h4 id="请求和响应的关系"><a href="#请求和响应的关系" class="headerlink" title="请求和响应的关系"></a>请求和响应的关系</h4><p>请求和响应是成对出现的，有请求就有响应。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220130110032735.png" alt="image-20220130110032735"></p><h3 id="Web资源的分类"><a href="#Web资源的分类" class="headerlink" title="Web资源的分类"></a>Web资源的分类</h3><p>web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。</p><p>静态资源： html、css、js、txt、mp4 视频 , jpg 图片</p><p>动态资源： jsp 页面、Servlet 程序</p><h3 id="常见的Web服务器"><a href="#常见的Web服务器" class="headerlink" title="常见的Web服务器"></a>常见的Web服务器</h3><ul><li><p>Tomcat：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务器），也是当前应用最广的 JavaWeb 服务器（免费）。</p></li><li><p>Jboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。</p></li><li><p>GlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。</p></li><li><p>Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持，<br>性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。</p></li><li><p>WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范，<br>而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p></li></ul><h3 id="TomCat服务器和Servlet版本的对应关系"><a href="#TomCat服务器和Servlet版本的对应关系" class="headerlink" title="TomCat服务器和Servlet版本的对应关系"></a>TomCat服务器和Servlet版本的对应关系</h3><p>当前企业常用的版本 <code>7.*</code>、<code>8.*</code></p><p>Servlet 程序从 2.5 版本是现在世面使用最多的版本（xml 配置）</p><p>到了 Servlet3.0 之后。就是注解版本的 Servlet 使用。 以 2.5 版本为主线讲解 Servlet 程序</p><h3 id="TomCat的使用"><a href="#TomCat的使用" class="headerlink" title="TomCat的使用"></a>TomCat的使用</h3><h4 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h4><p>bin 专门用来存放 Tomcat 服务器的可执行程序<br>conf 专门用来存放 Tocmat 服务器的配置文件<br>lib 专门用来存放 Tomcat 服务器的 jar 包<br>logs  专门用来存放 Tomcat 服务器运行时输出的日记信息<br>temp    专门用来存放 Tomcdat 运行时产生的临时数据<br>webapps 专门用来存放部署的 Web 工程。<br>work 是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录。</p><h4 id="如何启动TomCat"><a href="#如何启动TomCat" class="headerlink" title="如何启动TomCat"></a>如何启动TomCat</h4><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器。</p><p>如何测试 Tomcat 服务器启动成功？？？</p><p>打开浏览器，在浏览器地址栏中输入以下地址测试：</p><p>1、<a href="http://localhost:8080/">http://localhost:8080</a></p><p>2、<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p><p>3、http:&#x2F;&#x2F;真实 ip:8080</p><p>当出现如下界面，说明 Tomcat 服务器启动</p><h4 id="常见的启动失败原因分析"><a href="#常见的启动失败原因分析" class="headerlink" title="常见的启动失败原因分析"></a>常见的启动失败原因分析</h4><p>常见的启动失败的情况有，双击 startup.bat 文件，就会出现一个小黑窗口一闪而来。</p><p>这个时候，失败的原因基本上都是因为没有配置好 JAVA_HOME 环境变量</p><h4 id="另一种启动tomcat服务器的方法"><a href="#另一种启动tomcat服务器的方法" class="headerlink" title="另一种启动tomcat服务器的方法"></a>另一种启动tomcat服务器的方法</h4><p>1、打开命令行</p><p>2、cd 到 你的 Tomcat 的 bin 目录下</p><p>3、敲入启动命令： catalina run</p><p>并且如果启动失败，控制台会提示错误原因</p><h4 id="Tomcat的停止"><a href="#Tomcat的停止" class="headerlink" title="Tomcat的停止"></a>Tomcat的停止</h4><p>1、点击 tomcat 服务器窗口的 x 关闭按钮</p><p>2、把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C</p><p>3、找到 Tomcat 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器</p><h4 id="如何修改tomcat的服务器端口号"><a href="#如何修改tomcat的服务器端口号" class="headerlink" title="如何修改tomcat的服务器端口号"></a>如何修改tomcat的服务器端口号</h4><p>Mysql 默认的端口号是：3306</p><p>Tomcat 默认的端口号是：8080</p><p>找到 Tomcat 目录下的 conf 目录，找到 server.xml 配置</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117101922161.png" alt="image-20211117101922161" style="zoom:80%;" />-</p><p>平时上百度：<a href="http://www.baidu.com/">http://www.baidu.com:80</a></p><p>HTTP 协议默认的端口号是：80端口会默认隐藏</p><h4 id="如何部署web工程到Tomcat中"><a href="#如何部署web工程到Tomcat中" class="headerlink" title="如何部署web工程到Tomcat中"></a>如何部署web工程到Tomcat中</h4><h5 id="第一种部署方法："><a href="#第一种部署方法：" class="headerlink" title="第一种部署方法："></a><strong>第一种部署方法：</strong></h5><p>只需要把 web 工程的目录拷贝到 Tomcat 的 webapps 目录下 即可。</p><ul><li><p><strong>如何访问Tomcat下的web工程</strong></p><ul><li><p>只需要在浏览器中输入访问地址格式如下：</p><p><a href="http://ip:port/工程名/目录下/文件名">http://ip:port/工程名/目录下/文件名</a></p></li></ul></li></ul><h5 id="第二种部署方法"><a href="#第二种部署方法" class="headerlink" title="第二种部署方法"></a>第二种部署方法</h5><p>找到 Tomcat 下的 conf 目录\Catalina\localhost\ 下,创建如下的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Context 表示一个工程上下文</span></span><br><span class="line"><span class="comment">path 表示工程的访问路径:/abc不要用中文</span></span><br><span class="line"><span class="comment">docBase 表示你的工程目录在哪里</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/abc&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;E:\book&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>访问这个工程的路径如下:<a href="http://ip:port/abc/">http://ip:port/abc/</a> 就表示访问 E:\book 目录</p><h4 id="手托-html-页面到浏览器和在浏览器中输入-http-ip-端口号-工程名-访问的区别"><a href="#手托-html-页面到浏览器和在浏览器中输入-http-ip-端口号-工程名-访问的区别" class="headerlink" title="手托 html 页面到浏览器和在浏览器中输入 http://ip:端口号/工程名/访问的区别"></a>手托 html 页面到浏览器和在浏览器中输入 <a href="http://ip:端口号/工程名/访问的区别">http://ip:端口号/工程名/访问的区别</a></h4><ul><li><p>手托html页面的原理：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117103856370.png" alt="image-20211117103856370" style="zoom:80%;" />-</li></ul></li><li><p>输入访问地址访问的原理：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117104008444.png" alt="image-20211117104008444" style="zoom: 67%;" />-</li></ul></li></ul><h4 id="ROOT-的工程的访问，以及-默认-index-html-页面的访-问"><a href="#ROOT-的工程的访问，以及-默认-index-html-页面的访-问" class="headerlink" title="ROOT 的工程的访问，以及 默认 index.html 页面的访 问"></a>ROOT 的工程的访问，以及 默认 index.html 页面的访 问</h4><ul><li><p><strong>当我们在浏览器地址栏中输入访问地址如下</strong>：</p><p><a href="http://ip:port/">http://ip:port/</a> &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 没有工程名的时候，默认访问的是 ROOT 工程。</p></li><li><p><strong>当我们在浏览器地址栏中输入的访问地址如下：</strong></p><p><a href="http://ip:port/工程名/">http://ip:port/工程名/</a> &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 没有资源名，默认访问 index.html</p></li></ul><h3 id="Idea整合Tomcat服务器"><a href="#Idea整合Tomcat服务器" class="headerlink" title="Idea整合Tomcat服务器"></a>Idea整合Tomcat服务器</h3><p>操作的菜单如下：File | Settings | Build, Execution, Deployment | Application Servers</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117105045539.png" alt="image-20211117105045539" style="zoom:67%;" />-</p><h3 id="IDEA-中动态-web-工程的操作"><a href="#IDEA-中动态-web-工程的操作" class="headerlink" title="IDEA 中动态 web 工程的操作"></a>IDEA 中动态 web 工程的操作</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117113525185.png" alt="image-20211117113525185" style="zoom:67%;" />-</p><h4 id="web工程目录介绍"><a href="#web工程目录介绍" class="headerlink" title="web工程目录介绍"></a>web工程目录介绍</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117114146158.png" alt="image-20211117114146158"></p><h4 id="如何给动态-web-工程添加额外-jar-包"><a href="#如何给动态-web-工程添加额外-jar-包" class="headerlink" title="如何给动态 web 工程添加额外 jar 包"></a>如何给动态 web 工程添加额外 jar 包</h4><p>除了常见的那种 右键 add as libraries方法，还有以下方法：</p><p>1、可以打开项目结构菜单操作界面，添加一个自己的类库：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117124113444.png" alt="image-20211117124113444"></p><p>2、添加你你类库需要的 jar 包文件。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117124440089.png" alt="image-20211117124440089" style="zoom:67%;" />-</p><p>3、选择你添加的类库，给哪个模块使用：</p><p>4、选择 Artifacts 选项，将类库，添加到打包部署中：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117124729994.png" alt="image-20211117124729994" style="zoom: 67%;" />-</p><h4 id="如何在-IDEA-中部署工程到-Tomcat-上运行"><a href="#如何在-IDEA-中部署工程到-Tomcat-上运行" class="headerlink" title="如何在 IDEA 中部署工程到 Tomcat 上运行"></a>如何在 IDEA 中部署工程到 Tomcat 上运行</h4><p>1、建议修改 web 工程对应的 Tomcat 运行实例名称：</p><p>​你还可以修改你的 Tomcat 实例启动后默认的访问地址：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117130306228.png" alt="image-20211117130306228" style="zoom: 67%;" />-</p><p>2、确认你的 Tomcat 实例中有你要部署运行的 web 工程模块</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117130435481.png" alt="image-20211117130435481" style="zoom: 80%;" />-</p><p>3.重启tomcat实例</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117130653089.png" alt="image-20211117130653089" style="zoom: 67%;" />-</p><h4 id="修改工程访问路径"><a href="#修改工程访问路径" class="headerlink" title="修改工程访问路径"></a>修改工程访问路径</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117131230250.png" alt="image-20211117131230250" style="zoom:80%;" />-</p><h4 id="修改运行的端口号"><a href="#修改运行的端口号" class="headerlink" title="修改运行的端口号"></a>修改运行的端口号</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117131419956.png" alt="image-20211117131419956" style="zoom:80%;" />-</p><h4 id="修改运行使用的浏览器"><a href="#修改运行使用的浏览器" class="headerlink" title="修改运行使用的浏览器"></a>修改运行使用的浏览器</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117131452730.png" alt="image-20211117131452730" style="zoom:80%;" />-</p><h4 id="配置资源热部署"><a href="#配置资源热部署" class="headerlink" title="配置资源热部署"></a>配置资源热部署</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117131520450.png" alt="image-20211117131520450" style="zoom:80%;" />-</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Servlet技术"><a href="#Servlet技术" class="headerlink" title="Servlet技术"></a>Servlet技术</h3><h4 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h4><p>1、Servlet 是 JavaEE 规范之一。规范就是接口</p><p>2、Servlet 是 JavaWeb 三大组件之一。三大组件分别是：</p><p>​Servlet 程序、Filter 过滤器、Listener 监听器。</p><p>3、Servlet 是运行在服务器上的一个 java 小程序，</p><p>​它可以接收客户端发送过来的请求，并响应数据给客户端。</p><h4 id="手动实现-Servlet-程序"><a href="#手动实现-Servlet-程序" class="headerlink" title="手动实现 Servlet 程序"></a>手动实现 Servlet 程序</h4><p>1、编写一个类去实现 Servlet 接口</p><p>2、实现 service 方法，处理请求，并响应数据</p><p>3、到 web.xml 中去配置 servlet 程序的访问地址</p><ul><li><strong>编写一个类实现Servlet接口并实现service方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span>  <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//service方法是专门用来处理请求和响应的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet被执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>到 web.xml 中去配置 servlet 程序的访问地址</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    servlet标签给Tomcat配置Servlet程序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        servlet-name标签 给Servlet程序起一个别名（一般用类名）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      servlet-class是Servlet的全类名  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.izumi.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  servlet-mapping标签 给servlet程序配置访问地址  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  servlet-name 标签是告诉 服务器，我当前配置的地址给哪个servlet程序使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    url-pattern 标签配置访问地址</span></span><br><span class="line"><span class="comment">        / 表示在服务器解析的时候，表示地址为： http://ip:port//工程路径</span></span><br><span class="line"><span class="comment">        /hello表示地址为 http://ip:port/工程路径/hello--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h5><ul><li>常见的错误 1：url-pattern 中配置的路径没有以斜杠打头。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117185353788.png" alt="image-20211117185353788" style="zoom:80%;" />-</p><ul><li>常见错误 2：servlet-name 配置的值不存在：（这种错误在idea中，编译器会发现）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117185422173.png" alt="image-20211117185422173" style="zoom:80%;" />-</p><ul><li>常见错误 3：servlet-class 标签的全类名配置错误：（这种错误在idea中，编译器会发现）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117185549494.png" alt="image-20211117185549494" style="zoom:80%;" />-</p><h4 id="url-地址到-Servlet-程序的访问（原理图）"><a href="#url-地址到-Servlet-程序的访问（原理图）" class="headerlink" title="url 地址到 Servlet 程序的访问（原理图）"></a>url 地址到 Servlet 程序的访问（原理图）</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117190049749.png" alt="image-20211117190049749" style="zoom:80%;" />-</p><h4 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h4><p>1、执行 Servlet 构造器方法</p><p>2、执行 init 初始化方法</p><p>​第一、二步，是在第一次访问，的时候创建 Servlet 程序会调用。</p><p>3、执行 service 方法</p><p>​第三步，每次访问都会调用。</p><p>4、执行 destroy 销毁方法</p><p>​第四步，在 web 工程停止的时候调用</p><h4 id="GET和POST请求的分发处理"><a href="#GET和POST请求的分发处理" class="headerlink" title="GET和POST请求的分发处理"></a>GET和POST请求的分发处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//将ServletRequest接口类型向下转型为 HttpRequest接口类型调用 getMethod方法</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> httpServletRequest.getMethod();</span><br><span class="line">       System.out.println(<span class="string">&quot;3.HelloServlet被执行...&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">           doPost();</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">           doGet();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;post请求&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;get请求&quot;</span>);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="通过继承-HttpServlet-实现-Servlet-程序"><a href="#通过继承-HttpServlet-实现-Servlet-程序" class="headerlink" title="通过继承 HttpServlet 实现 Servlet 程序"></a>通过继承 HttpServlet 实现 Servlet 程序</h4><p>一般在实际项目开发中，都是使用继承 HttpServlet 类的方式去实现 Servlet 程序。</p><p>1、编写一个类去继承 HttpServlet 类</p><p>2、根据业务需要重写 doGet 或 doPost 方法</p><p>3、到 web.xml 中的配置 Servlet 程序的访问地址</p><ul><li><strong>新创建一个 HelloServlet02，继承 HttpServlet类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.izumi.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在get请求的时候调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;com.izumi.servlet.HelloServlet02 doGet方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在post请求的时候调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;com.izumi.servlet.HelloServlet02 doPost方法被调用&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>到 web.xml 中的配置 Servlet 程序的访问地址</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;HelloServlet02&lt;/servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;com.izumi.servlet.HelloServlet02&lt;/servlet-class&gt;</span><br><span class="line">   &lt;/servlet&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;HelloServlet02&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/hello02&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h4 id="使用Idea创建servlet程序（方便快捷）"><a href="#使用Idea创建servlet程序（方便快捷）" class="headerlink" title="使用Idea创建servlet程序（方便快捷）"></a>使用Idea创建servlet程序（方便快捷）</h4><p>菜单：new -&gt;Servlet 程序</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117203747471.png" alt="image-20211117203747471" style="zoom:67%;" />-</p><p>配置servlet信息</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117204204218.png" alt="image-20211117204204218" style="zoom:80%;" />-</p><p>如果new没有 servle的解决方案</p><p>2.1.将src标记成Sources文件</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117203928687.png" alt="image-20211117203928687" style="zoom: 67%;" /><p>2.2.在facets配置中的sources root的，将src勾选上</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117204033796.png" alt="image-20211117204033796" style="zoom: 67%;" />-</p><h4 id="Servlet-类的继承体系"><a href="#Servlet-类的继承体系" class="headerlink" title="Servlet 类的继承体系"></a>Servlet 类的继承体系</h4><p>简单的源码分析（129p）</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117205718599.png" alt="image-20211117205718599"></p><h3 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h3><p>ServletConfig 类从类名上来看，就知道是 Servlet 程序的配置信息类。</p><p>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建，我们负责使用。</p><p>Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，</p><p>就创建一个对应的 ServletConfig 对 象。</p><h4 id="ServletConfig的三大作用"><a href="#ServletConfig的三大作用" class="headerlink" title="ServletConfig的三大作用"></a>ServletConfig的三大作用</h4><p>1、可以获取 Servlet 程序的别名 servlet-name 的值</p><p>2、获取初始化参数 init-param (需要到web.xml里面增添相关配置信息)</p><p>3、获取 ServletContext 对象</p><ul><li><p><strong>web.xml配置</strong></p><p>在实现servlet程序的类中的 <code>&lt;servlet&gt;</code> 标签加入以下标签</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        ini-param 是初始化参数 可以配置多个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            是参数名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>userName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            是参数值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql//localhost:3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>servlet中的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2. init方法被调用&quot;</span>);</span><br><span class="line"><span class="comment">//        1、可以获取 Servlet 程序的别名 servlet-name 的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet的别名是：&quot;</span>+servletConfig.getServletName());</span><br><span class="line"><span class="comment">//        2、获取初始化参数 init-param</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet的初始化参数 userName:&quot;</span>+servletConfig.getInitParameter(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet的初始化参数url:&quot;</span>+servletConfig.getInitParameter(<span class="string">&quot;url&quot;</span>));</span><br><span class="line"><span class="comment">//        3、获取 ServletContext 对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取 ServletContext对象：&quot;</span>+servletConfig.getServletContext());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ServletConfig的一些细节："><a href="#ServletConfig的一些细节：" class="headerlink" title="ServletConfig的一些细节："></a>ServletConfig的一些细节：</h4><ul><li><p>继承 HttpServlet 的 servlet类：</p><p>可以在其他位置使用 <code>getServletConfig()</code>方法获得 <code>ServletConfig</code>对象</p><p>(实际上调用的是 GenericServlet <code>getServletConfig()</code>方法)</p></li><li><p>重写 init方法里面一定要调用父类的init操作</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211117223746491.png" alt="image-20211117223746491" style="zoom:80%;" />-</p><p>​因为 该方法在 HttpServlet 的父类 GennericServlet中有定义，</p><p>​这里重写不调用父类的init方法就会丢失 config造成空指针异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//GennericServlet类的 init方法</span><br><span class="line">public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">    this.config = config;</span><br><span class="line">    this.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletContext-类"><a href="#ServletContext-类" class="headerlink" title="ServletContext 类"></a>ServletContext 类</h3><h4 id="什么是ServletContext？"><a href="#什么是ServletContext？" class="headerlink" title="什么是ServletContext？"></a>什么是ServletContext？</h4><p>1、ServletContext 是一个接口，它表示 Servlet 上下文对象</p><p>2、一个 web 工程，只有一个 ServletContext 对象实例。</p><p>3、ServletContext 对象是一个域对象*。</p><p>4、ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁</p><h5 id="什么是域对象？"><a href="#什么是域对象？" class="headerlink" title="什么是域对象？"></a>什么是域对象？</h5><p>域对象，是可以像 Map 一样存取数据的对象，叫域对象。</p><p>这里的域指的是存取数据的操作范围，整个 web 工程。</p><table><thead><tr><th></th><th>存数据</th><th>取数据</th><th>删除数据</th></tr></thead><tbody><tr><td>map</td><td>put()</td><td>get()</td><td>remove()</td></tr><tr><td>域对象</td><td>putAttribute()</td><td>getAttribute()</td><td>removeAttribute()</td></tr></tbody></table><h4 id="ServletContext的四大作用"><a href="#ServletContext的四大作用" class="headerlink" title="ServletContext的四大作用"></a>ServletContext的四大作用</h4><p>​ServletContext对象 （可以通过<code>getServletContext</code>方法直接获取到）</p><p>1、<font title = "blue">获取 web.xml 中配置的上下文参数</font> context-param</p><p>​调用方法 <code>getInitParameter()</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    context-param是上下文参数（它属于整个web工程）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>www.baidu.com<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、<font title = "blue">获取当前的工程路径</font>格式: &#x2F;工程路径</p><p>​调用方法<code>getContextPath()</code></p><p>3、<font title = "blue">获取工程部署后在服务器硬盘上的绝对路径 </font>  ServletContext对象调用方法<code>getRealtPath()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>、获取 web.xml 中配置的上下文参数 context-param</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletConfig().getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取context-param: &quot;</span>+servletContext.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取context-param: &quot;</span>+servletContext.getInitParameter(<span class="string">&quot;url&quot;</span>));</span><br><span class="line"><span class="comment">//        2、获取当前的工程路径，格式: /工程路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取当前工程的路径：&quot;</span>+servletContext.getContextPath()); <span class="comment">// 得到/servlet</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        3、获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">        <span class="comment">//得到F:\IdeaProjects\JavaWeb\out\artifacts\servelet_war_exploded\</span></span><br><span class="line">        <span class="comment">// 重启tomcat服务可以看到idea 拷贝的tomcat的数据：</span></span><br><span class="line">        <span class="comment">// C:\Users\Pixar\AppData\Local\JetBrains\IntelliJIdea2020.1\tomcat\Tomcat_8_0_50_JavaWeb_2</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        / / 斜杠被服务器解析地址为:http://ip:port/工程名/ 映射到 IDEA 代码的web目录</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取工程部署后在硬盘的绝对路径：&quot;</span>+servletContext.getRealPath(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取工程部署后css在硬盘的绝对路径：&quot;</span>+servletContext.getRealPath(<span class="string">&quot;/css&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取工程部署后imgs在硬盘的绝对路径：&quot;</span>+servletContext.getRealPath(<span class="string">&quot;/imgs&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、像 Map 一样存取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、像 Map 一样存取数据</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;key为 id的 value= &quot;</span>+ servletContext.getAttribute(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;key为 id的 value= &quot;</span>+ servletContext.getAttribute(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;key为 id的 value= &quot;</span>+ servletContext.getAttribute(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;key为 id的 value= &quot;</span>+ servletContext.getAttribute(<span class="string">&quot;id&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContext02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        System.out.println(servletContext.getAttribute(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="comment">//因为attribute数据是域对象，是web工程下所有servlet程序共同拥有，而存数据的操作在 ServletContext中，所以必须先运行 ServletContext，才能获取到数据</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关于idea部署Servlet的一些细节"><a href="#关于idea部署Servlet的一些细节" class="headerlink" title="关于idea部署Servlet的一些细节"></a>关于idea部署Servlet的一些细节</h4><p>通过 ContextServlet对象的<code>getRealPath</code>得到的真实路径地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// idea 拷贝的tomcat的数据：(重启tomcat服务可以看到)</span></span><br><span class="line"><span class="comment">/* C:\Users\Pixar\AppData\Local\JetBrains\IntelliJIdea2020.1\tomcat\Tomcat_8_0_50_JavaWeb_2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再进入到 conf\Catalina\localhost下可以看到xml配置文件，里面记录的信息如下：</p><p>可以看到，idea的tomcat服务配置是上面介绍的 如何将web工程部署到tomcat服务器的第二种方法：</p><p><code>&lt;Context path=&quot;/servlet&quot; docBase=&quot;F:\IdeaProjects\JavaWeb\out\artifacts\servelet_war_exploded&quot; /&gt;</code></p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="什么是HTTTP协议"><a href="#什么是HTTTP协议" class="headerlink" title="什么是HTTTP协议"></a>什么是HTTTP协议</h4><p>什么是协议？</p><p>协议就是指双方，或多方，相互约定，大家都要遵守的规则，就叫协议</p><p>HTTP协议：</p><p>就是指 服务端和客户端之间通行时，发送的数据，需要遵守的规则，就叫HTTP协议。</p><p>HTTP协议中的数据又叫报文</p><h4 id="请求的HTTP协议"><a href="#请求的HTTP协议" class="headerlink" title="请求的HTTP协议"></a>请求的HTTP协议</h4><p>客户端给服务器发送数据叫请求。</p><p>服务器给客户端回传数据叫响应。</p><p>请求又分为 GET 请求，和 POST 请求两种</p><h5 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h5><p>1、请求行</p><p>​(1) 请求的方式 GET</p><p>​(2) 请求的资源路径[+?+请求参数]</p><p>​(3) 请求的协议的版本号 HTTP&#x2F;1.1</p><p>2、请求头</p><p>​ key : value 组成 不同的键值对，表示不同的含义</p><p>图解：</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118124329257.png" alt="image-20211118124329257" style="zoom: 80%;" /><h5 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h5><p>1、请求行</p><p>​(1) 请求的方式 POST</p><p>​(2) 请求的资源路径[+?+请求参数]</p><p>​(3) 请求的协议的版本号 HTTP&#x2F;1.1</p><p>2、请求头</p><p>​key : value 组成 不同的键值对，表示不同的含义</p><p>3、空行</p><p>​请求体 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 就是发送给服务器的数据</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118125147592.png" alt="image-20211118125147592"></p><h5 id="常见的请求头说明"><a href="#常见的请求头说明" class="headerlink" title="常见的请求头说明"></a>常见的请求头说明</h5><p>​Accept: 表示客户端可以接收的数据类型</p><p>​Accpet-Languege: 表示客户端可以接收的语言类型</p><p>​User-Agent: 表示客户端浏览器的信息</p><p>​Host： 表示请求时的服务器 ip 和端口号</p><h5 id="哪些是-GET-请求，哪些是-POST-请求"><a href="#哪些是-GET-请求，哪些是-POST-请求" class="headerlink" title="哪些是 GET 请求，哪些是 POST 请求"></a>哪些是 GET 请求，哪些是 POST 请求</h5><p>​GET 请求有哪些：</p><p>​   1、form 标签 method&#x3D;get</p><p>​    2、a 标签</p><p>​ 3、link 标签引入 css</p><pre><code>                 4、Script 标签引入 js 文件 </code></pre><p>​ 5、img 标签引入图片</p><p>​6、iframe 引入 html 页面</p><p>​7、在浏览器地址栏中输入地址后敲回车</p><p>POST 请求有哪些：</p><p>​8、form 标签 method&#x3D;post</p><h4 id="响应的HTTP协议格式"><a href="#响应的HTTP协议格式" class="headerlink" title="响应的HTTP协议格式"></a>响应的HTTP协议格式</h4><p>1、响应行</p><p>(1) 响应的协议和版本号</p><p>(2) 响应状态码</p><p>(3) 响应状态描述符</p><p>2、响应头</p><p>(1) key : value 不同的响应头，有其不同含义</p><p>—空行 –</p><p>7</p><p>3、响应体 —-&gt;&gt;&gt; 就是回传给客户端的数据</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118130408184.png" alt="image-20211118130408184" style="zoom:80%;" /><h5 id="常用的响应码说明"><a href="#常用的响应码说明" class="headerlink" title="常用的响应码说明"></a>常用的响应码说明</h5><p>​ 200 表示请求成功</p><p>​ 302 表示请求重定向</p><p>​ 404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）</p><p>​ 500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><h5 id="MIME类型说明"><a href="#MIME类型说明" class="headerlink" title="MIME类型说明"></a>MIME类型说明</h5><p>MIME 是 HTTP 协议中数据类型。</p><p>MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。</p><p>MIME 类型的格式是“大类型&#x2F;小 类型”，并与某一种文件的扩展名相对应。</p><ul><li>常见的MIME类型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118131334873.png" alt="image-20211118131334873"></p><ul><li>谷歌浏览器查看http协议</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118131715384.png" alt="image-20211118131715384" style="zoom:80%;" />-</p><h3 id="HttpServletRequest类"><a href="#HttpServletRequest类" class="headerlink" title="HttpServletRequest类"></a>HttpServletRequest类</h3><h4 id="HttpServletRequest有什么用"><a href="#HttpServletRequest有什么用" class="headerlink" title="HttpServletRequest有什么用"></a>HttpServletRequest有什么用</h4><p>每次只要有请求进入 Tomcat 服务器，Tomcat 服务器就会把请求过来的 HTTP 协议信息</p><p>解析好封装到 Request 对象中。 然后传递到 service 方法（doGet 和 doPost）</p><p>中给我们使用。我们可以通过 HttpServletRequest 对象，获取到所有请求的 信息</p><h4 id="HttpServletRequest类常用方法"><a href="#HttpServletRequest类常用方法" class="headerlink" title="HttpServletRequest类常用方法"></a>HttpServletRequest类常用方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i. getRequestURI() 获取请求的资源路径</span><br><span class="line">ii. getRequestURL() 获取请求的统一资源定位符（绝对路径）</span><br><span class="line">iii. getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line">iv. getHeader() 获取请求头</span><br><span class="line">v. getParameter() 获取请求的参数</span><br><span class="line">vi. getParameterValues() 获取请求的参数（多个值的时候使用）</span><br><span class="line">vii. getMethod() 获取请求的方式 GET 或 POST</span><br><span class="line">viii. setAttribute(key, value); 设置域数据</span><br><span class="line">ix. getAttribute(key); 获取域数据</span><br><span class="line">x. getRequestDispatcher() 获取请求转发对象</span><br></pre></td></tr></table></figure><p><strong>常用 API 示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        i. getRequestURI() 获取请求的资源路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的资源路径是：&quot;</span>+request.getRequestURI());</span><br><span class="line"><span class="comment">//        ii. getRequestURL() 获取请求的统一资源定位符（绝对路径）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取请求的统一资源定位符（绝对路径：&quot;</span>+request.getRequestURL());</span><br><span class="line"><span class="comment">//        iii. getRemoteHost() 获取客户端的 ip 地址</span></span><br><span class="line"><span class="comment">//        //使用 localhost 去访问，得到的客户端IP地址是： 127.0.0.1</span></span><br><span class="line"><span class="comment">//        //使用 127.0.0.1 去访问，得到的客户端IP地址是： 127.0.0.1</span></span><br><span class="line"><span class="comment">//        //使用 ip地址（10.184.7.190） 去访问，得到的客户端IP地址是： 10.184.7.190</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取客户端的ip地址：&quot;</span>+request.getRemoteHost());</span><br><span class="line"><span class="comment">//        iv. getHeader() 获取请求头</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取请求头：User-Agent&quot;</span>+request.getHeader(<span class="string">&quot;User-Agent&quot;</span>));</span><br><span class="line"><span class="comment">//       getMethod() 获取请求的方式 GET 或 POST</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取请求参数：&quot;</span>+request.getMethod());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出结果</span></span><br><span class="line"><span class="comment">请求的资源路径是：/servlet/request</span></span><br><span class="line"><span class="comment">获取请求的统一资源定位符（绝对路径：http://localhost:8080/servlet/request</span></span><br><span class="line"><span class="comment">获取客户端的ip地址：127.0.0.1</span></span><br><span class="line"><span class="comment">获取请求头：User-AgentMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36</span></span><br><span class="line"><span class="comment">获取请求参数：GET</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="如何获取请求参数"><a href="#如何获取请求参数" class="headerlink" title="如何获取请求参数"></a>如何获取请求参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获得表单用户名:&quot;</span>+request.getParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获得表单密码:&quot;</span>+request.getParameter(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获得表单爱好:&quot;</span>+ Arrays.toString(request.getParameterValues(<span class="string">&quot;hobby&quot;</span>)) );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Post请求只需要注意：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若请求内容有中文 会出现乱码</span></span><br><span class="line">     <span class="comment">// 所以需要设置字符集编码 注意：该方法需要在获取参数请求之前调用才有效</span></span><br><span class="line"> request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h4><p>什么是请求的转发?</p><p>请求转发是指，服务器收到请求后，</p><p>从一次资源跳转到另一个资源的操作叫请求转发。</p><p>不可以访问工程以外的资源</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118203011852.png" alt="image-20211118203011852"></p><p>代码演示：</p><p>servlet1代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在 servlet1查看参数（材料）：&quot;</span>+username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（给材料盖章），传到servlet2</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;servlet1的盖章&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求转发 给 servlet2</span></span><br><span class="line">        <span class="comment">// 问路：Servlet2（柜台 2）怎么走</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 请求转发必须要以斜杠打头，/ 斜杠表示地址为：http://ip:port/工程名/ ,</span></span><br><span class="line"><span class="comment">         * 映射到 IDEA 代码的 web 目录</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        RequestDispatcher requestDispatcher = request.getRequestDispatcher(&quot;/servlet2&quot;);</span></span><br><span class="line">        <span class="comment">//可以转发到 WEB-INF目录下</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/form.html&quot;</span>);</span><br><span class="line">        <span class="comment">//// 走向 Sevlet2（柜台 2）</span></span><br><span class="line">        requestDispatcher.forward(request,response);</span><br><span class="line">     <span class="comment">//不能跳转到外部地址 原因：采用该方法跳转的地址是：//http://localhost:8080/servlet/www.baidu.com</span></span><br><span class="line">       <span class="comment">// request.getRequestDispatcher(&quot;www.baidu.com&quot;).forward(request,response);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>servlet2代码<strong>：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//来到 servlet2</span></span><br><span class="line">        <span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在 servlet2中查看参数：（username）&quot;</span>+request.getParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查看 servlet 1 是否有盖章 attribute</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查看 servlet 1 是否有盖章 :&quot;</span>+request.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理自己的业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servlet2处理自己的业务&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="base标签的作用"><a href="#base标签的作用" class="headerlink" title="base标签的作用"></a>base标签的作用</h4><blockquote><p>base标签可以设置当前页面中所有相对路径工作时，参照哪个路径来进行跳转</p></blockquote><p>ForwardC代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经过 ForwardC~~~~&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/a/b/c.html&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118222513160.png" alt="image-20211118222513160"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211118222308452.png" alt="image-20211118222308452" style="zoom:80%;" />-</p><h4 id="Web中的相对路径和绝对路径"><a href="#Web中的相对路径和绝对路径" class="headerlink" title="Web中的相对路径和绝对路径"></a>Web中的相对路径和绝对路径</h4><p>在javaweb中，路径分为相对路径和绝对路径</p><ul><li><p>相对路径：</p><ul><li><code>.</code>  表示当前目录</li><li><code>..</code>     表示上一级目录</li><li>资源名： 表示当前目录&#x2F;资源名</li></ul></li><li><p>绝对路径</p><ul><li>http&#x2F;&#x2F;localhost:8080&#x2F;工程路径&#x2F;资源路径</li></ul></li><li><p>在实际开发中，路径都使用绝对路径，而不简单的使用相对路径。</p><p>1、绝对路径 2、base+相对</p></li></ul><h4 id="Web中斜杠（-x2F-的不同意义"><a href="#Web中斜杠（-x2F-的不同意义" class="headerlink" title="Web中斜杠（&#x2F;)的不同意义"></a>Web中斜杠（&#x2F;)的不同意义</h4><p>在 web 中 &#x2F; 斜杠 是一种绝对路径。</p><p>&#x2F; 斜杠 如果被浏览器解析，得到的地址是：<a href="http://ip:port/">http://ip:port/</a></p><p><code>&lt;a href=&quot;/&quot;&gt;斜杠&lt;/a&gt;</code></p><p>&#x2F; 斜杠 如果被服务器解析，得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a></p><p><code>&lt;url-pattern&gt;/forwardC&lt;/url-pattern&gt;</code></p><p><code>servletRequest.getRealPath(&quot;/&quot;)</code></p><p><code>request.getRequestDispatcher(&quot;/&quot;)</code></p><p>特殊情况：<code>response.sendRediect(“/”);</code>   把斜杠发送给浏览器解析。得到 <a href="http://ip:port">http://ip:port</a></p><h3 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h3><h4 id="HttpServletResponse的作用"><a href="#HttpServletResponse的作用" class="headerlink" title="HttpServletResponse的作用"></a>HttpServletResponse的作用</h4><p>HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，</p><p>Tomcat 服务器都会创建一个 Response 对象传 递给 Servlet 程序去使用。<br>HttpServletRequest 表示请求过来的信息，HttpServletResponse</p><p>表示所有响应的信息， 我们如果需要设置返回给客户端的信息，</p><p>都可以通过HttpServletResponse 对象来进行设置</p><h4 id="两个输出流的说明"><a href="#两个输出流的说明" class="headerlink" title="两个输出流的说明"></a>两个输出流的说明</h4><ul><li>字节流<ul><li>通过 getOutputStream()获取 常用于下载（传递二进制数据）</li></ul></li><li>字符流<ul><li>通过 getWriter()获取常用于回传字符串（常用）</li></ul></li></ul><p>两个流同时只能使用一个。 使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211120145954071.png" alt="image-20211120145954071" style="zoom:80%;" />-</p><h4 id="如何往客户端回传数据"><a href="#如何往客户端回传数据" class="headerlink" title="如何往客户端回传数据"></a>如何往客户端回传数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseIOServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,IOException &#123;</span><br><span class="line"><span class="comment">// 要求 ： 往客户端回传 字符串 数据。</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;response&#x27;s content!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应乱码解决"><a href="#响应乱码解决" class="headerlink" title="响应乱码解决"></a>响应乱码解决</h4><ul><li><p><strong>方案一(不推荐使用)</strong></p><ul><li>&#96;&#96;&#96;java</li></ul><p>  &#x2F;&#x2F; 设置服务器字符集为 UTF-8<br>  resp.setCharacterEncoding(“UTF-8”);<br>  &#x2F;&#x2F; 通过响应头，设置浏览器也使用 UTF-8 字符集<br>  resp.setHeader(“Content-Type”, “text&#x2F;html;<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **方案二(推荐使用)**</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">    // 它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头</span><br><span class="line">    // 此方法一定要在获取流对象之前调用才有效</span><br><span class="line">    resp.setContentType(&quot;text/html; charset=UTF-8&quot;);</span><br></pre></td></tr></table></figure></p></li></ul><h4 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h4><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。</p><p>你去新地址访问。叫请求 重定向（因为之前的地址可能已经被废弃）。</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211120151105871.png" alt="image-20211120151105871"  /><p>请求重定向的特点：</p><p>1、浏览器地址栏会发生变化<br>2、两次请求<br>3、不共享Request域中数据<br>4、不能访问WEB-INF下的资源<br>5、可以访问工程外的资源**</p><ul><li><p><strong>请求重定向方式一：</strong></p><ul><li>&#96;&#96;&#96;java<br>  &#x2F;&#x2F;设置请求重定向<br>  &#x2F;&#x2F;1.设置响应状态码 为302<br>response.setStatus(302);<br>  &#x2F;&#x2F;2.设置响应头，说明新的地址在哪里<br>response.setHeader(“Location”,”<a href="http://localhost:8080/servlet02/response2">http://localhost:8080/servlet02/response2</a>“);  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **请求重定向方式二：**</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">        //请求重定向方式二（推荐使用）</span><br><span class="line">        response.sendRedirect(&quot;http://localhost:8080/servlet02/response2&quot;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="关于中文乱码的解决总结"><a href="#关于中文乱码的解决总结" class="headerlink" title="关于中文乱码的解决总结"></a>关于中文乱码的解决总结</h3><p>request的post请求容易出现乱码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若请求内容有中文 会出现乱码</span></span><br><span class="line">     <span class="comment">// 所以需要设置字符集编码 注意：该方法需要在获取参数请求之前调用才有效</span></span><br><span class="line"> request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>response的响应出现乱码：两种方案：</p><p>1、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置服务器字符集为 UTF-8</span></span><br><span class="line">resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 通过响应头，设置浏览器也使用 UTF-8 字符集</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; </span></span><br></pre></td></tr></table></figure><p>2、推荐使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头</span></span><br><span class="line"><span class="comment">// 此方法一定要在获取流对象之前调用才有效</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="书城项目–第二阶段"><a href="#书城项目–第二阶段" class="headerlink" title="书城项目–第二阶段"></a>书城项目–第二阶段</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li><p>需求 1：用户注册<br>需求如下：<br>1）访问注册页面<br>2）填写注册信息，提交给服务器<br>3）服务器应该保存用户<br>4）当用户已经存在—-提示用户注册 失败，用户名已存在<br>5）当用户不存在—–注册成功</p></li><li><p>需求 2：用户登陆<br>需求如下：<br>1）访问登陆页面<br>2）填写用户名密码后提交<br>3）服务器判断用户是否存在<br>4）如果登陆失败 —&gt;&gt;&gt;&gt; 返回用户名或者密码错误信息<br>5）如果登录成功 —&gt;&gt;&gt;&gt; 返回登陆成功 信息</p></li></ul><h3 id="JavaEE的三层架构"><a href="#JavaEE的三层架构" class="headerlink" title="JavaEE的三层架构"></a>JavaEE的三层架构</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211120174608782.png" alt="image-20211120174608782"></p><p>分层的目的是为了解耦。解耦就是为了降低代码的耦合度。方便项目后期的维护和升级。</p><p>web 层 com.izumi.web&#x2F;servlet&#x2F;controller<br>service 层 com.izumi.service Service接口包<br>com.izumi.service.impl Service 接口实现类<br>dao 持久层 com.izumi.dao Dao 接口包<br>com.izumi.dao.impl Dao 接口实现类<br>实体 bean 对象 com.izumi.pojo&#x2F;entity&#x2F;domain&#x2F;bean JavaBean 类<br>测试包 com.izumi.test&#x2F;junit<br>工具类 com.izumi.utils</p><h3 id="1、创建书城项目数据库所需要的表"><a href="#1、创建书城项目数据库所需要的表" class="headerlink" title="1、创建书城项目数据库所需要的表"></a>1、创建书城项目数据库所需要的表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE book;</span><br><span class="line"></span><br><span class="line">CREATE TABLE t_user(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL UNIQUE,</span><br><span class="line">`password` VARCHAR(32) NOT NULL,</span><br><span class="line">email VARCHAR(200));</span><br><span class="line"></span><br><span class="line">INSERT INTO t_user(username,`password`,email) VALUES(&#x27;admin&#x27;,&#x27;admin&#x27;,&#x27;admin@163.com&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM t_user;</span><br></pre></td></tr></table></figure><h3 id="2、编写数据库对应的JavaBean"><a href="#2、编写数据库对应的JavaBean" class="headerlink" title="2、编写数据库对应的JavaBean"></a>2、编写数据库对应的JavaBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、编写工具类JdbcUtils"><a href="#3、编写工具类JdbcUtils" class="headerlink" title="3、编写工具类JdbcUtils"></a>3、编写工具类JdbcUtils</h3><h4 id="导入需要的jar包"><a href="#导入需要的jar包" class="headerlink" title="导入需要的jar包"></a>导入需要的jar包</h4><p>​druid-1.1.9.jar</p><p>​mysql-connector-java-5.1.7-bin.jar</p><h4 id="在-src-源码目录下编写-jdbc-properties-属性配置文件："><a href="#在-src-源码目录下编写-jdbc-properties-属性配置文件：" class="headerlink" title="在 src 源码目录下编写 jdbc.properties 属性配置文件："></a>在 src 源码目录下编写 jdbc.properties 属性配置文件：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">zzt</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/book</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><h4 id="编写-JdbcUtils类"><a href="#编写-JdbcUtils类" class="headerlink" title="编写 JdbcUtils类"></a>编写 JdbcUtils类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过反射获取连接properties路径</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">loadStream</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            properties.load(loadStream);</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库连接</span></span><br><span class="line">    <span class="comment">//如果返回null，说明获取连接失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             connection = dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection connection)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JdbcUtils测试"><a href="#JdbcUtils测试" class="headerlink" title="JdbcUtils测试"></a>JdbcUtils测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.izumi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.izumi.utils.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">//测试 JdbcUtils</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtilsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">            System.out.println(connection);</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编写BaseDao"><a href="#编写BaseDao" class="headerlink" title="编写BaseDao"></a>编写BaseDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BasicDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  实现增改删</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql 传入 的 update sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args    sql对应的参数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回-1说明失败，返回其他值即表示影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql,Object...args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span>  queryRunner.update(connection,sql,args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询返回一个JavaBean的 sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 返回的对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql   执行的sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args  sql对应的参数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;   返回的类型的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">queryForOne</span><span class="params">(Class&lt;T&gt; type,String sql,Object...args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>   queryRunner.query(connection,sql,<span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;T&gt;(type),args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询返回多个JavaBean的 sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 返回的对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql   执行的sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args  sql对应的参数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;   返回的类型的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">queryForList</span><span class="params">(Class&lt;T&gt; type, String sql, Object...args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>   queryRunner.query(connection,sql,<span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;T&gt;(type),args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行返回一行一列的 查询 语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryForSingValue</span><span class="params">(String sql,Object...args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>   queryRunner.query(connection,sql,<span class="keyword">new</span> <span class="title class_">ScalarHandler</span>(),args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编写UserDao和测试"><a href="#编写UserDao和测试" class="headerlink" title="编写UserDao和测试"></a><strong>编写</strong>UserDao和测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BasicDao</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user where username = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> queryForOne(User.class,sql,username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByUsernameAndPwd</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user where username = ? and password = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> queryForOne(User.class,sql,username,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user (username,password,email) values(?,?,?);&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> update(sql,user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写UserService和测试"><a href="#编写UserService和测试" class="headerlink" title="编写UserService和测试"></a>编写UserService和测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">         userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span>   userDao.queryUserByUsernameAndPwd(user.getUsername(),user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exitsUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.queryUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//说明没有查到，用户名不存在，即可以使用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写web层"><a href="#编写web层" class="headerlink" title="编写web层"></a>编写web层</h3><h4 id="实现用户注册的功能"><a href="#实现用户注册的功能" class="headerlink" title="实现用户注册的功能"></a>实现用户注册的功能</h4><ul><li>图解分析：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211120214837725.png" alt="image-20211120214837725"></p><h5 id="修改-regist-html-和-regist-success-html-页面"><a href="#修改-regist-html-和-regist-success-html-页面" class="headerlink" title="修改 regist.html 和 regist_success.html 页面"></a>修改 regist.html 和 regist_success.html 页面</h5><p><strong>1、添加 base 标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    base标签，永远固定base标签的跳转结果  一般写到 工程路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/book/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、修改 base 标签对页面中所有相对路径的影响（浏览器 F12，哪个报红，改哪个)</strong></p><p>​以下是几个修改示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、修改注册表单的提交地址和请求方式</strong></p><p><code>&lt;form action=&quot;registerServlet&quot; method=&quot;post&quot;&gt;</code></p><h4 id="用户登录功能的实现"><a href="#用户登录功能的实现" class="headerlink" title="用户登录功能的实现"></a>用户登录功能的实现</h4><ul><li>图解用户登录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211120223908767.png" alt="image-20211120223908767"></p><h5 id="修改-login-html-页面和-login-success-html-页面"><a href="#修改-login-html-页面和-login-success-html-页面" class="headerlink" title="修改 login.html 页面和 login_success.html 页面"></a>修改 login.html 页面和 login_success.html 页面</h5><p>和修改 regist.html 和 regist_success.html 页面类似，这里不再赘述</p><h5 id="修改-login-html-表单的-提交地址-和-请求方式"><a href="#修改-login-html-表单的-提交地址-和-请求方式" class="headerlink" title="修改 login.html 表单的 提交地址 和 请求方式"></a>修改 login.html 表单的 提交地址 和 请求方式</h5><p><code>&lt;form action=&quot;loginServlet&quot; method=&quot;post&quot;&gt;</code></p><h5 id="LoginServlet程序"><a href="#LoginServlet程序" class="headerlink" title="LoginServlet程序"></a>LoginServlet程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        1、获取请求的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="comment">//        2、调用XxxService.xxx0处理业务</span></span><br><span class="line"><span class="comment">//        userService.login()登录</span></span><br><span class="line">        <span class="comment">//        3、根据login()方法返回结果判断登最是否成功</span></span><br><span class="line"><span class="comment">//                成功</span></span><br><span class="line"><span class="comment">//        跳到成功页面loginsuccess. html</span></span><br><span class="line"> <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.login(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, username, password, <span class="literal">null</span>)); </span><br><span class="line">        <span class="keyword">if</span>(loginUser==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            <span class="comment">//                失败</span></span><br><span class="line">            <span class="comment">//        跳回登录页面</span></span><br><span class="line">            System.out.println(<span class="string">&quot;用户名密码错误！！！&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/pages/user/login.html&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录成功，跳转到成功页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/pages/user/login_success.html&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><h3 id="什么是jsp，它有什么用？"><a href="#什么是jsp，它有什么用？" class="headerlink" title="什么是jsp，它有什么用？"></a>什么是jsp，它有什么用？</h3><p>jsp 的全换是 java server pages。Java 的服务器页面。</p><p>jsp 的主要作用是代替 Servlet 程序回传 html 页面的数据。</p><p>因为 Servlet 程序回传 html 页面数据是一件非常繁锁的事情。开发成本和维护成本都极高。</p><p>2、jsp 如何访问：</p><p>jsp 页面和 html 页面一样，都是存放在 web 目录下。访问也跟访问 html 页面一样。</p><p>比如： 在 web 目录下有如下的文件：</p><p>web 目录</p><p>a.html 页面 访问地址是 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;&gt; <a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a></p><p>b.jsp 页面 访问地址是 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;&gt; <a href="http://ip:port/工程路径/b.jsp">http://ip:port/工程路径/b.jsp</a></p><h3 id="jsp的本质是什么"><a href="#jsp的本质是什么" class="headerlink" title="jsp的本质是什么"></a>jsp的本质是什么</h3><p>jsp 页面<font title = "blue">本质上是一个 Servlet 程序</font>。 当我们第一次访问 jsp 页面的时候。</p><p><span alt="underline">Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。</span></p><p>并且对它进行编译成 为.class 字节码程序。我们打开 java 源文件不难发现其里面的内容是：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211121114836668.png" alt="image-20211121114836668 "  style="zoom:80%;" />-</p><p>我们跟踪原代码发现，HttpJspBase 类。它直接地继承了 HttpServlet 类。</p><p>也就是说。jsp 翻译出来的 java 类，它间接了继 承了 HttpServlet 类。</p><p>也就是说，翻译出来的是一个 Servlet</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211121145858168.png" alt="image-20211121145858168" style="zoom:80%;" />-</p><p><font title = "green">总结：</font>  通过翻译的 java 源代码我们就可以得到结果：jsp 就是 Servlet 程序。</p><p>大家也可以去观察翻译出来的 Servlet 程序的源代码，不难发现。</p><p>其底层实现，也是通过输出流。把 html 页面数据回传 给客户端</p><h3 id="jsp的三种语法"><a href="#jsp的三种语法" class="headerlink" title="jsp的三种语法"></a>jsp的三种语法</h3><h4 id="a-jsp-头部的-page-指令"><a href="#a-jsp-头部的-page-指令" class="headerlink" title="a)jsp 头部的 page 指令"></a>a)jsp 头部的 page 指令</h4><p>jsp 的 page 指令可以修改 jsp 页面中一些重要的属性，或者行为。</p><p><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot;&gt;</code></p><p>i. language 属性表示 jsp 翻译后是什么语言文件。暂时只支持 java。</p><p>ii. contentType 属性 表示 jsp 返回的数据类型是什么。也是源码中 response.setContentType()参数值</p><p>iii. pageEncoding 属性 表示当前 jsp 页面文件本身的字符集。</p><p>iv. import 属性 跟 java 源代码中一样。用于导包，导类。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span alt = "hollow">两个属性是给 out 输出流使用</span>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>v. autoFlush 属性 设置当 out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是 true。</p><p>vi. buffer 属性设置 out 缓冲区的大小。默认是 8kb</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span alt = "hollow">两个属性是给 out 输出流使用</span>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>vii. errorPage 属性 设置当 jsp 页面运行时出错，自动跳转去的错误页面路径。</p><!--errorPage 表示错误后自动跳转去的路径 <br/>这个路径一般都是以斜杠打头，它表示请求地址为 http://ip:port/工程路径/映射到代码的 Web 目录--><p>viii. isErrorPage 属性 设置当前 jsp 页面是否是错误信息页面。</p><p>​默认是 false。如果是 true 可以获取异常信息。</p><p>ix. session 属性 设置访问当前 jsp 页面，是否会创建 HttpSession 对象。默认是 true。</p><p>x. extends 属性 设置 jsp 翻译出来的 java 类默认继承谁。</p><h4 id="b-jsp中常用脚本"><a href="#b-jsp中常用脚本" class="headerlink" title="b)jsp中常用脚本"></a>b)jsp中常用脚本</h4><h5 id="声明脚本（极少使用）"><a href="#声明脚本（极少使用）" class="headerlink" title="声明脚本（极少使用）"></a>声明脚本（<font title ="gray">极少使用</font>）</h5><blockquote><p>声明脚本的格式是：</p><p><code>&lt;%! 声明 java 代码 %&gt;</code></p><p>作用：可以给 jsp 翻译出来的 java 类定义属性和方法甚至是静态代码块。内部类等。</p></blockquote><p><font title ="blue">示例：</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; map;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="表达式脚本（常用）"><a href="#表达式脚本（常用）" class="headerlink" title="表达式脚本（常用）"></a>表达式脚本（<font title ="gray">常用</font>）</h5><blockquote><p>表达式脚本的格式是：<code>&lt;%=表达式%&gt;</code></p><p>表达式脚本的作用是：在jsp 页面上输出数据。</p></blockquote><p><strong>表达式脚本的特点：</strong><br>1、所有的表达式脚本都会被翻译到<code>_jspService()</code> 方法中_<br>2、表达式脚本都会被翻译成为 out.print()输出到页面上<br>3、由于表达式脚本翻译的内容都在<code>_jspService() </code>方法中,<br>​所以<code>_jspService()</code>方法中的对象都可以直接使用,如request对象。<br>4、表达式脚本中的表达式不能以分号结束。</p><p><font title ="blue">代码示例:</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=<span class="number">12</span>%&gt;</span><br><span class="line">&lt;%=<span class="number">12.22</span>%&gt;</span><br><span class="line">&lt;%=<span class="string">&quot;我是字符串&quot;</span>%&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">&quot;username&quot;</span>)%&gt;</span><br></pre></td></tr></table></figure><h5 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h5><blockquote><p>代码脚本的格式是：</p><p><code>&lt;%java语句%&gt;</code></p><p>代码脚本的作用是：可以在 jsp 页面中，编写我们自己需要的功能（写的是 java 语句）。</p></blockquote><p>代码脚本的特点是：</p><ol><li>代码脚本翻译之后都在<code>_jspService</code> 方法中</li><li>代码脚本由于翻译到<code>_jspService()</code>方法中，所以在<code>_jspService()</code>方法中的现有对象都可以直接使用。</li><li>还可以由多个代码脚本块组合完成一个完整的 java 语句。</li><li>代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数据</li></ol><p>练习：</p><ol><li>代码脚本—-if 语句</li><li>代码脚本—-for 循环语句</li><li>翻译后 java 文件中_jspService 方法内的代码都可以写</li></ol><p><font title ="blue">代码示例:</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--<span class="number">1.</span> 代码脚本----<span class="keyword">if</span> 语句--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="number">12</span>)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;你赢了！！&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;你输了！！！&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">  %&gt;</span><br><span class="line">&lt;%--<span class="number">2.</span> 代码脚本----<span class="keyword">for</span> 循环语句--%&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第 &lt;%=j + <span class="number">1</span>%&gt;行&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;%--<span class="number">3.</span> 翻译后 java 文件中_jspService 方法内的代码都可以写--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户名的请求参数值是：&quot;</span> + username);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="c-jsp中的三种注释"><a href="#c-jsp中的三种注释" class="headerlink" title="c)jsp中的三种注释"></a>c)jsp中的三种注释</h4><h5 id="i-html-注释"><a href="#i-html-注释" class="headerlink" title="i. html 注释"></a>i. html 注释</h5><blockquote><!-- 这是 html 注释 --><p>html 注释会被翻译到 java 源代码中。在_jspService 方法里，以 out.writer 输出到客户端。</p></blockquote><h5 id="ii-java-注释"><a href="#ii-java-注释" class="headerlink" title="ii. java 注释"></a>ii. java 注释</h5><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">// 单行 java 注释</span><br><span class="line">/* 多行 java 注释 */</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>java 注释会被翻译到 java 源代码中。</p></blockquote><h5 id="iii-jsp-注释"><a href="#iii-jsp-注释" class="headerlink" title="iii. jsp 注释"></a>iii. jsp 注释</h5><blockquote><p><code>&lt;%-- 这是 jsp 注释 --%&gt;</code><br>jsp 注释可以注掉，jsp 页面中所有代码</p></blockquote><h3 id="jsp九大内置对象"><a href="#jsp九大内置对象" class="headerlink" title="jsp九大内置对象"></a>jsp九大内置对象</h3><blockquote><p> jsp 中的内置对象，是指 Tomcat 在翻译 jsp 页面成为 Servlet 源代码后，</p><p> 内部提供的九大对象，叫内置对象。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211121185134388.png" alt="image-20211121185134388"></p><h3 id="四大域对象"><a href="#四大域对象" class="headerlink" title="四大域对象"></a>四大域对象</h3><blockquote><p>四个域对象分别是：</p><ul><li><p>pageContext(PageContextImpl类)当前jsp页面范围内有效</p></li><li><p>request (HttpServletRequest类)一次请求内有效</p></li><li><p>session(HttpSession类)一次会话范围内有效（打开浏览器访问服务器，直到关闭服务器）</p></li><li><p>application (ServletContext类)整个web工程范围内有效（只要web工程不停止，数据都在）</p></li></ul></blockquote><p>域对象可以像Map一样存取数据的对象。四个域对象功能一样。不同的是它们数据的存取范围。</p><p>虽然域对象可以存取数据。在使用上它们是有优先顺序的。</p><p>四个域对象在使用的时候，优先顺序分别是，它们从小到大的顺序：</p><p>pageContext—&gt; request–&gt;session–&gt;application</p><p><font title ="blue">scope.jsp示例:</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//往四个域中分别保存数据</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;pageContext&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;session&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;application&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">pageContext 是否有值：&lt;%=pageContext.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">request 是否有值：&lt;%=request.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">session 是否有值：&lt;%=session.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">application 是否有值：&lt;%=application.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/scope2.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    <span class="comment">//跳转到 scope2取值，pageContext取出的值为null</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><font title ="blue">scope2.jsp示例:</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;scope2.jsp 页面&lt;/h1&gt;</span><br><span class="line">pageContext 域是否有值：&lt;%=pageContext.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt; &lt;br&gt;</span><br><span class="line">request 域是否有值：&lt;%=request.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt; &lt;br&gt;</span><br><span class="line">session 域是否有值：&lt;%=session.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt; &lt;br&gt;</span><br><span class="line">application 域是否有值：&lt;%=application.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><font title ="green">说明：</font></p><ol><li>当执行到请求跳转到scope2后，pageContext域为null</li><li>当再次请求scope2时，request为null</li><li>当关闭浏览器，在访问scope2，session为null</li><li>当重新部署项目，再访问scope2，application为null</li></ol><h3 id="jsp-中的-out-输出和-response-getWriter-输出的区-别"><a href="#jsp-中的-out-输出和-response-getWriter-输出的区-别" class="headerlink" title="jsp 中的 out 输出和 response.getWriter 输出的区 别"></a>jsp 中的 out 输出和 response.getWriter 输出的区 别</h3><blockquote><p>response 中表示响应，我们经常用于设置返回给客户端的内容（输出）</p><p>out 也是给用户做输出使用的。</p></blockquote><p><strong>output1示例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--    自行调用 out.flush验证--%&gt;</span><br><span class="line">&lt;%-- 发现 response 输出在最前面</span><br><span class="line">          原因是 当jsp页面所有代码执行完成后会执行 out.flush方法，会把out缓冲区的数据追加到</span><br><span class="line">          response 缓冲区末尾--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        JspWriter</span><br><span class="line">        out.print(<span class="string">&quot;out输出1&quot;</span>);</span><br><span class="line">        <span class="comment">//out.flush();//out输出1 response输出1 response输出2 out输出2</span></span><br><span class="line">        out.print(<span class="string">&quot;out输出2&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;response输出1&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;response输出2&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211121223520138.png" alt="image-20211121223520138"></p><p><strong>output2示例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">        out.print(<span class="number">12</span>);<span class="comment">//底层调用 write方法，并全部转成了字符串形式</span></span><br><span class="line">        out.write(<span class="number">12</span>);<span class="comment">//显示不正常，原因是底层采用 (char)转化</span></span><br><span class="line">    %&gt;</span><br></pre></td></tr></table></figure><h3 id="jsp常用标签"><a href="#jsp常用标签" class="headerlink" title="jsp常用标签"></a>jsp常用标签</h3><h4 id="a-jsp-静态包含"><a href="#a-jsp-静态包含" class="headerlink" title="a)jsp 静态包含"></a>a)jsp 静态包含</h4><p><code>&lt;%@include file=&quot;&quot; %&gt;就是静态包含</code></p><p><font title = "blue">主题include示例</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--   &lt;%<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span> %&gt;就是静态包含</span><br><span class="line">        file 属性指定你要包含的jsp页面的路径</span><br><span class="line">        地址中第一个斜杠 / 表示为 http:<span class="comment">//ip:port/工程路径/ 映射到代码的web目录</span></span><br><span class="line">        --%&gt;</span><br><span class="line">        头部信息&lt;br&gt;</span><br><span class="line">        主题内容&lt;br&gt;</span><br><span class="line">&lt;%--静态包含的特点：</span><br><span class="line"><span class="number">1</span>，静态包含不会翻译被包含的jsp页面。</span><br><span class="line"><span class="number">2</span>，静态包含其实是把被包含的jsp页面的代码拷贝到包含的位置执行输出。--%&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;/main/footer.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><font title = "blue">页脚footer.jsp示例</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        页脚信息升级修改版&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="b-jsp-动态包含"><a href="#b-jsp-动态包含" class="headerlink" title="b)jsp 动态包含"></a>b)jsp 动态包含</h4><blockquote><p><code>&lt;jsp:include page=&quot;&quot;&gt;&lt;/jsp:include&gt; 这是动态包含</code><br>page 属性是指定你要包含的 jsp 页面的路径<br>动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置</p></blockquote><p>动态包含的特点：<br>1、动态包含会把包含的 jsp 页面也翻译成为 java 代码<br>2、动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出。<br>JspRuntimeLibrary.include(request, response, “&#x2F;include&#x2F;footer.jsp”, out, false);<br>3、动态包含，还可以传递参数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;/main/footer.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;zzt&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><p><font title = "green">动态包含的底层原理</font></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211122180736702.png" alt="image-20211122180736702"></p><h4 id="c-jsp-标签-转发"><a href="#c-jsp-标签-转发" class="headerlink" title="c)jsp 标签-转发"></a>c)jsp 标签-转发</h4><blockquote><p><code>&lt;jsp:forward:page=&quot;&quot;&gt;&lt;/jsp:forward&gt;</code> 是请求转发标签，它的功能就是请求转发</p><p>page 属性设置请求转发的路径</p><p><code>&lt;jsp:forward page=&quot;/scope2.jsp&quot;&gt;&lt;/jsp:forward&gt;</code></p></blockquote><h3 id="练习二：jsp-输出一个表格，里面有-10-个学生信息。"><a href="#练习二：jsp-输出一个表格，里面有-10-个学生信息。" class="headerlink" title="练习二：jsp 输出一个表格，里面有 10 个学生信息。"></a>练习二：jsp 输出一个表格，里面有 10 个学生信息。</h3><p>利用请求重定向，html–》servlet–》jsp–》客户端</p><p><font title = "blue">SearchStudent.html</font></p><p><code>&lt;a href=&quot;http://localhost:8080/jsp/searchServlet&quot;&gt;获取学生数据&lt;/a&gt;</code></p><p><font title = "blue">Student类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id, String name, <span class="type">int</span> age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font title = "blue">SearchServlet</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//获取请求的参数</span></span><br><span class="line">    <span class="comment">// 发 sql 语句查询学生的信息</span></span><br><span class="line">    <span class="comment">// 使用 for 循环生成查询到的数据做模拟</span></span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(t,<span class="string">&quot;student&quot;</span>+t,t+<span class="number">10</span>,<span class="string">&quot;address&quot;</span>+t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存查询到的结果（学生信息）到 request 域中</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;studentsList&quot;</span>,students);</span><br><span class="line">    <span class="comment">//请求转发给 SearchStudent.jsp</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/test/SearchStudent.jsp&quot;</span>).forward(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font title = "blue">SearchStudent.jsp 页面</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.izumi.test.Student&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Pixar</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">11</span>/<span class="number">22</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">41</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        table&#123;</span><br><span class="line">            border: black 1px solid;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            width: 650px;</span><br><span class="line">        &#125;</span><br><span class="line">        tr,td&#123;</span><br><span class="line">            border: black 1px solid;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--    练习二：jsp 输出一个表格，里面有 <span class="number">10</span> 个学生信息--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;Student&gt; students = (List&lt;Student&gt;) request.getAttribute(<span class="string">&quot;studentsList&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;学号&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;地址&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%<span class="keyword">for</span> (Student student : students) &#123;%&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getId()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getName()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getAge()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getAddress()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;修改、删除&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">   &lt;% &#125;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="什么是Listenner监听器"><a href="#什么是Listenner监听器" class="headerlink" title="什么是Listenner监听器"></a>什么是Listenner监听器</h3><p>1、Listener 监听器它是 JavaWeb 的三大组件之一。</p><p>JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监 听器。</p><p>2、Listener 它是 JavaEE 的规范，就是接口</p><p>3、监听器的作用是，监听某种事物的变化。然后通过回调函数，</p><p>反馈给客户（程序）去做一些相应的处理。</p><h4 id="ServletContextListener监听"><a href="#ServletContextListener监听" class="headerlink" title="ServletContextListener监听"></a>ServletContextListener监听</h4><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁。</p><p>ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁。</p><p>监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。</p><p>两个方法分别是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletContextListener</span> <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在 ServletContext 对象创建之后马上调用，做初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在 ServletContext 对象销毁之后调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用 ServletContextListener 监听器监听 ServletContext 对象。</p><p><font title = "green">使用步骤如下： </font></p><ol><li>编写一个类去实现 <span alt ="emp">ServletContextListener</span></li><li>实现其两个回调方法</li><li>到 web.xml 中去配置监听器</li></ol><p>实现ServletContextListener  并实现其两个回调方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;listener被创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;listener被销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>到 web.xml 中去配置监听器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.izumi.listener.MyServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h3 id="a-什么是-EL-表达式，EL-表达式的作用"><a href="#a-什么是-EL-表达式，EL-表达式的作用" class="headerlink" title="a)什么是 EL 表达式，EL 表达式的作用?"></a>a)什么是 EL 表达式，EL 表达式的作用?</h3><blockquote><p>EL 表达式的全称是：Expression Language。是表达式语言。<br>EL 表达式有什么作用：EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。<br>因为 EL 表达式在输出数据的时候，要比 jsp 的表达式脚本要简洁很多</p></blockquote><p><font>EL表达式的格式</font>： <code>$&#123;表达式&#125;</code></p><p>EL 表达式在输出 null 值的时候，输出的是空串。jsp 表达式脚本输出 null 值的时候，输出的是 null</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        输出值</span><br><span class="line">        &lt;%  request.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;值&quot;</span>);%&gt;&lt;br&gt;</span><br><span class="line">        jsp输出：&lt;%=request.getAttribute(<span class="string">&quot;key&quot;</span>)%&gt;</span><br><span class="line">        EL表达式输出：$&#123;key&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="b-EL-表达式搜索域数据的顺序"><a href="#b-EL-表达式搜索域数据的顺序" class="headerlink" title="b)EL 表达式搜索域数据的顺序"></a>b)EL 表达式搜索域数据的顺序</h3><blockquote><p>EL 表达式主要是在 jsp 页面中输出数据。 主要是输出域对象中的数据。 当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">            pageContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;pageContext&quot;</span>);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            session.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;session&quot;</span>);</span><br><span class="line">            application.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;application&quot;</span>);</span><br><span class="line">        %&gt;</span><br><span class="line">        $&#123;key&#125;</span><br></pre></td></tr></table></figure><h3 id="c-EL-表达式输出-Bean-的普通属性，数组属性。List-集-合属性，map-集合属性"><a href="#c-EL-表达式输出-Bean-的普通属性，数组属性。List-集-合属性，map-集合属性" class="headerlink" title="c)EL 表达式输出 Bean 的普通属性，数组属性。List 集 合属性，map 集合属性"></a>c)EL 表达式输出 Bean 的普通属性，数组属性。List 集 合属性，map 集合属性</h3><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String[] phone;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; cities;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--i. 需求——输出 Person 类中普通属性，数组属性。list 集合属性和 map 集合属性。--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;Goose House&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        person.setCities(list);</span><br><span class="line">        String [] strings =&#123;<span class="string">&quot;163&quot;</span>,<span class="string">&quot;185&quot;</span>,<span class="string">&quot;123&quot;</span>&#125;;</span><br><span class="line">        person.setPhone(strings);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        person.setMap(map);</span><br><span class="line"></span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;p&quot;</span>,person);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;%--输出内容--%&gt;</span><br><span class="line">输出person：$&#123;p&#125;&lt;br&gt;</span><br><span class="line">输出person的名字：$&#123;p.name&#125;&lt;br&gt;</span><br><span class="line">输出person的所有城市(List集合)：$&#123;p.cities&#125;&lt;br&gt;</span><br><span class="line">输出person的个别城市(List集合)：$&#123;p.cities[<span class="number">0</span>]&#125;&lt;br&gt;</span><br><span class="line">输出person的map：$&#123;p.map&#125;&lt;br&gt;</span><br><span class="line">输出person的个别map：$&#123;p.map.key2&#125;&lt;br&gt;</span><br><span class="line">&lt;%--这里可以看出只要 bean类里面有 get方法，就可以取到值--%&gt;</span><br><span class="line">输出person的age：$&#123;p.age&#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="d-EL-表达式——运算"><a href="#d-EL-表达式——运算" class="headerlink" title="d)EL 表达式——运算"></a>d)EL 表达式——运算</h3><h4 id="1）关系运算"><a href="#1）关系运算" class="headerlink" title="1）关系运算"></a>1）关系运算</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211123110119533.png" alt="image-20211123110119533"></p><h4 id="2）逻辑运算"><a href="#2）逻辑运算" class="headerlink" title="2）逻辑运算"></a>2）逻辑运算</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211123110158336.png" alt="image-20211123110158336"></p><h4 id="3）算术运算"><a href="#3）算术运算" class="headerlink" title="3）算术运算"></a>3）算术运算</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211123110240007.png" alt="image-20211123110240007"></p><h4 id="i-empty-运算"><a href="#i-empty-运算" class="headerlink" title="i. empty 运算"></a>i. empty 运算</h4><blockquote><p>empty 运算可以判断一个数据是否为空，如果为空，则输出 true,不为空输出 false。</p></blockquote><p><font title = "blue">以下几种情况为空： </font></p><p>1、值为 null 值的时候，为空</p><p>2、值为空串的时候，为空</p><p>3、值是 Object 类型数组，长度为零的时候</p><p>4、list 集合，元素个数为零</p><p>5、map 集合，元素个数为零</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 1、值为 null 值的时候，为空</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyNull&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 2、值为空串的时候，为空</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyStr&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 3、值是 Object 类型数组，长度为零的时候</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyArr&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"><span class="comment">// 4、list 集合，元素个数为零</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// list.add(&quot;abc&quot;);</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyList&quot;</span>, list);</span><br><span class="line"><span class="comment">// 5、map 集合，元素个数为零</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"><span class="comment">// map.put(&quot;key1&quot;, &quot;value1&quot;);</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyMap&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; empty emptyNull &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyStr &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyArr &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyList &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyMap &#125; &lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="ii-三元运算"><a href="#ii-三元运算" class="headerlink" title="ii. 三元运算"></a>ii. 三元运算</h4><blockquote><p>表达式 1？表达式 2：表达式 3</p></blockquote><p>如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值</p><p><code>$&#123;12==12?&quot;你赢了！&quot;:&quot;你输了&quot;&#125;</code></p><h4 id="iii-“-”点运算-和-中括号运算符"><a href="#iii-“-”点运算-和-中括号运算符" class="headerlink" title="iii. “.”点运算 和 [] 中括号运算符"></a>iii. “.”点运算 和 [] 中括号运算符</h4><blockquote><p>.点运算，可以输出 Bean 对象中某个属性的值。</p><p>[]中括号运算，可以输出有序集合中某个元素的值。</p><p>并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key,</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a.a.a&quot;</span>, <span class="string">&quot;aaaValue&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;b+b+b&quot;</span>, <span class="string">&quot;bbbValue&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;c-c-c&quot;</span>, <span class="string">&quot;cccValue&quot;</span>);</span><br><span class="line">request.setAttribute(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">  </span><br><span class="line">$&#123; map[<span class="string">&#x27;a.a.a&#x27;</span>] &#125; &lt;br&gt;</span><br><span class="line">$&#123; map[<span class="string">&quot;b+b+b&quot;</span>] &#125; &lt;br&gt;</span><br><span class="line">$&#123; map[<span class="string">&#x27;c-c-c&#x27;</span>] &#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="e-EL-表达式的-11-个隐含对象"><a href="#e-EL-表达式的-11-个隐含对象" class="headerlink" title="e)EL 表达式的 11 个隐含对象"></a>e)EL 表达式的 11 个隐含对象</h3><p>EL 个达式中 11 个隐含对象，是 EL表达式自己定义的，可以直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">变量                       类型                 作用</span><br><span class="line">pageContext         PageContextImpl          它可以获取 jsp 中的九大内置对象</span><br><span class="line"></span><br><span class="line">pageScope           Map&lt;String,Object&gt;       它可以获取 pageContext 域中的数据</span><br><span class="line">requestScope        Map&lt;String,Object&gt;       它可以获取 Request 域中的数据</span><br><span class="line">sessionScope        Map&lt;String,Object&gt;       它可以获取 Session 域中的数据</span><br><span class="line">applicationScope    Map&lt;String,Object&gt;       它可以获取 ServletContext 域中的数据</span><br><span class="line"></span><br><span class="line">param               Map&lt;String,String&gt;       它可以获取请求参数的值</span><br><span class="line">paramValues         Map&lt;String,String[]&gt;     它也可以获取请求参数的值，获取多个值的时候使用。</span><br><span class="line"></span><br><span class="line">header              Map&lt;String,String&gt;       它可以获取请求头的信息</span><br><span class="line">headerValues        Map&lt;String,String[]&gt;     它可以获取请求头的信息，它可以获取多个值的情况</span><br><span class="line"></span><br><span class="line">cookie              Map&lt;String,Cookie&gt;       它可以获取当前请求的 Cookie 信息</span><br><span class="line"></span><br><span class="line">initParam           Map&lt;String,String&gt;  它可以获取在 web.xml 中配置的&lt;context-param&gt;上下文参数</span><br></pre></td></tr></table></figure><h4 id="EL获取四个特定域中的属性"><a href="#EL获取四个特定域中的属性" class="headerlink" title="EL获取四个特定域中的属性"></a>EL获取四个特定域中的属性</h4><p>pageScope&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; pageContext 域</p><p>requestScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Request 域</p><p>sessionScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Session 域</p><p>applicationScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ServletContext 域</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;pageContext&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;session&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;application&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--使用XXXScope获取四种域的属性可以解决 当域对象的key相同时，通过域对象获取值时默认取最小域范围的属性的值的问题--%&gt;</span><br><span class="line">$&#123;applicationScope.key1&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="ii-pageContext-对象的使用"><a href="#ii-pageContext-对象的使用" class="headerlink" title="ii. pageContext 对象的使用"></a>ii. pageContext 对象的使用</h4><ol><li>协议：</li><li>服务器 ip：</li><li>服务器端口：</li><li>获取工程路径：</li><li>获取请求方法：</li><li>获取客户端 ip 地址：</li><li>获取会话的 id 编号</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--    request.getScheme();获取请求的协议</span><br><span class="line">        request.getServerName()获取服务器的ip或域名</span><br><span class="line">        request.getServerPort()获取服务器</span><br><span class="line">        request.getContextPath() 获取工程路径</span><br><span class="line">        request.getMethod() 获取请求方法</span><br><span class="line">        request.getMethod() 获取请求方法</span><br><span class="line">        request.getRemoteHost() 获取客户端ip地址</span><br><span class="line">        session.getId() 获取会话id编号</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%=request.getRemoteHost()%&gt;&lt;br&gt;</span><br><span class="line">&lt;%=session.getId()%&gt;&lt;br&gt;</span><br><span class="line"><span class="number">1.</span> 协议：$&#123;pageContext.request.scheme&#125;&lt;br&gt;</span><br><span class="line"><span class="number">2.</span> 服务器 ip：$&#123;pageContext.request.serverName&#125;&lt;br&gt;</span><br><span class="line"><span class="number">3.</span> 服务器端口：$&#123;pageContext.request.serverPort&#125;&lt;br&gt;</span><br><span class="line"><span class="number">4.</span> 获取工程路径：$&#123;pageContext.request.contextPath&#125;&lt;br&gt;</span><br><span class="line"><span class="number">5.</span> 获取请求方法：$&#123;pageContext.request.method&#125;&lt;br&gt;</span><br><span class="line"><span class="number">6.</span> 获取客户端 ip 地址：$&#123;pageContext.request.remoteHost&#125;&lt;br&gt;</span><br><span class="line"><span class="number">7.</span> 获取会话的 id 编号$&#123;pageContext.session.id&#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="EL其他隐含对象的使用"><a href="#EL其他隐含对象的使用" class="headerlink" title="EL其他隐含对象的使用"></a>EL其他隐含对象的使用</h4><p>param Map&lt;String,String&gt; 它可以获取请求参数的值</p><p>paramValues Map&lt;String,String[]&gt;它也可以获取请求参数的值，获取多个值的时候使用。</p><p><strong>请求地址：</strong></p><p><a href="http://localhost:8080/EL_JSTL/EL_other_obj.jsp?username=root&password=1234&hobby=java&hobby=cpp">http://localhost:8080/EL_JSTL/EL_other_obj.jsp?username=root&amp;password=1234&amp;hobby=java&amp;hobby=cpp</a></p><p><font title = "blue">示例代码：</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出请求参数username的值：$&#123;param.username&#125;&lt;br&gt;</span><br><span class="line">  输出请求参数password的值：$&#123;param.password&#125;&lt;br&gt;</span><br><span class="line">  输出请求参数password的值：$&#123;paramValues.password[<span class="number">0</span>]&#125;&lt;br&gt;</span><br><span class="line">  输出请求参数hobby的值：$&#123;paramValues.hobby[<span class="number">0</span>]&#125;&lt;br&gt;</span><br><span class="line">  输出请求参数hobby的值：$&#123;paramValues.hobby[<span class="number">1</span>]&#125;&lt;br&gt;</span><br></pre></td></tr></table></figure><hr><p>​header Map&lt;String,String&gt; 它可以获取请求头的信息</p><p>headerValues  Map&lt;String,String[]&gt; 它可以获取请求头的信息，它可以获取多个值的情况</p><p><font title = "blue">示例代码：</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取请求头【User-Agent】$&#123;header[<span class="string">&#x27;User-Agent&#x27;</span>]&#125;&lt;br&gt;</span><br><span class="line">获取请求头【Accept-Language】$&#123;header[<span class="string">&#x27;Accept-Language&#x27;</span>]&#125;&lt;br&gt;</span><br><span class="line">获取请求头【Accept-Language】$&#123;headerValues[<span class="string">&#x27;Accept-Language&#x27;</span>][<span class="number">0</span>]&#125;</span><br></pre></td></tr></table></figure><hr><p>cookie Map&lt;String,Cookie&gt;它可以获取当前请求的 Cookie</p><p><font title = "blue">示例代码：</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取 cookie 的 name：$&#123;cookie.JSESSIONID.name&#125; &lt;br&gt;</span><br><span class="line">获取 cookie 的 value：$&#123;cookie.JSESSIONID.value&#125;&lt;br&gt;</span><br></pre></td></tr></table></figure><hr><p>initParam Map&lt;String,String&gt; 它可以获取在 web.xml 中配置的上下文参数 web.xml 中的配置：</p><p><font title="yellow">配置web.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font title = "blue">示例代码：</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出&amp;lt;Context-param&amp;gt;的 username的值：$&#123;initParam.username&#125;&lt;br&gt;</span><br><span class="line">输出&amp;lt;Context-param&amp;gt;的 ip的值：$&#123;initParam.ip&#125;</span><br></pre></td></tr></table></figure><h2 id="JSTL标签库（次重点！！）"><a href="#JSTL标签库（次重点！！）" class="headerlink" title="JSTL标签库（次重点！！）"></a>JSTL标签库（次重点！！）</h2><blockquote><p>JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的 JSP 标 签库。 EL 表达式主要是为了替换 jsp 中的表达式脚本，而标签库则是为了替换代码脚本。这样使得整个 jsp 页面 变得更佳简洁</p></blockquote><p>JSTL 由五个不同功能的标签库组成。</p><table><thead><tr><th>功能范围</th><th>URI</th><th>前缀</th></tr></thead><tbody><tr><td>核心标签库–重点</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>格式化</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>函数</td><td><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td></tr><tr><td>数据库(不使用)</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>XML(不使用)</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr></tbody></table><p>在 jsp 标签库中使用 taglib 指令引入标签库 (idea会自动导入)</p><p><font>CORE 标签库</font><br><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code><br><font>XML 标签库</font><br><code>&lt;%@ taglib prefix=&quot;x&quot; uri=&quot;http://java.sun.com/jsp/jstl/xml&quot; %&gt;</code><br><font>FMT 标签库</font><br><code>&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</code><br><font>SQL 标签库</font><br><code>&lt;%@ taglib prefix=&quot;sql&quot; uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; %&gt;</code><br><font>FUNCTIONS 标签库</font><br><code>&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %</code></p><h3 id="f-JSTL-标签库的使用步骤"><a href="#f-JSTL-标签库的使用步骤" class="headerlink" title="f) JSTL 标签库的使用步骤"></a>f) JSTL 标签库的使用步骤</h3><p>1、先导入 jstl 标签库的 jar 包。</p><p>taglibs-standard-impl-1.2.1.jar</p><p>taglibs-standard-spec-1.2.1.jar</p><p>2、第二步，使用 taglib 指令引入标签库（idea会自动导入）。</p><h3 id="core-核心库使用"><a href="#core-核心库使用" class="headerlink" title="core 核心库使用"></a>core 核心库使用</h3><p>i. <code>&lt;c:set /&gt;</code>（使用很少）</p><p>作用：set 标签可以往域中保存数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">i.&lt;c:set /&gt;</span><br><span class="line">作用：set 标签可以往域中保存数据</span><br><span class="line">域对象.setAttribute(key,value);</span><br><span class="line">scope 属性设置保存到哪个域</span><br><span class="line">page 表示 PageContext 域（默认值）</span><br><span class="line">request 表示 Request 域</span><br><span class="line">session 表示 Session 域</span><br><span class="line">application 表示 ServletContext 域</span><br><span class="line"><span class="keyword">var</span> 属性设置 key 是多少</span><br><span class="line">value 属性设置值</span><br><span class="line">--%&gt;</span><br><span class="line">保存之前：$&#123; sessionScope.abc &#125; &lt;br&gt;</span><br><span class="line">保存之前：$&#123; requestScope.key&#125; &lt;br&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">&quot;session&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;abc&quot;</span> value=<span class="string">&quot;abcValue&quot;</span>/&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">&quot;request&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;key&quot;</span> value=<span class="string">&quot;keyValue&quot;</span>/&gt;</span><br><span class="line">保存之后：$&#123; sessionScope.abc &#125; &lt;br&gt;</span><br><span class="line">保存之后：$&#123; requestScope.key&#125; &lt;br&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ii. <code>&lt;c:if /&gt;</code> if 标签</p><p>用来做 if 判断</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">ii.&lt;c:<span class="keyword">if</span> /&gt;</span><br><span class="line"><span class="keyword">if</span> 标签用来做 <span class="keyword">if</span> 判断。</span><br><span class="line">test 属性表示判断的条件（使用 EL 表达式输出）</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123; 12 == 12 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h1&gt;<span class="number">12</span> 等于 <span class="number">12</span>&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123; 12 != 12 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h1&gt;<span class="number">12</span> 不等于 <span class="number">12</span>&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>iii. <code>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;</code>标签</p><p>作用：多路判断。跟 switch … case …. default 非常接近</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</span><br><span class="line">作用：多路判断。跟 <span class="keyword">switch</span> ... <span class="keyword">case</span> .... <span class="keyword">default</span> 非常接近</span><br><span class="line">choose 标签开始选择判断</span><br><span class="line">when 标签表示每一种判断情况</span><br><span class="line">test 属性表示当前这种判断情况的值</span><br><span class="line">otherwise 标签表示剩下的情况</span><br><span class="line">&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：</span><br><span class="line"><span class="number">1</span>、标签里不能使用 html 注释，要使用 jsp 注释</span><br><span class="line"><span class="number">2</span>、when 标签的父标签一定要是 choose 标签</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">&quot;height&quot;</span>, <span class="number">180</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;%-- 不能使用 html 注释，只能使用jsp注释 --%&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123; requestScope.height &gt; 190 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h2&gt;小巨人&lt;/h2&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123; requestScope.height &gt; 180 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h2&gt;很高&lt;/h2&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123; requestScope.height &gt; 170 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h2&gt;还可以&lt;/h2&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:otherwise&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 160&#125;&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;大于 <span class="number">160</span>&lt;/h3&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 150&#125;&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;大于 <span class="number">150</span>&lt;/h3&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 140&#125;&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;大于 <span class="number">140</span>&lt;/h3&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:otherwise&gt;</span><br><span class="line">其他小于 <span class="number">140</span></span><br><span class="line">&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>iv.  <code>&lt;c:forEach&gt;</code></p><p>作用：遍历输出使用。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--<span class="number">1.</span>遍历 <span class="number">1</span> 到 <span class="number">10</span>，输出</span><br><span class="line">begin 属性设置开始的索引</span><br><span class="line">end 属性设置结束的索引</span><br><span class="line"><span class="keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;10&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;第$&#123;i&#125;行&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>2、 遍历 Object 数组</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%-- <span class="number">2.</span>遍历 Object 数组</span><br><span class="line"><span class="keyword">for</span> (Object item: arr)</span><br><span class="line">items 表示遍历的数据源（遍历的集合）</span><br><span class="line"><span class="keyword">var</span> 表示当前遍历到的数据</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">&quot;arr&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;18610541354&quot;</span>,<span class="string">&quot;18688886666&quot;</span>,<span class="string">&quot;18699998888&quot;</span>&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123; requestScope.arr &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">$&#123; item &#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>3、 遍历 Map 集合</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line"><span class="comment">// for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123; requestScope.map &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;entry&quot;</span>&gt;</span><br><span class="line">&lt;h1&gt;$&#123;entry.key&#125; = $&#123;entry.value&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>4、遍历 List 集合—list 中存放 Student 类，有属性：编号，用户名，密码，年龄， 电话信息</p><p>css表格样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">table</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">border</span>: solid <span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: solid <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>遍历list代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--遍历list--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    ArrayList&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(i,<span class="string">&quot;student&quot;</span>+i,<span class="string">&quot;pwd&quot;</span>+i,i+<span class="number">10</span>,<span class="string">&quot;phone&quot;</span>+i));</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;list&quot;</span>,students);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;电话&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;list.id&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;list.username&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;list.password&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;list.age&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;list.phone&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;修改、删除&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p><font>补充说明：</font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">items 表示遍历的集合</span><br><span class="line"><span class="keyword">var</span> 表示遍历到的数据</span><br><span class="line">begin 表示遍历的开始索引值</span><br><span class="line">end 表示结束的索引值</span><br><span class="line">step 属性表示遍历的步长值 <span class="number">2</span>就表示 i+=<span class="number">2</span>; ，默认是<span class="number">1</span></span><br><span class="line">varStatus 属性表示当前遍历到的数据的状态</span><br><span class="line"><span class="keyword">for</span>（<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i+=<span class="number">2</span>）</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;2&quot;</span> end=<span class="string">&quot;7&quot;</span> step=<span class="string">&quot;2&quot;</span> varStatus=<span class="string">&quot;status&quot;</span> items=<span class="string">&quot;$&#123;requestScope.stus&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;stu&quot;</span></span><br></pre></td></tr></table></figure><p>varStatus &#x3D; “status”说明：</p><p>javax.servlet.jsp.jstl.core.LoopTagSupport$1Status</p><p>class Status implements  LoopTagStatus</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211123202009762.png" alt="image-20211123202009762"></p><h2 id="文件的上传和下载（！！！重点）"><a href="#文件的上传和下载（！！！重点）" class="headerlink" title="文件的上传和下载（！！！重点）"></a>文件的上传和下载（！！！重点）</h2><h3 id="文件的上传介绍"><a href="#文件的上传介绍" class="headerlink" title="文件的上传介绍"></a>文件的上传介绍</h3><p>1、要有一个 form 标签，method&#x3D;post 请求<br>2、form 标签的 encType 属性值必须为 multipart&#x2F;form-data 值<br>3、在 form 标签中使用 input type&#x3D;file 添加上传的文件<br>4、编写服务器代码（Servlet 程序）接收，处理上传的数据。</p><p>encType&#x3D;multipart&#x2F;form-data 表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼<br>接，然后以二进制流的形式发送给服务器</p><h4 id="文件上传-HTTP协议的说明"><a href="#文件上传-HTTP协议的说明" class="headerlink" title="文件上传 HTTP协议的说明"></a>文件上传 HTTP协议的说明</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211123204925008.png" alt="image-20211123204925008"></p><h4 id="commons-fileupload-jar-常用-API-介绍说明"><a href="#commons-fileupload-jar-常用-API-介绍说明" class="headerlink" title="commons-fileupload.jar 常用 API 介绍说明"></a>commons-fileupload.jar 常用 API 介绍说明</h4><p>commons-fileupload.jar 需要依赖 commons-io.jar 这个包，</p><p>所以两个包我们都要引入。</p><p>第一步，就是需要导入两个 jar 包：</p><p>commons-fileupload-1.2.1.jar</p><p>commons-io-1.4.jar</p><p>ServletFileUpload 类，用于解析上传的数据。</p><p>FileItem 类，表示每一个表单项。</p><p>判断当前上传的数据格式是否是多段的格式。</p><p>boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);</p><p><strong>解析上传的数据</strong><br>public List<FileItem> parseRequest(HttpServletRequest request)</p><p><strong>判断当前这个表单项，是否是普通的表单项。还是上传的文件类型</strong></p><p>boolean FileItem.isFormField()<br>true 表示普通类型的表单项<br>false 表示上传的文件类型</p><p><strong>获取表单项的 name 属性值</strong><br>String FileItem.getFieldName()</p><p><strong>获取当前表单项的值。</strong><br>String FileItem.getString()</p><p><strong>获取上传的文件名</strong><br>String FileItem.getName();</p><p><strong>将上传的文件写到 参数 file 所指向抽硬盘位置 。</strong><br>void FileItem.write( file );</p><h4 id="fileupload-类库的使用："><a href="#fileupload-类库的使用：" class="headerlink" title="fileupload 类库的使用："></a>fileupload 类库的使用：</h4><p>上传文件的表单</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8080/EL_JSTL/uploadServlet&quot;</span> method=<span class="string">&quot;post&quot;</span> encType=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    用户名&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">    头像：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;photo&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><font title="blue">解析上传的数据的代码：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//1 先判断上传的数据是否多段数据（只有是多段的数据，才是文件上传的）</span></span><br><span class="line">       <span class="keyword">if</span> (ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">           <span class="comment">// 创建 FileItemFactory 工厂实现类</span></span><br><span class="line">           <span class="type">FileItemFactory</span> <span class="variable">fileItemFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">           <span class="comment">// 创建用于解析上传数据的工具类 ServletFileUpload</span></span><br><span class="line">           <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(fileItemFactory);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 解析上传的数据，得到每一个表单项 FileItem</span></span><br><span class="line">               List&lt;FileItem&gt; list = servletFileUpload.parseRequest(request);</span><br><span class="line">               <span class="comment">// 循环判断，每一个表单项，是普通类型，还是上传的文件</span></span><br><span class="line">               <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (fileItem.isFormField())&#123; <span class="comment">//普通表单项</span></span><br><span class="line">                       System.out.println(<span class="string">&quot;表单项name属性值：&quot;</span>+fileItem.getFieldName());</span><br><span class="line">                       <span class="comment">//解决乱码问题，传入 参数 UTF-8</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;表单项的value属性值&quot;</span>+fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">//上传的文件</span></span><br><span class="line">                   System.out.println(<span class="string">&quot;表单项的 name 属性值：&quot;</span> + fileItem.getFieldName());</span><br><span class="line">                       System.out.println(<span class="string">&quot;上传的文件名：&quot;</span> + fileItem.getName());</span><br><span class="line">                       fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\&quot;</span> + fileItem.getName()));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="文件下载操作"><a href="#文件下载操作" class="headerlink" title="文件下载操作"></a>文件下载操作</h4><p><strong>下载的常用 API 说明：</strong></p><p>response.getOutputStream();</p><p>servletContext.getResourceAsStream();</p><p>servletContext.getMimeType();</p><p>response.setContentType();</p><p><code>response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; fileName=1.jpg&quot;); </code></p><p>response.setHeader(“Content-Disposition”, “attachment; fileName&#x3D;1.jpg”);<br>这个响应头告诉浏览器。这是需要下载的。而 attachment 表示附件，也就是下载的一个文件。fileName&#x3D;后面，表示下载的文件名。</p><p>完成上面的两个步骤，下载文件是没问题了。但是如果我们要下载的文件是中文名的话。你会发现，下载无法正确显示出正确的中文名。<br>原因是在响应头中，不能包含有中文字符，只能包含 ASCII 码</p><p><font title="blue">文件下载代码：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Download</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadFileName</span> <span class="operator">=</span> <span class="string">&quot;hero.png&quot;</span>;</span><br><span class="line">        <span class="comment">// 2、读取要下载的文件内容 (通过 ServletContext 对象可以读取)</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">// 获取要下载的文件类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> servletContext.getMimeType(<span class="string">&quot;/file/&quot;</span> + downloadFileName);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载的文件类型：&quot;</span>+mimeType);</span><br><span class="line">        <span class="comment">// 4、在回传前，通过响应头告诉客户端返回的数据类型</span></span><br><span class="line">        resp.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、还要告诉客户端收到的数据是用于下载使用（还是使用响应头）</span></span><br><span class="line">        <span class="comment">// Content-Disposition 响应头，表示收到的数据怎么处理</span></span><br><span class="line">        <span class="comment">// attachment 表示附件，表示下载使用</span></span><br><span class="line">        <span class="comment">// filename= 表示指定下载的文件名</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+downloadFileName);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * /斜杠被服务器解析表示地址为 http://ip:prot/工程名/ 映射 到代码的 Web 目录</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/file/&quot;</span> + downloadFileName);</span><br><span class="line">        <span class="comment">//获取响应输出流</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        <span class="comment">// 3、把下载的文件内容回传给客户端</span></span><br><span class="line">        <span class="comment">// 读取输入流中全部的数据，复制给输出流，输出给客户端</span></span><br><span class="line">        IOUtils.copy(inputStream,outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="附件中文名乱码问题解决方案："><a href="#附件中文名乱码问题解决方案：" class="headerlink" title="附件中文名乱码问题解决方案："></a>附件中文名乱码问题解决方案：</h4><h5 id="方案一：URLEncoder-解决-IE-和谷歌浏览器的-附件中-文名问题。-掌握"><a href="#方案一：URLEncoder-解决-IE-和谷歌浏览器的-附件中-文名问题。-掌握" class="headerlink" title="方案一：URLEncoder 解决 IE 和谷歌浏览器的 附件中 文名问题。(掌握)"></a>方案一：URLEncoder 解决 IE 和谷歌浏览器的 附件中 文名问题。(掌握)</h5><blockquote><p> 如果客户端浏览器是 IE 浏览器 或者 是谷歌浏览器。(火狐现在已经支持)<br> 我们需要使用 URLEncoder 类先对中文名进行 UTF-8 的编码 操作。<br> 因为 IE 浏览器和谷歌浏览器收到含有编码后的字符串后会以 UTF-8 字符集进行解码显示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把中文名进行 UTF-8 编码操作。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="string">&quot;中文.jpg&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 然后把编码后的字符串设置到响应头中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, str);</span><br></pre></td></tr></table></figure><h5 id="方案二：（了解）BASE64-编解码-解决-火狐浏览器的附件中文名问-题-现在火狐浏览器已支持-URLEncode"><a href="#方案二：（了解）BASE64-编解码-解决-火狐浏览器的附件中文名问-题-现在火狐浏览器已支持-URLEncode" class="headerlink" title="方案二：（了解）BASE64 编解码 解决 火狐浏览器的附件中文名问 题(现在火狐浏览器已支持 URLEncode)"></a>方案二：（了解）BASE64 编解码 解决 火狐浏览器的附件中文名问 题(现在火狐浏览器已支持 URLEncode)</h5><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果客户端浏览器是火狐浏览器。 那么我们需要对中文名进行 BASE64 的编码操作。</span><br><span class="line">这时候需要把请求头 Content-Disposition: attachment; filename=中文名</span><br><span class="line">编码成为：Content-Disposition: attachment; filename==?charset?B?xxxxx?=</span><br><span class="line"></span><br><span class="line">=?charset?B?xxxxx?= 现在我们对这段内容进行一下说明。</span><br><span class="line">=? 表示编码内容的开始</span><br><span class="line">charset 表示字符集</span><br><span class="line">B 表示 BASE64 编码</span><br><span class="line">xxxx 表示文件名 BASE64 编码后的内容</span><br><span class="line">?= 表示编码内容的结束</span><br></pre></td></tr></table></figure><p><strong>Base64编解码操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;这是需要 Base64 编码的内容&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 Base64 编码器</span></span><br><span class="line"><span class="type">BASE64Encoder</span> <span class="variable">base64Encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br><span class="line"><span class="comment">// 执行 Base64 编码操作</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encodedString</span> <span class="operator">=</span> base64Encoder.encode(content.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">System.out.println( encodedString );</span><br><span class="line"><span class="comment">// 创建 Base64 解码器</span></span><br><span class="line"><span class="type">BASE64Decoder</span> <span class="variable">base64Decoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>();</span><br><span class="line"><span class="comment">// 解码操作</span></span><br><span class="line"><span class="type">byte</span>[] bytes = base64Decoder.decodeBuffer(encodedString);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因为火狐使用的是 BASE64 的编解码方式还原响应中的汉字。所以需要使用 BASE64Encoder 类进行编码操作。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用下面的格式进行 BASE64 编码后</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;attachment; fileName=&quot;</span> + <span class="string">&quot;=?utf-8?B?&quot;</span></span><br><span class="line">+ <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(<span class="string">&quot;中文.jpg&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>)) + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line"><span class="comment">// 设置到响应头中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, str);</span><br></pre></td></tr></table></figure><p><strong>那么我们如何解决上面两种不同编解码方式呢。我们只需要通过判断请求头中 User-Agent 这个请求头携带过来的 浏览器信息即可判断出是什么浏览器。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">ua</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line"><span class="comment">// 判断是否是火狐浏览器</span></span><br><span class="line"><span class="keyword">if</span> (ua.contains(<span class="string">&quot;Firefox&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">// 使用下面的格式进行 BASE64 编码后</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;attachment; fileName=&quot;</span> + <span class="string">&quot;=?utf-8?B?&quot;</span></span><br><span class="line">+ <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(<span class="string">&quot;中文.jpg&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>)) + <span class="string">&quot;?=&quot;</span>;</span><br><span class="line"><span class="comment">// 设置到响应头中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, str);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 把中文名进行 UTF-8 编码操作。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="string">&quot;中文.jpg&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 然后把编码后的字符串设置到响应头中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, str);</span><br></pre></td></tr></table></figure><h2 id="书城项目-第三阶段"><a href="#书城项目-第三阶段" class="headerlink" title="书城项目-第三阶段"></a>书城项目-第三阶段</h2><h3 id="a-页面-jsp-动态化"><a href="#a-页面-jsp-动态化" class="headerlink" title="a)页面 jsp 动态化"></a>a)页面 jsp 动态化</h3><p>1、在 html 页面顶行添加 page 指令。</p><p>2、修改文件后缀名为：.jsp</p><p>3、使用 IDEA 搜索替换.html 为.jsp(快捷键：Ctrl+Shift+R)</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211124124720963.png" alt="image-20211124124720963"></p><h3 id="b-抽取页面中相同的内容"><a href="#b-抽取页面中相同的内容" class="headerlink" title="b)抽取页面中相同的内容"></a>b)抽取页面中相同的内容</h3><p><strong>i. head 中 css、jquery、base 标签</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%</span><br><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme()</span><br><span class="line">+ <span class="string">&quot;://&quot;</span></span><br><span class="line">+ request.getServerName()</span><br><span class="line">+ <span class="string">&quot;:&quot;</span></span><br><span class="line">+ request.getServerPort()</span><br><span class="line">+ request.getContextPath()</span><br><span class="line">+ <span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=basePath%&gt;</span><br><span class="line">&lt;!--写 base 标签，永远固定相对路径跳转的结果--&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">&lt;link type=<span class="string">&quot;text/css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;static/css/style.css&quot;</span> &gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;static/script/jquery-1.7.2.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>ii. 每个页面的页脚</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;bottom&quot;</span>&gt;</span><br><span class="line">&lt;span&gt;</span><br><span class="line">尚硅谷书城.Copyright &amp;copy;<span class="number">2015</span></span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>iii. 登录成功后的菜单</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;欢迎&lt;span class=<span class="string">&quot;um_span&quot;</span>&gt;韩总&lt;/span&gt;光临尚硅谷书城&lt;/span&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;../order/order.jsp&quot;</span>&gt;我的订单&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;../../index.jsp&quot;</span>&gt;注销&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;a href=<span class="string">&quot;../../index.jsp&quot;</span>&gt;返回&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>iv. manager 模块的菜单</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;book_manager.jsp&quot;</span>&gt;图书管理&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;order_manager.jsp&quot;</span>&gt;订单管理&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;../../index.jsp&quot;</span>&gt;返回商城&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="c-登录，注册错误提示，及表单回显"><a href="#c-登录，注册错误提示，及表单回显" class="headerlink" title="c)登录，注册错误提示，及表单回显"></a>c)登录，注册错误提示，及表单回显</h3><p><strong>以登录回显为示例： Servlet 程序端需要添加回显信息到 Request</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(userService.login(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,username,password,<span class="literal">null</span>))==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(request.getRemoteHost()+<span class="string">&quot; 登陆失败&quot;</span>);</span><br><span class="line">            <span class="comment">//                失败</span></span><br><span class="line">            <span class="comment">//告诉客户端错误信息，并把用户名回显</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;mes&quot;</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">            <span class="comment">//        跳回登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/pages/user/login.jsp&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><p><strong>jsp 页面，需要输出回显信息</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211124154419501.png" alt="image-20211124154419501"></p><h3 id="d-BaseServlet-的抽取"><a href="#d-BaseServlet-的抽取" class="headerlink" title="d)BaseServlet 的抽取"></a>d)BaseServlet 的抽取</h3><p>在实际的项目开发中，一个模块，一般只使用一个 Servlet 程序</p><p><strong>代码优化一：代码优化：合并 LoginServlet 和 RegistServlet 程序为 UserServlet 程序</strong></p><p><strong><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211124160631231.png" alt="image-20211124160631231"></strong></p><p><strong>优化代码二：使用反射优化大量 else if 代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;action&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取 action 业务鉴别字符串，获取相应的业务 方法反射对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest.class,</span><br><span class="line">HttpServletResponse.class);</span><br><span class="line"><span class="comment">// System.out.println(method);</span></span><br><span class="line"><span class="comment">// 调用目标业务 方法</span></span><br><span class="line">method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码优化三：抽取 BaseServlet 程序。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211124191432897.png" alt="image-20211124191432897"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;action&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取 action 业务鉴别字符串，获取相应的业务 方法反射对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest.class,</span><br><span class="line">HttpServletResponse.class);</span><br><span class="line"><span class="comment">// System.out.println(method);</span></span><br><span class="line"><span class="comment">// 调用目标业务 方法</span></span><br><span class="line">method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改其他servlet程序继承它</p><h3 id="e-数据的封装和抽取-BeanUtils-的使用"><a href="#e-数据的封装和抽取-BeanUtils-的使用" class="headerlink" title="e)数据的封装和抽取 BeanUtils 的使用"></a>e)数据的封装和抽取 BeanUtils 的使用</h3><p>BeanUtils 工具类，它可以一次性的把所有请求的参数注入到 JavaBean 中。<br>BeanUtils 工具类，经常用于把 Map 中的值注入到 JavaBean 中，或者是对象属性值的拷贝操作。<br>BeanUtils 它不是 Jdk 的类。而是第三方的工具类。所以需要导包。<br>1、导入需要的 jar 包：<br>commons-beanutils-1.8.0.jar<br>commons-logging-1.1.1.jar<br>2、编写 WebUtils 工具类使用：<br>WebUtils 工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 把 Map 中的值注入到对应的 JavaBean 属性中。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">copyParamToBean</span><span class="params">( Map value , T bean )</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;注入之前：&quot;</span> + bean);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 把所有请求的参数都注入到 user 对象中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BeanUtils.populate(bean, value);</span><br><span class="line">System.out.println(<span class="string">&quot;注入之后：&quot;</span> + bean);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="书城-第四阶段。使用-EL表达式修改表单回显"><a href="#书城-第四阶段。使用-EL表达式修改表单回显" class="headerlink" title="**书城-**第四阶段。使用 EL表达式修改表单回显"></a>**书城-**第四阶段。使用 EL表达式修改表单回显</h3><h2 id="书城-第五阶段-图书模块"><a href="#书城-第五阶段-图书模块" class="headerlink" title="书城-第五阶段-图书模块"></a>书城-第五阶段-图书模块</h2><h3 id="1、MVC-概念"><a href="#1、MVC-概念" class="headerlink" title="1、MVC 概念"></a>1、MVC 概念</h3><p>MVC 全称：Model 模型、 View 视图、 Controller 控制器。<br>MVC 最早出现在 JavaEE 三层中的 Web 层，它可以有效的指导 Web 层的代码如何有效分离，单独工作。</p><p>View 视图：只负责数据和界面的显示，不接受任何与显示数据无关的代码，便于程序员和美工的分工合作——JSP&#x2F;HTML。</p><p>Controller 控制器：只负责接收请求，调用业务层的代码处理请求，然后派发页面，是一个“调度者”的角色——Servlet。 转到某个页面。或者是重定向到某个页面。</p><p>Model 模型：将与业务逻辑相关的数据封装为具体的 JavaBean 类，其中不掺杂任何与数据处理相关的代码——JavaBean&#x2F;domain&#x2F;entity&#x2F;pojo。</p><p><strong>MVC 是一种思想</strong></p><p><strong>MVC 的理念是将软件代码拆分成为组件，单独开发，组合使用（目的还是为了降低耦合度）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211124210503267.png" alt="image-20211124210503267" style="zoom:80%;" />MVC 的作用还是为了降低耦合。让代码合理分层。方便后期升级和维护。</p><h3 id="1、图书模块"><a href="#1、图书模块" class="headerlink" title="1、图书模块"></a>1、图书模块</h3><h4 id="1-1、编写图书模块的数据库表"><a href="#1-1、编写图书模块的数据库表" class="headerlink" title="1.1、编写图书模块的数据库表"></a>1.1、编写图书模块的数据库表</h4><p>设计图书数据库表并插入测试数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">create TABLE t_book(</span><br><span class="line">id int PRIMARY KEY auto_increment,</span><br><span class="line">`name` VARCHAR(100),</span><br><span class="line">price DECIMAL(11,2),</span><br><span class="line">author VARCHAR(100),</span><br><span class="line">sales int,</span><br><span class="line">stock int,</span><br><span class="line">img_path VARCHAR(200)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">## 插入初始化测试数据</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;java 从入门到放弃&#x27; , &#x27;国哥&#x27; , 80 , 9999 , 9 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;数据结构与算法&#x27; , &#x27;严敏君&#x27; , 78.5 , 6 , 13 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;怎样拐跑别人的媳妇&#x27; , &#x27;龙伍&#x27; , 68, 99999 , 52 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;木虚肉盖饭&#x27; , &#x27;小胖&#x27; , 16, 1000 , 50 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;C++编程思想&#x27; , &#x27;刚哥&#x27; , 45.5 , 14 , 95 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;蛋炒饭&#x27; , &#x27;周星星&#x27; , 9.9, 12 , 53 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;赌神&#x27; , &#x27;龙伍&#x27; , 66.5, 125 , 535 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;Java 编程思想&#x27; , &#x27;阳哥&#x27; , 99.5 , 47 , 36 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;JavaScript 从入门到精通&#x27; , &#x27;婷姐&#x27; , 9.9 , 85 , 95 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;cocos2d-x 游戏编程入门&#x27; , &#x27;国哥&#x27; , 49, 52 , 62 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;C 语言程序设计&#x27; , &#x27;谭浩强&#x27; , 28 , 52 , 74 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;Lua 语言程序设计&#x27; , &#x27;雷丰阳&#x27; , 51.5 , 48 , 82 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;西游记&#x27; , &#x27;罗贯中&#x27; , 12, 19 , 9999 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;水浒传&#x27; , &#x27;华仔&#x27; , 33.05 , 22 , 88 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;操作系统原理&#x27; , &#x27;刘优&#x27; , 133.05 , 122 , 188 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;数据结构 java 版&#x27; , &#x27;封大神&#x27; , 173.15 , 21 , 81 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;UNIX 高级环境编程&#x27; , &#x27;乐天&#x27; , 99.15 , 210 , 810 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;javaScript 高级编程&#x27; , &#x27;国哥&#x27; , 69.15 , 210 , 810 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;大话设计模式&#x27; , &#x27;国哥&#x27; , 89.15 , 20 , 10 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line">insert into t_book(`id` , `name` , `author` , `price` , `sales` , `stock` , `img_path`)</span><br><span class="line">values(null , &#x27;人月神话&#x27; , &#x27;刚哥&#x27; , 88.15 , 20 , 80 , &#x27;static/img/default.jpg&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * from t_book;</span><br></pre></td></tr></table></figure><h4 id="1-2、编写图书模块的-JavaBean"><a href="#1-2、编写图书模块的-JavaBean" class="headerlink" title="1.2、编写图书模块的 JavaBean"></a>1.2、编写图书模块的 JavaBean</h4><h4 id="1-3、编写图书模块的-Dao-和测试-Dao"><a href="#1-3、编写图书模块的-Dao-和测试-Dao" class="headerlink" title="1.3、编写图书模块的 Dao 和测试 Dao"></a>1.3、编写图书模块的 Dao 和测试 Dao</h4><h4 id="1-4、编写图书模块的-Service-和测试-Service"><a href="#1-4、编写图书模块的-Service-和测试-Service" class="headerlink" title="1.4、编写图书模块的 Service 和测试 Service"></a>1.4、编写图书模块的 Service 和测试 Service</h4><h4 id="1-5、编写图书模块的-Web-层，和页面联调测试"><a href="#1-5、编写图书模块的-Web-层，和页面联调测试" class="headerlink" title="1.5、编写图书模块的 Web 层，和页面联调测试"></a>1.5、编写图书模块的 Web 层，和页面联调测试</h4><h5 id="1-5-1、图书列表功能的实现"><a href="#1-5-1、图书列表功能的实现" class="headerlink" title="1.5.1、图书列表功能的实现"></a>1.5.1、图书列表功能的实现</h5><p>1、图解列表功能流程：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125120133525.png" alt="image-20211125120133525"></p><p>2、BookServlet 程序中添加 list 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">//1 通过 BookService 查询全部图书</span></span><br><span class="line">List&lt;Book&gt; books = bookService.queryBooks();</span><br><span class="line"><span class="comment">//2 把全部图书保存到 Request 域中</span></span><br><span class="line">req.setAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line"><span class="comment">//3、请求转发到/pages/manager/book_manager.jsp 页面</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;/pages/manager/book_manager.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、修改【图书管理】请求地址</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125120223475.png" alt="image-20211125120223475"></p><p>4、修改 pages&#x2F;manager&#x2F;book_manager.jsp 页面的数据遍历输出(略)</p><p>1.5.2、前后台的简单介绍</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125120307410.png" alt="image-20211125120307410" style="zoom:80%;"/>-</p><h5 id="1-5-3、添加图书功能的实现"><a href="#1-5-3、添加图书功能的实现" class="headerlink" title="1.5.3、添加图书功能的实现"></a>1.5.3、添加图书功能的实现</h5><p>添加图书流程细节：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125125317106.png" alt="image-20211125125317106"></p><p><strong>1.5.3.2、问题说明：</strong></p><p>表单重复提交： 当用户提交完请求，浏览器会记录下最后一次请求的全部信息。</p><p>当用户按下功能键 F5，就会发起浏览器记录的最后一次 请求。</p><p><strong>1.5.3.3、BookServlet 程序中添加 add 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 1、获取请求的参数==封装成为 Book 对象</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> WebUtils.copyParamToBean(req.getParameterMap(),<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"><span class="comment">// 2、调用 BookService.addBook()保存图书</span></span><br><span class="line">bookService.addBook(book);</span><br><span class="line"><span class="comment">// 3、跳到图书列表页面</span></span><br><span class="line"><span class="comment">// /manager/bookServlet?action=list</span></span><br><span class="line"><span class="comment">// req.getRequestDispatcher(&quot;/manager/bookServlet?action=list&quot;).forward(req, resp);</span></span><br><span class="line">resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/manager/bookServlet?action=list&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.5.3.4、修改 book_edit.jsp 页面</strong></p><p>修改表单提交地址</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;manager/bookServlet&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;action&quot;</span> value=<span class="string">&quot;add&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h5 id="1-5-4、删除图书功能的实现"><a href="#1-5-4、删除图书功能的实现" class="headerlink" title="1.5.4、删除图书功能的实现"></a>1.5.4、删除图书功能的实现</h5><p>1.5.4.1、图解删除流程：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125143512764.png" alt="image-20211125143512764"></p><p><strong>1.5.4.2、BookServlet 程序中的 delete 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 1、获取请求的参数 id，图书编程</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 2、调用 bookService.deleteBookById();删除图书</span></span><br><span class="line">bookService.deleteBookById(id);</span><br><span class="line"><span class="comment">// 3、重定向回图书列表管理页面</span></span><br><span class="line"><span class="comment">// /book/manager/bookServlet?action=list</span></span><br><span class="line">resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/manager/bookServlet?action=list&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.5.4.3、给 WebUtils 工具类添加转换 int 类型的工具方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将字符串转换成为 int 类型的数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> strInt</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> defaultValue</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String strInt,<span class="type">int</span> defaultValue)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(strInt);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> defaultValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.5.4.4、修改删除的连接地址：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125143629913.png" alt="image-20211125143629913"></p><p><strong>1.5.4.5、给删除添加确认提示操作：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 给删除的 a 标签绑定单击事件，用于删除的确认提示操作</span></span><br><span class="line">$(<span class="string">&quot;a.deleteClass&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 在事件的 function 函数中，有一个 this 对象。这个 this 对象，是当前正在响应事件的 dom 对象。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* confirm 是确认提示框函数</span></span><br><span class="line"><span class="comment">* 参数是它的提示内容</span></span><br><span class="line"><span class="comment">* 它有两个按钮，一个确认，一个是取消。</span></span><br><span class="line"><span class="comment">* 返回 true 表示点击了，确认，返回 false 表示点击取消。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">confirm</span>(<span class="string">&quot;你确定要删除【&quot;</span> + $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&quot;td:first&quot;</span>).<span class="title function_">text</span>() + <span class="string">&quot;】?&quot;</span>);</span><br><span class="line"><span class="comment">// return false// 阻止元素的默认行为===不提交请求</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="1-5-5、修改图书功能的实现"><a href="#1-5-5、修改图书功能的实现" class="headerlink" title="1.5.5、修改图书功能的实现"></a><strong>1.5.5、修改图书功能的实现</strong></h5><p><strong>1.5.5.1：图解修改图书细节：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125152454744.png" alt="image-20211125152454744"></p><p><strong>1.5.5.2、更新【修改】的请求地址：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125152534833.png" alt="image-20211125152534833"></p><p><strong>1.5.5.3、BookServlet 程序中添加 getBook 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getBook</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">//1 获取请求的参数图书编号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="comment">//2 调用 bookService.queryBookById 查询图书</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.queryBookById(id);</span><br><span class="line"><span class="comment">//3 保存到图书到 Request 域中</span></span><br><span class="line">req.setAttribute(<span class="string">&quot;book&quot;</span>, book) ;</span><br><span class="line"><span class="comment">//4 请求转发到。pages/manager/book_edit.jsp 页面</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;/pages/manager/book_edit.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.5.5.4、在 book_edit.jsp 页面中显示修改的数据</strong></p><p>（略）</p><p><strong>1.5.5.5、在 BookServlet 程序中添加 update 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 1、获取请求的参数==封装成为 Book 对象</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> WebUtils.copyParamToBean(req.getParameterMap(),<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"><span class="comment">// 2、调用 BookService.updateBook( book );修改图书</span></span><br><span class="line">bookService.updateBook(book);</span><br><span class="line"><span class="comment">// 3、重定向回图书列表管理页面</span></span><br><span class="line"><span class="comment">// 地址：/工程名/manager/bookServlet?action=list</span></span><br><span class="line">resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/manager/bookServlet?action=list&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.5.5.6、解决 book_edit.jsp 页面，即要实现添加，又要实现修改操作。</strong></p><p>这里使用图解的第一种方法</p><p>book_edit.jsp</p><p><code>&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;$&#123;param.method&#125;&quot;&gt;</code></p><p>book_manager.jsp 增加 method&#x3D;update</p><p><code>&lt;td&gt;&lt;a href=&quot;manager/bookServlet?action=getBook&amp;method=update&amp;id=$&#123;book.id&#125;&quot;&gt;修改&lt;/a&gt;&lt;/td&gt;</code></p><p><code>&lt;td&gt;&lt;a href=&quot;pages/manager/book_edit.jsp?method=add&quot;&gt;添加图书&lt;/a&gt;&lt;/td&gt;</code></p><h3 id="2、图书分页"><a href="#2、图书分页" class="headerlink" title="2、图书分页"></a>2、图书分页</h3><h4 id="1-分页模块的分析"><a href="#1-分页模块的分析" class="headerlink" title="1)分页模块的分析"></a>1)分页模块的分析</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125184753779.png" alt="image-20211125184753779"></p><h4 id="2-分页模型-Page-的抽取（当前页数，总页数，总记录数，-当前页数据，每页记录数）"><a href="#2-分页模型-Page-的抽取（当前页数，总页数，总记录数，-当前页数据，每页记录数）" class="headerlink" title="2)分页模型 Page 的抽取（当前页数，总页数，总记录数， 当前页数据，每页记录数）"></a>2)分页模型 Page 的抽取（当前页数，总页数，总记录数， 当前页数据，每页记录数）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Page 是分页的模型对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &lt;T&gt; 是具体的模块的 javaBean 类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">PAGE_SIZE</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 当前页码</span></span><br><span class="line"><span class="keyword">private</span> Integer pageNo;</span><br><span class="line"><span class="comment">// 总页码</span></span><br><span class="line"><span class="keyword">private</span> Integer pageTotal;</span><br><span class="line"><span class="comment">// 当前页显示数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> PAGE_SIZE;</span><br><span class="line"><span class="comment">// 总记录数</span></span><br><span class="line"><span class="keyword">private</span> Integer pageTotalCount;</span><br><span class="line"><span class="comment">// 当前页数据</span></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; items</span><br></pre></td></tr></table></figure><h4 id="3-分页的初步实现"><a href="#3-分页的初步实现" class="headerlink" title="3)分页的初步实现"></a>3)分页的初步实现</h4><p>bookDao代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">queryForPageTotalCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line"><span class="type">Number</span> <span class="variable">count</span> <span class="operator">=</span> (Number) queryForSingleValue(sql);</span><br><span class="line"><span class="keyword">return</span> count.intValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">queryForPageItems</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select `id` , `name` , `author` , `price` , `sales` , `stock` , `img_path` imgPath</span></span><br><span class="line"><span class="string">from t_book limit ?,?&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> queryForList(Book.class,sql,begin,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookService 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> pageNo, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">Page&lt;Book&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;Book&gt;();</span><br><span class="line"><span class="comment">// 设置当前页码</span></span><br><span class="line">page.setPageNo(pageNo);</span><br><span class="line"><span class="comment">// 设置每页显示的数量</span></span><br><span class="line">page.setPageSize(pageSize);</span><br><span class="line"><span class="comment">// 求总记录数</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">pageTotalCount</span> <span class="operator">=</span> bookDao.queryForPageTotalCount();</span><br><span class="line"><span class="comment">// 设置总记录数</span></span><br><span class="line">page.setPageTotalCount(pageTotalCount);</span><br><span class="line"><span class="comment">// 求总页码</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">pageTotal</span> <span class="operator">=</span> pageTotalCount / pageSize;</span><br><span class="line"><span class="keyword">if</span> (pageTotalCount % pageSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">pageTotal+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置总页码</span></span><br><span class="line">page.setPageTotal(pageTotal);</span><br><span class="line"><span class="comment">// 求当前页数据的开始索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> (page.getPageNo() - <span class="number">1</span>) * pageSize;</span><br><span class="line"><span class="comment">// 求当前页数据</span></span><br><span class="line">List&lt;Book&gt; items = bookDao.queryForPageItems(begin,pageSize);</span><br><span class="line"><span class="comment">// 设置当前页数据</span></span><br><span class="line">page.setItems(items);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookServlet代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 处理分页功能</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">page</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">//1 获取请求的参数 pageNo 和 pageSize</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;pageNo&quot;</span>), <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;pageSize&quot;</span>), Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">//2 调用 BookService.page(pageNo，pageSize)：Page 对象</span></span><br><span class="line">Page&lt;Book&gt; page = bookService.page(pageNo,pageSize);</span><br><span class="line"><span class="comment">//3 保存 Page 对象到 Request 域中</span></span><br><span class="line">req.setAttribute(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line"><span class="comment">//4 请求转发到 pages/manager/book_manager.jsp 页面</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;/pages/manager/book_manager.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>manager_menu.jsp 中【图书管理】请求地址的修改：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125220045693.png" alt="image-20211125220045693"></p><p>book_manager.jsp 修改</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211125220232513.png" alt="image-20211125220232513" style="zoom:80%;" />-</p><p>在 table后面加上 分页div</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;page_nav&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;上一页&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;<span class="number">3</span>&lt;/a&gt;</span><br><span class="line">【$&#123; requestScope.page.pageNo &#125;】</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;<span class="number">5</span>&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;末页&lt;/a&gt;</span><br><span class="line">共$&#123; requestScope.page.pageTotal &#125;页，$&#123; requestScope.page.pageTotalCount &#125;条记录</span><br><span class="line">到第&lt;input value=<span class="string">&quot;4&quot;</span> name=<span class="string">&quot;pn&quot;</span> id=<span class="string">&quot;pn_input&quot;</span>/&gt;页</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;确定&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="4-首页、上一页、下一页、末页实现"><a href="#4-首页、上一页、下一页、末页实现" class="headerlink" title="4)首页、上一页、下一页、末页实现"></a>4)首页、上一页、下一页、末页实现</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;page_nav&quot;</span>&gt;</span><br><span class="line">&lt;%--大于首页，才显示--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;requestScope.page.pageNo &gt; 1&#125;&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=1&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;&quot;</span>&gt;上一页&lt;/a&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;<span class="number">3</span>&lt;/a&gt;</span><br><span class="line">【$&#123; requestScope.page.pageNo &#125;】</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;<span class="number">5</span>&lt;/a&gt;</span><br><span class="line">&lt;%-- 如果已经 是最后一页，则不显示下一页，末页 --%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;requestScope.page.pageNo &lt; requestScope.page.pageTotal&#125;&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;&quot;</span>&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;&quot;</span>&gt;末页&lt;/a&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">共$&#123; requestScope.page.pageTotal &#125;页，$&#123; requestScope.page.pageTotalCount &#125;条记录</span><br><span class="line">到第&lt;input value=<span class="string">&quot;4&quot;</span> name=<span class="string">&quot;pn&quot;</span> id=<span class="string">&quot;pn_input&quot;</span>/&gt;页</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;确定&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="5-分页模块中跳转到指定页数功能实现"><a href="#5-分页模块中跳转到指定页数功能实现" class="headerlink" title="5)分页模块中跳转到指定页数功能实现"></a>5)分页模块中跳转到指定页数功能实现</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;page_nav&quot;</span>&gt;</span><br><span class="line">&lt;%--大于首页，才显示--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;requestScope.page.pageNo &gt; 1&#125;&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=1&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;&quot;</span>&gt;上一页&lt;/a&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;<span class="number">3</span>&lt;/a&gt;</span><br><span class="line">【$&#123; requestScope.page.pageNo &#125;】</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;<span class="number">5</span>&lt;/a&gt;</span><br><span class="line">&lt;%-- 如果已经 是最后一页，则不显示下一页，末页 --%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;requestScope.page.pageNo &lt; requestScope.page.pageTotal&#125;&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;&quot;</span>&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;&quot;</span>&gt;末页&lt;/a&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">共$&#123; requestScope.page.pageTotal &#125;页，$&#123; requestScope.page.pageTotalCount &#125;条记录</span><br><span class="line">到第&lt;input value=<span class="string">&quot;$&#123;param.pageNo&#125;&quot;</span> name=<span class="string">&quot;pn&quot;</span> id=<span class="string">&quot;pn_input&quot;</span>/&gt;页</span><br><span class="line">&lt;input id=<span class="string">&quot;searchPageBtn&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;确定&quot;</span>&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(function () &#123;</span><br><span class="line"><span class="comment">// 跳到指定的页码</span></span><br><span class="line">$(<span class="string">&quot;#searchPageBtn&quot;</span>).click(function () &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">pageNo</span> <span class="operator">=</span> $(<span class="string">&quot;#pn_input&quot;</span>).val();</span><br><span class="line">&lt;%--<span class="type">var</span> <span class="variable">pageTotal</span> <span class="operator">=</span> $&#123;requestScope.page.pageTotal&#125;;--%&gt;</span><br><span class="line">&lt;%--alert(pageTotal);--%&gt;</span><br><span class="line"><span class="comment">// javaScript 语言中提供了一个 location 地址栏对象</span></span><br><span class="line"><span class="comment">// 它有一个属性叫 href.它可以获取浏览器地址栏中的地址</span></span><br><span class="line"><span class="comment">// href 属性可读，可写</span></span><br><span class="line">location.href = <span class="string">&quot;$&#123;pageScope.basePath&#125;manager/bookServlet?action=page&amp;pageNo=&quot;</span> +</span><br><span class="line">pageNo;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>Page 对象中的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageNo</span><span class="params">(Integer pageNo)</span> &#123;</span><br><span class="line"><span class="comment">/* 数据边界的有效检查 */</span></span><br><span class="line"><span class="keyword">if</span> (pageNo &lt; <span class="number">1</span>) &#123;</span><br><span class="line">pageNo = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pageNo &gt; pageTotal) &#123;</span><br><span class="line">pageNo = pageTotal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.pageNo = pageNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-分页模块中，页码-1-2-【3】-4-5-的显示，要显示-5-个页-码，并且页码可以点击跳转。"><a href="#6-分页模块中，页码-1-2-【3】-4-5-的显示，要显示-5-个页-码，并且页码可以点击跳转。" class="headerlink" title="6)分页模块中，页码 1,2,【3】,4,5 的显示，要显示 5 个页 码，并且页码可以点击跳转。"></a>6)分页模块中，页码 1,2,【3】,4,5 的显示，要显示 5 个页 码，并且页码可以点击跳转。</h4><p>小情况 1：当前页码为前面 3 个：1，2，3 的情况，页码范围是：1-5. 【1】2，3，4，5<br>1【2】3，4，5<br>1，2【3】4，5</p><p>小情况 2：当前页码为最后 3 个，8，9，10，页码范围是：总页码减 4 - 总页码<br>6，7【8】9，10<br>6，7，8【9】10<br>6，7，8，9【10】<br>小情况 3：4，5，6，7，页码范围是：当前页码减 2 - 当前页码加 2</p><p>2，3，4，5，6<br>3，4，5，6，7<br>4，5，6，7，8<br>5，6，7，8，9</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--页码输出的开始--%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;%--情况 <span class="number">1</span>：如果总页码小于等于 <span class="number">5</span> 的情况，页码的范围是：<span class="number">1</span>-总页码--%&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123; requestScope.page.pageTotal &lt;= 5 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;begin&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;end&quot;</span> value=<span class="string">&quot;$&#123;requestScope.page.pageTotal&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;%--情况 <span class="number">2</span>：总页码大于 <span class="number">5</span> 的情况--%&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.page.pageTotal &gt; 5&#125;&quot;</span>&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;%--小情况 <span class="number">1</span>：当前页码为前面 <span class="number">3</span> 个：<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span> 的情况，页码范围是：<span class="number">1</span>-<span class="number">5.</span>--%&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.page.pageNo &lt;= 3&#125;&quot;</span>&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;begin&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;end&quot;</span> value=<span class="string">&quot;5&quot;</span>/&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;%--小情况 <span class="number">2</span>：当前页码为最后 <span class="number">3</span> 个，<span class="number">8</span>，<span class="number">9</span>，<span class="number">10</span>，页码范围是：总页码减 <span class="number">4</span> - 总页码--%&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.page.pageNo &gt; requestScope.page.pageTotal-3&#125;&quot;</span>&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;begin&quot;</span> value=<span class="string">&quot;$&#123;requestScope.page.pageTotal-4&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;end&quot;</span> value=<span class="string">&quot;$&#123;requestScope.page.pageTotal&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;%--小情况 <span class="number">3</span>：<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>，<span class="number">7</span>，页码范围是：当前页码减 <span class="number">2</span> - 当前页码加 <span class="number">2</span>--%&gt;</span><br><span class="line">&lt;c:otherwise&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;begin&quot;</span> value=<span class="string">&quot;$&#123;requestScope.page.pageNo-2&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;end&quot;</span> value=<span class="string">&quot;$&#123;requestScope.page.pageNo+2&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;$&#123;begin&#125;&quot;</span> end=<span class="string">&quot;$&#123;end&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;i == requestScope.page.pageNo&#125;&quot;</span>&gt;</span><br><span class="line">【$&#123;i&#125;】</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;i != requestScope.page.pageNo&#125;&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;manager/bookServlet?action=page&amp;pageNo=$&#123;i&#125;&quot;</span>&gt;$&#123;i&#125;&lt;/a&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;%--页码输出的结束--%&gt;</span><br></pre></td></tr></table></figure><h4 id="7-修改分页后，增加，删除，修改图书信息的回显页面"><a href="#7-修改分页后，增加，删除，修改图书信息的回显页面" class="headerlink" title="7) 修改分页后，增加，删除，修改图书信息的回显页面"></a>7) 修改分页后，增加，删除，修改图书信息的回显页面</h4><p>以修改图书为示例： 1、在修改的请求地址上追加当前页码参数：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127094503621.png" alt="image-20211127094503621"></p><p>2、在 book_edit.jsp 页面中使用隐藏域记录下 pageNo 参数</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127094527901.png" alt="image-20211127094527901"></p><p>3、在服务器重定向的时候，获取当前页码追加上进行跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 1、获取请求的参数==封装成为 Book 对象</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> WebUtils.copyParamToBean(req.getParameterMap(),<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"><span class="comment">// 2、调用 BookService.updateBook( book );修改图书</span></span><br><span class="line">bookService.updateBook(book);</span><br><span class="line"><span class="comment">// 3、重定向回图书列表管理页面</span></span><br><span class="line"><span class="comment">// 地址：/工程名/manager/bookServlet?action=list</span></span><br><span class="line">resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/manager/bookServlet?action=page&amp;pageNo=&quot;</span> +</span><br><span class="line">req.getParameter(<span class="string">&quot;pageNo&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、首页-index-jsp-的跳转"><a href="#3、首页-index-jsp-的跳转" class="headerlink" title="3、首页 index.jsp 的跳转"></a>3、首页 index.jsp 的跳转</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127113948909.png" alt="image-20211127113948909"></p><h3 id="4、分页条的抽取"><a href="#4、分页条的抽取" class="headerlink" title="4、分页条的抽取"></a>4、分页条的抽取</h3><h4 id="4-1、抽取分页条中请求地址为-url-变量"><a href="#4-1、抽取分页条中请求地址为-url-变量" class="headerlink" title="4.1、抽取分页条中请求地址为 url 变量"></a>4.1、抽取分页条中请求地址为 url 变量</h4><p>4.1.1.在 Page类中添加属性 url</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页条的请求地址</span></span><br><span class="line"><span class="keyword">private</span> String url;</span><br></pre></td></tr></table></figure><p>4.1.2 在 Servlet 程序的 page 分页方法中设置 url 的分页请求地址</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127114131459.png" alt="image-20211127114131459"></p><p>4.1.3、修改分页条中请求地址为 url 变量输出,并抽取一个单独的 jsp 页面</p><p>即将 manager.jsp页面中的</p><p><code>manager/bookServlet?action=page</code></p><p>和 client下的 index.jsp页面中的</p><p><code>clent/bookServlet?action=page</code></p><p>更改为</p><p><code>$&#123;requestScope.page.url&#125;</code></p><h3 id="5、首页价格搜索"><a href="#5、首页价格搜索" class="headerlink" title="5、首页价格搜索"></a>5、首页价格搜索</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127114729156.png" alt="image-20211127114729156"></p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="a-什么是-Cookie"><a href="#a-什么是-Cookie" class="headerlink" title="a)什么是 Cookie?"></a>a)什么是 Cookie?</h3><p>1、Cookie 翻译过来是饼干的意思。</p><p>2、Cookie 是服务器通知客户端保存键值对的一种技术。</p><p>3、客户端有了 Cookie 后，每次请求都发送给服务器。</p><p>4、每个 Cookie 的大小不能超过 4kb</p><h3 id="b-如何创建-Cookie"><a href="#b-如何创建-Cookie" class="headerlink" title="b)如何创建 Cookie"></a>b)如何创建 Cookie</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127184123674.png" alt="image-20211127184123674"></p><p>Servlet 程序中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">//1 创建 Cookie 对象</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key4&quot;</span>, <span class="string">&quot;value4&quot;</span>);</span><br><span class="line"><span class="comment">//2 通知客户端保存 Cookie</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line"><span class="comment">//1 创建 Cookie 对象</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key5&quot;</span>, <span class="string">&quot;value5&quot;</span>);</span><br><span class="line"><span class="comment">//2 通知客户端保存 Cookie</span></span><br><span class="line">resp.addCookie(cookie1);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;Cookie 创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-服务器如何获取-Cookie"><a href="#c-服务器如何获取-Cookie" class="headerlink" title="c)服务器如何获取 Cookie"></a>c)服务器如何获取 Cookie</h3><p>服务器获取客户端的 Cookie 只需要一行代码：<code>req.getCookies():Cookie[]</code></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127211243868.png" alt="image-20211127211243868"></p><p>cookie的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieUtils</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查找指定名称的 Cookie 对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cookies</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title function_">findCookie</span><span class="params">(String name , Cookie[] cookies)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="literal">null</span> || cookies == <span class="literal">null</span> || cookies.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line"><span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line"><span class="keyword">return</span> cookie;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet 程序中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line"><span class="comment">// getName 方法返回 Cookie 的 key（名）</span></span><br><span class="line"><span class="comment">// getValue 方法返回 Cookie 的 value 值</span></span><br><span class="line">resp.getWriter().write(<span class="string">&quot;Cookie[&quot;</span> + cookie.getName() + <span class="string">&quot;=&quot;</span> + cookie.getValue() + <span class="string">&quot;] &lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">iWantCookie</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key1&quot;</span>, cookies);</span><br><span class="line"><span class="comment">// for (Cookie cookie : cookies) &#123;</span></span><br><span class="line"><span class="comment">// if (&quot;key2&quot;.equals(cookie.getName())) &#123;</span></span><br><span class="line"><span class="comment">// iWantCookie = cookie;</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 如果不等于 null，说明赋过值，也就是找到了需要的 Cookie</span></span><br><span class="line"><span class="keyword">if</span> (iWantCookie != <span class="literal">null</span>) &#123;</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;找到了需要的 Cookie&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d-Cookie-值的修改"><a href="#d-Cookie-值的修改" class="headerlink" title="d)Cookie 值的修改"></a>d)Cookie 值的修改</h3><p>方案一：</p><p>1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象</p><p>2、在构造器，同时赋于新的 Cookie 值。</p><p>3、调用 response.addCookie( Cookie );</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案一：</span></span><br><span class="line"><span class="comment">// 1、先创建一个要修改的同名的 Cookie 对象</span></span><br><span class="line"><span class="comment">// 2、在构造器，同时赋于新的 Cookie 值。</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;newValue1&quot;</span>);</span><br><span class="line"><span class="comment">// 3、调用 response.addCookie( Cookie ); 通知 客户端 保存修改</span></span><br><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>方案二：</p><p>1、先查找到需要修改的 Cookie 对象</p><p>2、调用 setValue()方法赋于新的 Cookie 值。</p><p>3、调用 response.addCookie()通知客户端保存修</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案二：</span></span><br><span class="line"><span class="comment">// 1、先查找到需要修改的 Cookie 对象</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key2&quot;</span>, req.getCookies());</span><br><span class="line"><span class="keyword">if</span> (cookie != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 2、调用 setValue()方法赋于新的 Cookie 值。</span></span><br><span class="line">cookie.setValue(<span class="string">&quot;newValue2&quot;</span>);</span><br><span class="line"><span class="comment">// 3、调用 response.addCookie()通知客户端保存修改</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e-浏览器查看-Cookie"><a href="#e-浏览器查看-Cookie" class="headerlink" title="e)浏览器查看 Cookie"></a>e)浏览器查看 Cookie</h3><p>谷歌浏览器查看cookie</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127212910873.png" alt="image-20211127212910873"></p><p>火狐浏览器查看cookie</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127212927346.png" alt="image-20211127212927346"></p><h3 id="f-Cookie-生命控制"><a href="#f-Cookie-生命控制" class="headerlink" title="f) Cookie 生命控制"></a>f) Cookie 生命控制</h3><p>Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）</p><p>setMaxAge()</p><p>​正数，表示在指定的秒数后过期<br>​负数，表示浏览器一关，Cookie 就会被删除（默认值是-1）<br>​零，表示马上删除 Cooki</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 设置存活 1 个小时的 Cooie</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">life3600</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;life3600&quot;</span>, <span class="string">&quot;life3600&quot;</span>);</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span>); <span class="comment">// 设置 Cookie 一小时之后被删除。无效</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;已经创建了一个存活一小时的 Cookie&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 马上删除一个 Cookie</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">deleteNow</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 先找到你要删除的 Cookie 对象</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key4&quot;</span>, req.getCookies());</span><br><span class="line"><span class="keyword">if</span> (cookie != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 调用 setMaxAge(0);</span></span><br><span class="line">cookie.setMaxAge(<span class="number">0</span>); <span class="comment">// 表示马上删除，都不需要等待浏览器关闭</span></span><br><span class="line"><span class="comment">// 调用 response.addCookie(cookie);</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;key4 的 Cookie 已经被删除&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认的会话级别的 Cookie</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;defalutLife&quot;</span>,<span class="string">&quot;defaultLife&quot;</span>);</span><br><span class="line">cookie.setMaxAge(-<span class="number">1</span>);<span class="comment">//设置存活时间</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="g-Cookie-有效路径-Path-的设置"><a href="#g-Cookie-有效路径-Path-的设置" class="headerlink" title="g)Cookie 有效路径 Path 的设置"></a>g)Cookie 有效路径 Path 的设置</h3><p>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。<br>path 属性是通过请求的地址来进行有效的过滤。<br>CookieA path&#x3D;&#x2F;工程路径<br>CookieB path&#x3D;&#x2F;工程路径&#x2F;abc<br>请求地址如下：<br><a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a><br>CookieA 发送<br>CookieB 不发送<br><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a><br>CookieA 发送<br>CookieB 发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">testPath</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;path1&quot;</span>, <span class="string">&quot;path1&quot;</span>);</span><br><span class="line"><span class="comment">// getContextPath() ===&gt;&gt;&gt;&gt; 得到工程路径</span></span><br><span class="line">cookie.setPath( req.getContextPath() + <span class="string">&quot;/abc&quot;</span> ); <span class="comment">// ===&gt;&gt;&gt;&gt; /工程路径/abc</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;创建了一个带有 Path 路径的 Cookie&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="h-Cookie-练习—免输入用户名登录"><a href="#h-Cookie-练习—免输入用户名登录" class="headerlink" title="h) Cookie 练习—免输入用户名登录"></a>h) Cookie 练习—免输入用户名登录</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211127215728186.png" alt="image-20211127215728186"></p><p>login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8080/13_cookie_session/loginServlet&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;cookie.username.value&#125;&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>servlet程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;wzg168&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line"><span class="comment">//登录 成功</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);<span class="comment">//当前 Cookie 一周内有效</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">System.out.println(<span class="string">&quot;登录 成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 登录 失败</span></span><br><span class="line">System.out.println(<span class="string">&quot;登录 失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Session-会话"><a href="#2、Session-会话" class="headerlink" title="2、Session 会话"></a>2、Session 会话</h2><h3 id="i-什么是-Session-会话"><a href="#i-什么是-Session-会话" class="headerlink" title="i) 什么是 Session 会话"></a>i) 什么是 Session 会话</h3><p>1、Session 就一个接口（HttpSession）。</p><p>2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。</p><p>3、每个客户端都有自己的一个 Session 会话。</p><p>4、<strong>Session 会话中，我们经常用来保存用户登录之后的信息</strong></p><h3 id="j-如何创建-Session-和获取-id-号-是否为新"><a href="#j-如何创建-Session-和获取-id-号-是否为新" class="headerlink" title="j) 如何创建 Session 和获取(id 号,是否为新"></a>j) 如何创建 Session 和获取(id 号,是否为新</h3><p>如何创建和获取 Session。它们的 API 是一样的。<br><code>request.getSession()</code><br>第一次调用是：创建 Session 会话<br>之后调用都是：获取前面创建好的 Session 会话对象。</p><p><code>isNew()</code> ; 判断到底是不是刚创建出来的（新的）<br>true 表示刚创建<br>false 表示获取之前创建<br>每个会话都有一个身份证号。也就是 ID 值。而且这个 ID 是唯一的。<br>getId() 得到 Session 的会话 id 值。</p><h3 id="k-Session-域数据的存取"><a href="#k-Session-域数据的存取" class="headerlink" title="k)Session 域数据的存取"></a>k)Session 域数据的存取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 往 Session 中保存数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line">req.getSession().setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;已经往 Session 中保存了数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 获取 Session 域中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> req.getSession().getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;从 Session 中获取出 key1 的数据是：&quot;</span> + attribute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="l-Session-生命周期控制"><a href="#l-Session-生命周期控制" class="headerlink" title="l) Session 生命周期控制"></a>l) Session 生命周期控制</h3><p>public void setMaxInactiveInterval(int interval) 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session<br>就会被销毁。<br>值为正数的时候，设定 Session 的超时时长。<br>负数表示永不超时（极少使用）<br>public int getMaxInactiveInterval()获取 Session 的超时时间<br>public void invalidate() 让当前 Session 会话马上超时无效。<br>Session 默认的超时时长是多少！<br>Session 默认的超时时间长为 30 分钟。<br>因为在 Tomcat 服务器的配置文件 web.xml中默认有以下的配置，它就表示配置了当前 Tomcat 服务器下所有的 Session<br>超时配置默认时长为：30 分钟</p><p>如果说。你希望你的 web 工程，默认的 Session 的超时时长为其他时长。你可以在你自己的 web.xml 配置文件中做 以上相同的配置。就可以修改你的 web 工程所有 Seession 的默认超时时长。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表示当前 web 工程。创建出来 的所有 Session 默认是 20 分钟 超时时长--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>20<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你想只修改个别 Session 的超时时长。就可以使用上面的 API。</p><p>setMaxInactiveInterval(int interval)来进行单独的设 置。</p><p>session.setMaxInactiveInterval(int interval)单独设置超时时长。</p><p>Session 超时的概念介绍：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211128184457126.png" alt="image-20211128184457126" style="zoom: 67%;" />-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">life3</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 先获取 Session 对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="comment">// 设置当前 Session3 秒后超时</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">3</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;当前 Session 已经设置为 3 秒后超时&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>session马上超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">deleteNow</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 先获取 Session 对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="comment">// 让 Session 会话马上超时</span></span><br><span class="line">session.invalidate();</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;Session 已经设置为超时（无效）&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="m-浏览器和-Session-之间关联的技术内幕"><a href="#m-浏览器和-Session-之间关联的技术内幕" class="headerlink" title="m) 浏览器和 Session 之间关联的技术内幕"></a>m) 浏览器和 Session 之间关联的技术内幕</h3><p>Session 技术，底层其实是基于 Cookie 技术来实现</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211128190149458.png" alt="image-20211128190149458"></p><h2 id="项目第六阶段"><a href="#项目第六阶段" class="headerlink" title="项目第六阶段"></a>项目第六阶段</h2><h3 id="3-1、登陆—显示用户名"><a href="#3-1、登陆—显示用户名" class="headerlink" title="3.1、登陆—显示用户名"></a>3.1、登陆—显示用户名</h3><p>UserServlet 程序中保存用户登录的信息<img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211128195448625.png" alt="image-20211128195448625"></p><p>修改 login_succuess_menu.jsp</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211128195504375.png" alt="image-20211128195504375"></p><p>还要修改首页 index.jsp</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211128195520910.png" alt="image-20211128195520910"></p><h3 id="3-2、登出—注销用户"><a href="#3-2、登出—注销用户" class="headerlink" title="3.2、登出—注销用户"></a>3.2、登出—注销用户</h3><p>1、销毁 Session 中用户登录的信息（或者销毁 Session）</p><p>2、重定向到首页（或登录页面）。</p><p>UserServlet 程序中添加 logout 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注销</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 1、销毁 Session 中用户登录的信息（或者销毁 Session）</span></span><br><span class="line">req.getSession().invalidate();</span><br><span class="line"><span class="comment">// 2、重定向到首页（或登录页面）。</span></span><br><span class="line">resp.sendRedirect(req.getContextPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改【注销】的菜单地址</p><p><code>[注销](userServlet?action=logout)</code></p><h3 id="3-3、表单重复提交之—–验证码"><a href="#3-3、表单重复提交之—–验证码" class="headerlink" title="3.3、表单重复提交之—–验证码"></a>3.3、表单重复提交之—–验证码</h3><p>表单重复提交有三种常见的情况：</p><p>一：提交完表单。服务器使用请求转来进行页面跳转。这个时候，用户按下功能键 F5，就会发起最后一次的请求。 造成表单重复提交问题。解决方法：使用重定向来进行跳转</p><p>二：用户正常提交服务器，但是由于网络延迟等原因，迟迟未收到服务器的响应，这个时候，用户以为提交失败， 就会着急，然后多点了几次提交操作，也会造成表单重复提交。</p><p>三：用户正常提交服务器。服务器也没有延迟，但是提交完成后，用户回退浏览器。重新提交。也会造成表单重复 提交。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211128204706741.png" alt="image-20211128204706741"></p><h3 id="3-4、谷歌-kaptcha-图片验证码的使用"><a href="#3-4、谷歌-kaptcha-图片验证码的使用" class="headerlink" title="3.4、谷歌 kaptcha 图片验证码的使用"></a>3.4、谷歌 kaptcha 图片验证码的使用</h3><p>谷歌验证码 kaptcha 使用步骤如下：</p><p>1、导入谷歌验证码的 jar 包 kaptcha-2.3.2.jar</p><p>2、在 web.xml 中去配置用于生成验证码的 Servlet 程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">servlet&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/kaptcha.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在表单中使用 img 标签去显示验证码图片并使用它</p><p>4、在服务器获取谷歌生成的验证码和客户端发送过来的验证码比较使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session中的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) request.getSession().getAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line">        <span class="comment">//马上删除session域中的验证码</span></span><br><span class="line">        request.getSession().removeAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查看验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; token.equalsIgnoreCase(code)) &#123;</span><br><span class="line">            <span class="comment">//正确</span></span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>切换验证码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给验证码的图片，绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;#code_img&quot;</span>).click(function () &#123;</span><br><span class="line"><span class="comment">// 在事件响应的 function 函数中有一个 this 对象。这个 this 对象，是当前正在响应事件的 dom 对象</span></span><br><span class="line"><span class="comment">// src 属性表示验证码 img 标签的 图片路径。它可读，可写</span></span><br><span class="line"><span class="comment">// alert(this.src);</span></span><br><span class="line"><span class="built_in">this</span>.src = <span class="string">&quot;$&#123;basePath&#125;kaptcha.jpg?d=&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1、项目第六阶段：购物车"><a href="#1、项目第六阶段：购物车" class="headerlink" title="1、项目第六阶段：购物车"></a>1、项目第六阶段：购物车</h3><h4 id="1-1、购物车模块分析"><a href="#1-1、购物车模块分析" class="headerlink" title="1.1、购物车模块分析"></a>1.1、购物车模块分析</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211128222245216.png" alt="image-20211128222245216"></p><h4 id="1-2、购物车模型编写"><a href="#1-2、购物车模型编写" class="headerlink" title="1.2、购物车模型编写"></a>1.2、购物车模型编写</h4><p>1.2.1、购物车模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 购物车的商品项</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartItem</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer count;</span><br><span class="line"><span class="keyword">private</span> BigDecimal price;</span><br><span class="line"><span class="keyword">private</span> BigDecimal totalPrice;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 购物车对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cart</span> &#123;</span><br><span class="line"><span class="comment">// private Integer totalCount;</span></span><br><span class="line"><span class="comment">// private BigDecimal totalPrice;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* key 是商品编号，</span></span><br><span class="line"><span class="comment">* value，是商品信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer,CartItem&gt; items = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Integer,CartItem&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加商品项</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cartItem</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(CartItem cartItem)</span> &#123;</span><br><span class="line"><span class="comment">// 先查看购物车中是否已经添加过此商品，如果已添加，则数量累加，总金额更新，如果没有添加过，直接放到</span></span><br><span class="line">集合中即可</span><br><span class="line"><span class="type">CartItem</span> <span class="variable">item</span> <span class="operator">=</span> items.get(cartItem.getId());</span><br><span class="line"><span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 之前没添加过此商品</span></span><br><span class="line">items.put(cartItem.getId(), cartItem);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 已经 添加过的情况</span></span><br><span class="line">item.setCount( item.getCount() + <span class="number">1</span> ); <span class="comment">// 数量 累加</span></span><br><span class="line">item.setTotalPrice( item.getPrice().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>( item.getCount() )) ); <span class="comment">// 更</span></span><br><span class="line">新总金额</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除商品项</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteItem</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">items.remove(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 清空购物车</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">items.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改商品数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCount</span><span class="params">(Integer id,Integer count)</span> &#123;</span><br><span class="line"><span class="comment">// 先查看购物车中是否有此商品。如果有，修改商品数量，更新总金额</span></span><br><span class="line"><span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> items.get(id);</span><br><span class="line"><span class="keyword">if</span> (cartItem != <span class="literal">null</span>) &#123;</span><br><span class="line">cartItem.setCount(count);<span class="comment">// 修改商品数量</span></span><br><span class="line">cartItem.setTotalPrice( cartItem.getPrice().multiply(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">BigDecimal</span>( cartItem.getCount() )) ); <span class="comment">// 更新总金额</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getTotalCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">totalCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer,CartItem&gt;entry : items.entrySet()) &#123;</span><br><span class="line">totalCount += entry.getValue().getCount();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">getTotalPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">totalPrice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer,CartItem&gt;entry : items.entrySet()) &#123;</span><br><span class="line">totalPrice = totalPrice.add(entry.getValue().getTotalPrice());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalPrice;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Map&lt;Integer, CartItem&gt; <span class="title function_">getItems</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItems</span><span class="params">(Map&lt;Integer, CartItem&gt; items)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.items = items;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Cart&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;totalCount=&quot;</span> + getTotalCount() +</span><br><span class="line"><span class="string">&quot;, totalPrice=&quot;</span> + getTotalPrice() +</span><br><span class="line"><span class="string">&quot;, items=&quot;</span> + items +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3、加入购物车功能的实现"><a href="#1-3、加入购物车功能的实现" class="headerlink" title="1.3、加入购物车功能的实现"></a>1.3、加入购物车功能的实现</h4><p>cartServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 加入购物车</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 获取请求的参数 商品编号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 调用 bookService.queryBookById(id):Book 得到图书的信息</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.queryBookById(id);</span><br><span class="line"><span class="comment">// 把图书信息，转换成为 CartItem 商品项</span></span><br><span class="line"><span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CartItem</span>(book.getId(),book.getName(),<span class="number">1</span>,book.getPrice(),book.getPrice());</span><br><span class="line"><span class="comment">// 调用 Cart.addItem(CartItem);添加商品项</span></span><br><span class="line"><span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> (Cart) req.getSession().getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (cart == <span class="literal">null</span>) &#123;</span><br><span class="line">cart = <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">req.getSession().setAttribute(<span class="string">&quot;cart&quot;</span>,cart);</span><br><span class="line">&#125;</span><br><span class="line">cart.addItem(cartItem);</span><br><span class="line">System.out.println(cart);</span><br><span class="line">System.out.println(<span class="string">&quot;请求头 Referer 的值：&quot;</span> + req.getHeader(<span class="string">&quot;Referer&quot;</span>));</span><br><span class="line"><span class="comment">// 重定向回原来商品所在的地址页面</span></span><br><span class="line">resp.sendRedirect(req.getHeader(<span class="string">&quot;Referer&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.jsp 页面 js 的代码：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129161320733.png" alt="image-20211129161320733"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Script</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 给加入购物车按钮绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;button.addToCart&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在事件响应的 function 函数 中，有一个 this 对象，这个 this 对象，是当前正在响应事件的 dom 对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@type</span> &#123;<span class="type">jQuery</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> bookId = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;bookId&quot;</span>);</span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;http://localhost:8080/book/cartServlet?action=addItem&amp;id=&quot;</span> + bookId;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/<span class="title class_">Script</span>&gt;</span><br></pre></td></tr></table></figure><p>图解说明，如何跳回添加商品的页面：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129161359500.png" alt="image-20211129161359500"></p><h4 id="1-4、购物车的展示"><a href="#1-4、购物车的展示" class="headerlink" title="1.4、购物车的展示"></a>1.4、购物车的展示</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129161508956.png" alt="image-20211129161508956"></p><h4 id="1-5、删除购物车商品项"><a href="#1-5、删除购物车商品项" class="headerlink" title="1.5、删除购物车商品项"></a>1.5、删除购物车商品项</h4><p>CartServlet 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除商品项</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">deleteItem</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException&#123;</span><br><span class="line"><span class="comment">// 获取商品编号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取购物车对象</span></span><br><span class="line"><span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> (Cart) req.getSession().getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (cart != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 删除 了购物车商品项</span></span><br><span class="line">cart.deleteItem(id);</span><br><span class="line"><span class="comment">// 重定向回原来购物车展示页面</span></span><br><span class="line">resp.sendRedirect(req.getHeader(<span class="string">&quot;Referer&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>购物车&#x2F;pages&#x2F;cart&#x2F;cart.jsp 页面的代码：</p><p>删除的请求地址：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129200354110.png" alt="image-20211129200354110"></p><p>删除的确认提示操作：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129200410500.png" alt="image-20211129200410500"></p><h4 id="1-6、清空购物车"><a href="#1-6、清空购物车" class="headerlink" title="1.6、清空购物车"></a>1.6、清空购物车</h4><p>略</p><h4 id="1-7、修改购物车商品数量"><a href="#1-7、修改购物车商品数量" class="headerlink" title="1.7、修改购物车商品数量"></a>1.7、修改购物车商品数量</h4><p>CartServlet 程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改商品数量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">updateCount</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException&#123;</span><br><span class="line"><span class="comment">// 获取请求的参数 商品编号 、商品数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>),<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> WebUtils.parseInt(req.getParameter(<span class="string">&quot;count&quot;</span>), <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取 Cart 购物车对象</span></span><br><span class="line"><span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> (Cart) req.getSession().getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (cart != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 修改商品数量</span></span><br><span class="line">cart.updateCount(id,count);</span><br><span class="line"><span class="comment">// 重定向回原来购物车展示页面</span></span><br><span class="line">resp.sendRedirect(req.getHeader(<span class="string">&quot;Referer&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 pages&#x2F;cart&#x2F;cart.jsp 购物车页面</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129212121779.png" alt="image-20211129212121779"></p><p>修改商品数量 js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给输入框绑定 onchange 内容发生改变事件</span></span><br><span class="line">$(<span class="string">&quot;.updateCount&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 获取商品名称</span></span><br><span class="line"><span class="keyword">var</span> name = $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&quot;td:first&quot;</span>).<span class="title function_">text</span>();</span><br><span class="line"><span class="keyword">var</span> id = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;bookId&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取商品数量</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_">confirm</span>(<span class="string">&quot;你确定要将【&quot;</span> + name + <span class="string">&quot;】商品修改数量为：&quot;</span> + count + <span class="string">&quot; 吗?&quot;</span>) ) &#123;</span><br><span class="line"><span class="comment">//发起请求。给服务器保存修改</span></span><br><span class="line">location.<span class="property">href</span> =</span><br><span class="line"><span class="string">&quot;http://localhost:8080/book/cartServlet?action=updateCount&amp;count=&quot;</span>+count+<span class="string">&quot;&amp;id=&quot;</span>+id;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// defaultValue 属性是表单项 Dom 对象的属性。它表示默认的 value 属性值。</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">defaultValue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-8、首页，购物车数据回显"><a href="#1-8、首页，购物车数据回显" class="headerlink" title="1.8、首页，购物车数据回显"></a>1.8、首页，购物车数据回显</h4><p>在添加商品到购物车的时候，保存最后一个添加的商品名称：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129213555886.png" alt="image-20211129213555886"></p><p>在 pages&#x2F;client&#x2F;index.jsp 页面中输出购物车信息：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;empty sessionScope.cart.items&#125;&quot;</span>&gt;</span><br><span class="line">&lt;%--购物车为空的输出--%&gt;</span><br><span class="line">&lt;span&gt; &lt;/span&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;当前购物车为空&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;not empty sessionScope.cart.items&#125;&quot;</span>&gt;</span><br><span class="line">&lt;%--购物车非空的输出--%&gt;</span><br><span class="line">&lt;span&gt;您的购物车中有 $&#123;sessionScope.cart.totalCount&#125; 件商品&lt;/span&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">您刚刚将&lt;span style=<span class="string">&quot;color: red&quot;</span>&gt;$&#123;sessionScope.lastName&#125;&lt;/span&gt;加入到了购物车中</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、项目第七阶段：订单"><a href="#2、项目第七阶段：订单" class="headerlink" title="2、项目第七阶段：订单"></a>2、项目第七阶段：订单</h2><h3 id="2-1、订单模块的分析："><a href="#2-1、订单模块的分析：" class="headerlink" title="2.1、订单模块的分析："></a>2.1、订单模块的分析：</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211129215246972.png" alt="image-20211129215246972"></p><h3 id="2-2：订单模块的实现"><a href="#2-2：订单模块的实现" class="headerlink" title="2.2：订单模块的实现"></a>2.2：订单模块的实现</h3><h4 id="2-2-1、创建订单模块的数据库表"><a href="#2-2-1、创建订单模块的数据库表" class="headerlink" title="2.2.1、创建订单模块的数据库表"></a>2.2.1、创建订单模块的数据库表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_order(</span><br><span class="line">`order_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">primary</span> key,</span><br><span class="line">`create_time` datetime,</span><br><span class="line">`price` <span class="type">decimal</span>(<span class="number">11</span>,<span class="number">2</span>),</span><br><span class="line">`status` <span class="type">int</span>,</span><br><span class="line">`user_id` <span class="type">int</span>,</span><br><span class="line"><span class="keyword">foreign</span> key(`user_id`) <span class="keyword">references</span> t_user(`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_order_item(</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">`count` <span class="type">int</span>,</span><br><span class="line">`price` <span class="type">decimal</span>(<span class="number">11</span>,<span class="number">2</span>),</span><br><span class="line">`total_price` <span class="type">decimal</span>(<span class="number">11</span>,<span class="number">2</span>),</span><br><span class="line">`order_id` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">foreign</span> key(`order_id`) <span class="keyword">references</span> t_order(`order_id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2-2-2、创建订单模块的数据模型"><a href="#2-2-2、创建订单模块的数据模型" class="headerlink" title="2.2.2、创建订单模块的数据模型"></a>2.2.2、创建订单模块的数据模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 订单</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String orderId;</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="keyword">private</span> BigDecimal price;</span><br><span class="line"><span class="comment">// 0 未发货，1 已发货，2 表示已签收</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> Integer userId;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 订单项</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer count;</span><br><span class="line"><span class="keyword">private</span> BigDecimal price;</span><br><span class="line"><span class="keyword">private</span> BigDecimal totalPrice;</span><br><span class="line"><span class="keyword">private</span> String orderId;</span><br></pre></td></tr></table></figure><h4 id="2-2-3、编写订单模块的-Dao-程序和测试"><a href="#2-2-3、编写订单模块的-Dao-程序和测试" class="headerlink" title="2.2.3、编写订单模块的 Dao 程序和测试"></a>2.2.3、编写订单模块的 Dao 程序和测试</h4><p>OrderDao 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">saveOrder</span><span class="params">(Order order)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderDao 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">saveOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_order(`order_id`,`create_time`,`price`,`status`,`user_id`)</span></span><br><span class="line"><span class="string">values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">update(sql,order.getOrderId(),order.getCreateTime(),order.getPrice(),order.getStatus(),order.getUs</span><br><span class="line"><span class="title function_">erId</span><span class="params">()</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OrderItemDao 接口和实现类似</p><h4 id="2-2-4、编写订单模块的-Service-和测试"><a href="#2-2-4、编写订单模块的-Service-和测试" class="headerlink" title="2.2.4、编写订单模块的 Service 和测试"></a>2.2.4、编写订单模块的 Service 和测试</h4><p>OrderService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(Cart cart,Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderService 实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="type">OrderItemDao</span> <span class="variable">orderItemDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItemDaoImpl</span>();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(Cart cart, Integer userId)</span> &#123;</span><br><span class="line"><span class="comment">// 订单号===唯一性</span></span><br><span class="line"><span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> System.currentTimeMillis()+<span class="string">&quot;&quot;</span>+userId;</span><br><span class="line"><span class="comment">// 创建一个订单对象</span></span><br><span class="line"><span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(orderId,<span class="keyword">new</span> <span class="title class_">Date</span>(),cart.getTotalPrice(), <span class="number">0</span>,userId);</span><br><span class="line"><span class="comment">// 保存订单</span></span><br><span class="line">orderDao.saveOrder(order);</span><br><span class="line"><span class="comment">// 遍历购物车中每一个商品项转换成为订单项保存到数据库</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, CartItem&gt;entry : cart.getItems().entrySet())&#123;</span><br><span class="line"><span class="comment">// 获取每一个购物车中的商品项</span></span><br><span class="line"><span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"><span class="comment">// 转换为每一个订单项</span></span><br><span class="line"><span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">OrderItem</span>(<span class="literal">null</span>,cartItem.getName(),cartItem.getCount(),cartItem.getPrice(),cartItem.getTotalPrice(),</span><br><span class="line">orderId);</span><br><span class="line"><span class="comment">// 保存订单项到数据库</span></span><br><span class="line">orderItemDao.saveOrderItem(orderItem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清空购物车</span></span><br><span class="line">cart.clear();</span><br><span class="line"><span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-5、编写订单模块的-web和联调"><a href="#2-2-5、编写订单模块的-web和联调" class="headerlink" title="2.2.5、编写订单模块的 web和联调"></a>2.2.5、编写订单模块的 web和联调</h4><p>修改 OrderService 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="type">OrderItemDao</span> <span class="variable">orderItemDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItemDaoImpl</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(Cart cart, Integer userId)</span> &#123;</span><br><span class="line"><span class="comment">// 订单号===唯一性</span></span><br><span class="line"><span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> System.currentTimeMillis()+<span class="string">&quot;&quot;</span>+userId;</span><br><span class="line"><span class="comment">// 创建一个订单对象</span></span><br><span class="line"><span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(orderId,<span class="keyword">new</span> <span class="title class_">Date</span>(),cart.getTotalPrice(), <span class="number">0</span>,userId);</span><br><span class="line"><span class="comment">// 保存订单</span></span><br><span class="line">orderDao.saveOrder(order);</span><br><span class="line"><span class="comment">// 遍历购物车中每一个商品项转换成为订单项保存到数据库</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, CartItem&gt;entry : cart.getItems().entrySet())&#123;</span><br><span class="line"><span class="comment">// 获取每一个购物车中的商品项</span></span><br><span class="line"><span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"><span class="comment">// 转换为每一个订单项</span></span><br><span class="line"><span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">OrderItem</span>(<span class="literal">null</span>,cartItem.getName(),cartItem.getCount(),cartItem.getPrice(),cartItem.getTotalPrice(),</span><br><span class="line">orderId);</span><br><span class="line"><span class="comment">// 保存订单项到数据库</span></span><br><span class="line">orderItemDao.saveOrderItem(orderItem);</span><br><span class="line"><span class="comment">// 更新库存和销量</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.queryBookById(cartItem.getId());</span><br><span class="line">book.setSales( book.getSales() + cartItem.getCount() );</span><br><span class="line">book.setStock( book.getStock() - cartItem.getCount() );</span><br><span class="line">bookDao.updateBook(book);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清空购物车</span></span><br><span class="line">cart.clear();</span><br><span class="line"><span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderServlet 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderServiceImpl</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生成订单</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span></span><br><span class="line">ServletException, IOException &#123;</span><br><span class="line"><span class="comment">// 先获取 Cart 购物车对象</span></span><br><span class="line"><span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> (Cart) req.getSession().getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line"><span class="comment">// 获取 Userid</span></span><br><span class="line"><span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> (User) req.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (loginUser == <span class="literal">null</span>) &#123;</span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;/pages/user/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getId();</span><br><span class="line"><span class="comment">// 调用 orderService.createOrder(Cart,Userid);生成订单</span></span><br><span class="line"><span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> orderService.createOrder(cart, userId);</span><br><span class="line"><span class="comment">// req.setAttribute(&quot;orderId&quot;, orderId);</span></span><br><span class="line"><span class="comment">// 请求转发到/pages/cart/checkout.jsp</span></span><br><span class="line"><span class="comment">// req.getRequestDispatcher(&quot;/pages/cart/checkout.jsp&quot;).forward(req, resp);</span></span><br><span class="line">req.getSession().setAttribute(<span class="string">&quot;orderId&quot;</span>,orderId);</span><br><span class="line">resp.sendRedirect(req.getContextPath()+<span class="string">&quot;/pages/cart/checkout.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 pages&#x2F;cart&#x2F;cart.jsp 页面，结账的请求地址</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211130131548477.png" alt="image-20211130131548477"></p><p>修改 pages&#x2F;cart&#x2F;checkout.jsp 页面，输出订单号</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211130131605934.png" alt="image-20211130131605934"></p><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><h3 id="1、Filter-什么是过滤器"><a href="#1、Filter-什么是过滤器" class="headerlink" title="1、Filter 什么是过滤器"></a>1、Filter 什么是过滤器</h3><p>1、Filter 过滤器它是 JavaWeb 的三大组件之一。</p><p>三大组件分别是：Servlet 程序、Listener 监听器、Filter 过滤器</p><p>2、Filter 过滤器它是 JavaEE 的规范。也就是接口</p><p>3、Filter 过滤器它的作用是：拦截请求，过滤响应。</p><p>拦截请求常见的应用场景有：</p><pre><code> 1、权限检查 </code></pre><p>​2、日记操作</p><p>​3、事务管理 ……等等</p><h3 id="2、Filter-的初体验"><a href="#2、Filter-的初体验" class="headerlink" title="2、Filter 的初体验"></a>2、Filter 的初体验</h3><p>要求：在你的 web 工程下，有一个 admin 目录。这个 admin 目录下的所有资源（html 页面、jpg 图片、jsp 文件、等等）都必 须是用户登录之后才允许访问。</p><p>思考：根据之前我们学过内容。我们知道，用户登录之后都会把用户登录的信息保存到 Session 域中。所以要检查用户是否 登录，可以判断 Session 中否包含有用户登录的信息即可！！！</p><p>Filter 的工作流程图</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211130150125522.png" alt="image-20211130150125522"></p><p>Filter 的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* doFilter 方法，专门用于拦截请求。可以做权限检查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain</span></span><br><span class="line"><span class="params">filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpServletRequest.getSession();</span><br><span class="line"><span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">// 如果等于 null，说明还没有登录</span></span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 让程序继续往下访问用户的目标资源</span></span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给 filter 起一个别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 filter 的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter-mapping 配置 Filter 过滤器的拦截路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter-name 表示当前的拦截路径给哪个 filter 使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--url-pattern 配置拦截路径</span></span><br><span class="line"><span class="comment">/ 表示请求地址为：http://ip:port/工程路径/ 映射到 IDEA 的 web 目录</span></span><br><span class="line"><span class="comment">/admin/* 表示请求地址为：http://ip:port/工程路径/admin/*</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Filter 过滤器的使用步骤：</p><p>1、编写一个类去实现 Filter 接口</p><p>2、实现过滤方法 doFilter()</p><p>3、到 web.xml 中去配置 Filter 的拦截路</p><h3 id="3、Filter-的生命周期"><a href="#3、Filter-的生命周期" class="headerlink" title="3、Filter 的生命周期"></a>3、Filter 的生命周期</h3><p>Filter 的生命周期包含几个方法</p><p>1、构造器方法</p><p>2、init 初始化方法</p><p>​第 1，2 步，在 web 工程启动的时候执行（Filter 已经创建）</p><p>3、doFilter 过滤方法</p><p>​第 3 步，每次拦截到请求，就会执行</p><p>4、destroy 销毁</p><p>​第 4 步，停止 web 工程的时候，就会执行（停止 web 工程，也会销毁 Filter 过滤</p><h3 id="4、FilterConfig-类"><a href="#4、FilterConfig-类" class="headerlink" title="4、FilterConfig 类"></a>4、FilterConfig 类</h3><p>FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。</p><p>Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，</p><p>这里包含了 Filter 配置文件的配置信息。</p><p>FilterConfig 类的作用是获取 filter 过滤器的配置内容</p><p>1、获取 Filter 的名称 filter-name 的内容</p><p>2、获取在 Filter 中配置的 init-param 初始化参数</p><p>3、获取 ServletContext 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;2.Filter 的 init(FilterConfig filterConfig)初始化&quot;</span>);</span><br><span class="line"><span class="comment">// 1、获取 Filter 的名称 filter-name 的内容</span></span><br><span class="line">System.out.println(<span class="string">&quot;filter-name 的值是：&quot;</span> + filterConfig.getFilterName());</span><br><span class="line"><span class="comment">// 2、获取在 web.xml 中配置的 init-param 初始化参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数 username 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数 url 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="string">&quot;url&quot;</span>));</span><br><span class="line"><span class="comment">// 3、获取 ServletContext 对象</span></span><br><span class="line">System.out.println(filterConfig.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">web.xml 配置：</span><br><span class="line"><span class="comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给 filter 起一个别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 filter 的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、FilterChain-过滤器链"><a href="#5、FilterChain-过滤器链" class="headerlink" title="5、FilterChain 过滤器链"></a>5、FilterChain 过滤器链</h3><p>Filter 过滤器</p><p>Chain 链，链条</p><p>FilterChain 就是过滤器链（多个过滤器如何一起工作）</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211130191218830.png" alt="image-20211130191218830"></p><h3 id="6、Filter-的拦截路径"><a href="#6、Filter-的拦截路径" class="headerlink" title="6、Filter 的拦截路径"></a>6、Filter 的拦截路径</h3><h4 id="–精确匹配"><a href="#–精确匹配" class="headerlink" title="–精确匹配"></a>–精确匹配</h4><p><code>&lt;url-patter&gt;/target.jsp&lt;/url-pattern&gt;</code></p><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p><h4 id="–目录匹配"><a href="#–目录匹配" class="headerlink" title="–目录匹配"></a>–目录匹配</h4><p><code>&lt;url-patter&gt;/admin/*&lt;/url-pattern&gt;</code></p><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>*</p><h4 id="–后缀名匹配"><a href="#–后缀名匹配" class="headerlink" title="–后缀名匹配"></a>–后缀名匹配</h4><p><code>&lt;url-patter&gt;*.html&lt;/url-pattern&gt;</code></p><p>以上配置的路径，表示请求地址必须以.html 结尾才会拦截到</p><p><strong>Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！</strong></p><h2 id="7、书城第八阶段："><a href="#7、书城第八阶段：" class="headerlink" title="7、书城第八阶段："></a>7、书城第八阶段：</h2><h3 id="1、使用-Filter-过滤器拦截-x2F-pages-x2F-manager-x2F-所有内容，实-现权限检查"><a href="#1、使用-Filter-过滤器拦截-x2F-pages-x2F-manager-x2F-所有内容，实-现权限检查" class="headerlink" title="1、使用 Filter 过滤器拦截&#x2F;pages&#x2F;manager&#x2F;所有内容，实 现权限检查"></a>1、使用 Filter 过滤器拦截&#x2F;pages&#x2F;manager&#x2F;所有内容，实 现权限检查</h3><p>Filter代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> httpServletRequest.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">httpServletRequest.getRequestDispatcher(<span class="string">&quot;/pages/user/login.jsp&quot;</span>).forward(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ManagerFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.izumi.filter.ManagerFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ManagerFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/pages/manager/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/manager/bookServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、ThreadLocal-的使用"><a href="#2、ThreadLocal-的使用" class="headerlink" title="2、ThreadLocal 的使用"></a>2、ThreadLocal 的使用</h3><p>ThreadLocal 的作用，它可以解决多线程的数据安全问题。</p><p>ThreadLocal 它可以给当前线程关联一个数据（可以是普通变量，可以是对象，也可以是数组，集合）</p><p>ThreadLocal 的特点：</p><p>1、ThreadLocal 可以为当前线程关联一个数据。（它可以像 Map 一样存取数据，key 为当前线程）</p><p>2、每一个 ThreadLocal 对象，只能为当前线程关联一个数据，如果要为当前线程关联多个数据，</p><p>就需要使用多个 ThreadLocal 对象实例。</p><p>3、每个 ThreadLocal 对象实例定义的时候，一般都是 static 类型 4、ThreadLocal 中保存数据，</p><p>在线程销毁后。会由 JVM 虚拟自动释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">System.out.println(<span class="string">&quot;OrderService 当前线程[&quot;</span> + name + <span class="string">&quot;]中保存的数据是：&quot;</span> +</span><br><span class="line">ThreadLocalTest.threadLocal.get());</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">OrderDao</span>().saveOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrder</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">System.out.println(<span class="string">&quot;OrderDao 当前线程[&quot;</span> + name + <span class="string">&quot;]中保存的数据是：&quot;</span> +</span><br><span class="line">ThreadLocalTest.threadLocal.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalTest</span> &#123;</span><br><span class="line"><span class="comment">// public static Map&lt;String,Object&gt; data = new Hashtable&lt;String,Object&gt;();</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Object&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Object&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 在 Run 方法中，随机生成一个变量（线程要关联的数据），然后以当前线程名为 key 保存到 map 中</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 获取当前线程名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">System.out.println(<span class="string">&quot;线程[&quot;</span>+name+<span class="string">&quot;]生成的随机数是：&quot;</span> + i);</span><br><span class="line"><span class="comment">// data.put(name,i);</span></span><br><span class="line">threadLocal.set(i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">OrderService</span>().createOrder();</span><br><span class="line"><span class="comment">// 在 Run 方法结束之前，以当前线程名获取出数据并打印。查看是否可以取出操作</span></span><br><span class="line"><span class="comment">// Object o = data.get(name);</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">System.out.println(<span class="string">&quot;在线程[&quot;</span>+name+<span class="string">&quot;]快结束时取出关联的数据是：&quot;</span> + o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>()).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用-Filter-和-ThreadLocal-组合管理事务"><a href="#3、使用-Filter-和-ThreadLocal-组合管理事务" class="headerlink" title="3、使用 Filter 和 ThreadLocal 组合管理事务"></a>3、使用 Filter 和 ThreadLocal 组合管理事务</h3><h4 id="3-1、使用-ThreadLocal-来确保所有-dao-操作都在同一个-Connection-连接对象中完-成"><a href="#3-1、使用-ThreadLocal-来确保所有-dao-操作都在同一个-Connection-连接对象中完-成" class="headerlink" title="3.1、使用 ThreadLocal 来确保所有 dao 操作都在同一个 Connection 连接对象中完 成"></a>3.1、使用 ThreadLocal 来确保所有 dao 操作都在同一个 Connection 连接对象中完 成</h4><p>原理分析图：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211130221720112.png" alt="image-20211130221720112"></p><p>JdbcUtils 工具类的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource dataSource;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; conns = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Connection&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">// 读取 jdbc.properties 属性配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span></span><br><span class="line">JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"><span class="comment">// 从流中加载数据</span></span><br><span class="line">properties.load(inputStream);</span><br><span class="line"><span class="comment">// 创建 数据库连接 池</span></span><br><span class="line">dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取数据库连接池中的连接</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 如果返回 null,说明获取连接失败&lt;br/&gt;有值就是获取连接成功</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> conns.get();</span><br><span class="line"><span class="keyword">if</span> (conn == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = dataSource.getConnection();<span class="comment">//从数据库连接池中获取连接</span></span><br><span class="line">conns.set(conn); <span class="comment">// 保存到 ThreadLocal 对象中，供后面的 jdbc 操作使用</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 设置为手动管理事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 提交事务，并关闭释放连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">commitAndClose</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> conns.get();</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123; <span class="comment">// 如果不等于 null，说明 之前使用过连接，操作过数据库</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.commit(); <span class="comment">// 提交 事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close(); <span class="comment">// 关闭连接，资源资源</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一定要执行 remove 操作，否则就会出错。（因为 Tomcat 服务器底层使用了线程池技术）</span></span><br><span class="line">conns.remove();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 回滚事务，并关闭释放连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rollbackAndClose</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> conns.get();</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123; <span class="comment">// 如果不等于 null，说明 之前使用过连接，操作过数据库</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.rollback();<span class="comment">//回滚事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close(); <span class="comment">// 关闭连接，资源资源</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一定要执行 remove 操作，否则就会出错。（因为 Tomcat 服务器底层使用了线程池技术）</span></span><br><span class="line">conns.remove();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 关闭连接，放回数据库连接池</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">public static void close(Connection conn)&#123;</span></span><br><span class="line"><span class="comment">if (conn != null) &#123;</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">conn.close();</span></span><br><span class="line"><span class="comment">&#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 BaseDao</p><p>&#x2F;&#x2F;将 每个 catch抛出去，</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> queryRunner.update(connection, sql, args);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、使用-Filter-过滤器统一给所有的-Service-方法都加上-try-catch。来进行实现的-管理。"><a href="#3-2、使用-Filter-过滤器统一给所有的-Service-方法都加上-try-catch。来进行实现的-管理。" class="headerlink" title="3.2、使用 Filter 过滤器统一给所有的 Service 方法都加上 try-catch。来进行实现的 管理。"></a>3.2、使用 Filter 过滤器统一给所有的 Service 方法都加上 try-catch。来进行实现的 管理。</h4><p>原理分析图</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211130224808210.png" alt="image-20211130224808210"></p><p>Filter 类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain</span></span><br><span class="line"><span class="params">filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">JdbcUtils.commitAndClose();<span class="comment">// 提交事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">JdbcUtils.rollbackAndClose();<span class="comment">//回滚事务</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">在 web.xml 中的配置：</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;TransactionFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;com.atguigu.filter.TransactionFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;TransactionFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;!-- <span class="comment">/* 表示当前工程下所有请求 --&gt;</span></span><br><span class="line"><span class="comment">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><p>一定要记得把 BaseServlet 中的异常往外抛给 Filter 过滤器</p><h4 id="3-3、将所有异常都统一交给-Tomcat，让-Tomcat-展示友好的错误"><a href="#3-3、将所有异常都统一交给-Tomcat，让-Tomcat-展示友好的错误" class="headerlink" title="3.3、将所有异常都统一交给 Tomcat，让 Tomcat 展示友好的错误"></a>3.3、将所有异常都统一交给 Tomcat，让 Tomcat 展示友好的错误</h4><p>web.xml配置页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--error-page 标签配置，服务器出错之后，自动跳转的页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--error-code 是错误类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--location 标签表示。要跳转去的页面路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/pages/error/error500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--error-page 标签配置，服务器出错之后，自动跳转的页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--error-code 是错误类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--location 标签表示。要跳转去的页面路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/pages/error/error404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSON、AJAX、i18n"><a href="#JSON、AJAX、i18n" class="headerlink" title="JSON、AJAX、i18n"></a>JSON、AJAX、i18n</h2><h3 id="1、什么是-JSON"><a href="#1、什么是-JSON" class="headerlink" title="1、什么是 JSON?"></a>1、什么是 JSON?</h3><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式。</p><p>易于人阅读和编写。同时也易于机器解析和生成。</p><p>JSON 采用完全独立于语言的文本格式，而且很多语言都提供了对 json 的支持（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。</p><p>这样就使得 JSON 成为理想的数据交换格式。</p><p>json 是一种轻量级的数据交换格式。</p><p>轻量级指的是跟 xml 做比较。 数据交换指的是客户端和服务器之间业务数据的传递格式。</p><h3 id="1-1、JSON-在-JavaScript-中的使用。"><a href="#1-1、JSON-在-JavaScript-中的使用。" class="headerlink" title="1.1、JSON 在 JavaScript 中的使用。"></a>1.1、JSON 在 JavaScript 中的使用。</h3><p>1.1.1、json 的定义 json 是由键值对组成，并且由花括号（大括号）包围。</p><p>每个键由引号引起来，键和值之间使用冒号进行分隔， 多组键值对之间进行逗号进行分隔。</p><h4 id="json-定义示例"><a href="#json-定义示例" class="headerlink" title="json 定义示例"></a>json 定义示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json的定义</span></span><br><span class="line">        <span class="keyword">var</span> jsonObj = &#123;</span><br><span class="line">            <span class="string">&quot;key1&quot;</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;key3&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;key4&quot;</span>: [<span class="number">11</span>, <span class="string">&quot;fsf&quot;</span>, <span class="literal">false</span>],</span><br><span class="line">            <span class="string">&quot;key5&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;key551&quot;</span>: <span class="number">551</span>,</span><br><span class="line">                <span class="string">&quot;key_value88&quot;</span>: <span class="string">&quot;value88&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;key6&quot;</span>: [</span><br><span class="line">                &#123;<span class="string">&quot;key6_1&quot;</span>: <span class="number">889</span>, <span class="string">&quot;key6_1_2&quot;</span>: <span class="number">612</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;key6_2&quot;</span>: <span class="number">62</span>, <span class="string">&quot;key6_2_2&quot;</span>: <span class="number">622</span>&#125;</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h4 id="1-1-2、json-的访问"><a href="#1-1-2、json-的访问" class="headerlink" title="1.1.2、json 的访问"></a>1.1.2、json 的访问</h4><p>json 本身是一个对象。</p><p>json 中的 key 我们可以理解为是对象中的一个属性。</p><p>json 中的 key 访问就跟访问对象的属性一样：</p><p>json 对象.key json 访问示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json的访问</span></span><br><span class="line"><span class="comment">// alert(jsonObj.key1)</span></span><br><span class="line"><span class="comment">// alert(jsonObj.key2)</span></span><br><span class="line"><span class="comment">// alert(jsonObj.key3)</span></span><br><span class="line"><span class="comment">// alert(jsonObj.key4)</span></span><br><span class="line"><span class="comment">// for (var i = 0; i&lt;jsonObj.key4.length;i++)&#123;</span></span><br><span class="line"><span class="comment">// alert(jsonObj.key4[i])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// alert(jsonObj.key5.key551)</span></span><br><span class="line"><span class="comment">// alert(jsonObj.key5.key_value88)</span></span><br><span class="line"><span class="comment">/* 取出的 每一个jsonItem都是 json对象</span></span><br><span class="line"><span class="comment">var jsonItem = jsonObj.key6[0]</span></span><br><span class="line"><span class="comment">// alert(jsonItem.key6_1)</span></span><br><span class="line"><span class="comment">alert(jsonItem.key6_1_2)*/</span></span><br><span class="line"><span class="keyword">var</span> jsonItem2 = jsonObj.<span class="property">key6</span>[<span class="number">1</span>];</span><br><span class="line"><span class="title function_">alert</span>(jsonItem2.<span class="property">key6_2_2</span>)</span><br></pre></td></tr></table></figure><h4 id="1-1-3、json-的两个常用方法"><a href="#1-1-3、json-的两个常用方法" class="headerlink" title="1.1.3、json 的两个常用方法"></a>1.1.3、json 的两个常用方法</h4><p>json 的存在有两种形式。</p><p>一种是：对象的形式存在，我们叫它 json 对象。</p><p>一种是：字符串的形式存在，我们叫它 json 字符串。</p><p>一般我们要操作 json 中的数据的时候，需要 json 对象的格式。</p><p>一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。</p><p>JSON.stringify() 把 json 对象转换成为 json 字符串</p><p>JSON.parse() 把 json 字符串转换成为 json 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json对象转字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonObjString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonObj);</span><br><span class="line"><span class="title function_">alert</span>(jsonObjString)</span><br><span class="line">       <span class="comment">// json字符串转json对象</span></span><br><span class="line"><span class="keyword">var</span> jsonObj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonObjString);</span><br><span class="line"><span class="title function_">alert</span>(jsonObj2.<span class="property">key1</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2、JSON-在-java-中的使用"><a href="#1-2、JSON-在-java-中的使用" class="headerlink" title="1.2、JSON 在 java 中的使用"></a>1.2、JSON 在 java 中的使用</h3><h4 id="1-2-1、javaBean-和-json-的互转"><a href="#1-2-1、javaBean-和-json-的互转" class="headerlink" title="1.2.1、javaBean 和 json 的互转"></a>1.2.1、javaBean 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//javaBean 和 Json的转换</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>, <span class="string">&quot;天干物燥&quot;</span>);</span><br><span class="line">    <span class="comment">//创建 Gson对象示例</span></span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">    <span class="comment">//调用 gson 对象的 方法 toJson 将 javaBean对象转换成 json 字符串类型</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> gson.toJson(person);</span><br><span class="line">    System.out.println(jsonString);</span><br><span class="line">    <span class="comment">//调用 gson对象 的 fromJson方法 可以将 json对象转换回 JavaBean对象</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> gson.fromJson(jsonString, Person.class);</span><br><span class="line">    System.out.println(person1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2、List-和-json-的互转"><a href="#1-2-2、List-和-json-的互转" class="headerlink" title="1.2.2、List 和 json 的互转"></a>1.2.2、List 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonListType</span> <span class="keyword">extends</span> <span class="title class_">TypeToken</span>&lt;List&lt;Person&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">//创建一个 类继承 com.google.gson.reflect.TypeToken类，泛型写上json转回 集合的类型</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//json 和 list 对象 的互转</span></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>,<span class="string">&quot;steve&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>,<span class="string">&quot;niko&quot;</span>));</span><br><span class="line">        <span class="comment">//创建 Gson对象示例</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">toJson</span> <span class="operator">=</span> gson.toJson(personList);</span><br><span class="line">        System.out.println(toJson);</span><br><span class="line">        <span class="comment">//-------------------------</span></span><br><span class="line">        <span class="comment">//json转 list集合</span></span><br><span class="line">       List&lt;Person&gt; personList1 = gson.fromJson(toJson, <span class="keyword">new</span> <span class="title class_">PersonListType</span>().getType());</span><br><span class="line">        System.out.println( personList1.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3、map-和-json-的互转"><a href="#1-2-3、map-和-json-的互转" class="headerlink" title="1.2.3、map 和 json 的互转"></a>1.2.3、map 和 json 的互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//json 和 map 的相互转换</span></span><br><span class="line">    Map&lt;Integer,Person&gt; personMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    personMap.put(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>,<span class="string">&quot;乔布斯&quot;</span>));</span><br><span class="line">    personMap.put(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>,<span class="string">&quot;图灵&quot;</span>));</span><br><span class="line">    <span class="comment">//创建 Gson 对象实例</span></span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">toJson</span> <span class="operator">=</span> gson.toJson(personMap);</span><br><span class="line">    System.out.println(toJson);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将json 转换回 map集合，这里使用到匿名内部类</span></span><br><span class="line">    Map&lt;Integer,Person&gt; personMap2 = gson.fromJson(toJson, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;HashMap&lt;Integer, Person&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    System.out.println(personMap2.getClass());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、AJAX-请求"><a href="#2、AJAX-请求" class="headerlink" title="2、AJAX 请求"></a>2、AJAX 请求</h3><h4 id="2-1、什么是-AJAX-请求"><a href="#2-1、什么是-AJAX-请求" class="headerlink" title="2.1、什么是 AJAX 请求"></a>2.1、什么是 AJAX 请求</h4><p>AJAX 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发 技术。</p><blockquote><p>ajax 是一种浏览器通过 js 异步发起请求，局部更新页面的技术。 Ajax 请求的局部更新，浏览器地址栏不会发生变化 局部更新不会舍弃原来页面的内容</p></blockquote><h4 id="2-2、原生-AJAX-请求的示例："><a href="#2-2、原生-AJAX-请求的示例：" class="headerlink" title="2.2、原生 AJAX 请求的示例："></a>2.2、原生 AJAX 请求的示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajaxRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//              1、我们首先要创建XMLHttpRequest </span></span><br><span class="line">            <span class="keyword">var</span> xmlHttpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//              2、调用open方法设置请求参数 true表示异步，false表示同步</span></span><br><span class="line">            xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;http://localhost:8080/json_ajax_i18n/ajaxServlet?action=javaScriptAjax&quot;</span>,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//              4、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span></span><br><span class="line">            xmlHttpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (xmlHttpRequest.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp;xmlHttpRequest.<span class="property">status</span>==<span class="number">200</span>)&#123;</span><br><span class="line">                  <span class="keyword">var</span> jsonObj =<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xmlHttpRequest.<span class="property">responseText</span>);</span><br><span class="line">                  <span class="comment">//把响应的数据显示在页面上</span></span><br><span class="line">                  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div01&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;id:&quot;</span>+jsonObj.<span class="property">id</span>+<span class="string">&quot;  姓名：&quot;</span>+jsonObj.<span class="property">name</span></span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//              3、调用send方法发送请求</span></span><br><span class="line">            xmlHttpRequest.<span class="title function_">send</span>();</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、jQuery-中的-AJAX-请求"><a href="#2-3、jQuery-中的-AJAX-请求" class="headerlink" title="2.3、jQuery 中的 AJAX 请求"></a>2.3、jQuery 中的 AJAX 请求</h4><p><strong>$.ajax 方法</strong><br>url 表示请求的地址<br>type 表示请求的类型 GET 或 POST 请求<br>data 表示发送给服务器的数据<br>格式有两种：<br>一：name&#x3D;value&amp;name&#x3D;value<br>二：{key:value}<br>success 请求成功，响应的回调函数<br>dataType 响应的数据类型<br>常用的数据类型有：<br>text 表示纯文本<br>xml 表示 xml 数据<br>json 表示 json 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#ajaxBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,</span><br><span class="line"><span class="comment">// data:&quot;action=jQueryAjax&quot;,</span></span><br><span class="line"><span class="attr">data</span>:&#123;<span class="attr">action</span>:<span class="string">&quot;jQueryAjax&quot;</span>&#125;,</span><br><span class="line"><span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    </span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"><span class="comment">// alert(&quot;服务器返回的数据是：&quot; + data);</span></span><br><span class="line"><span class="comment">// var jsonObj = JSON.parse(data);</span></span><br><span class="line">$(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;编号：&quot;</span> + data.<span class="property">id</span> + <span class="string">&quot; , 姓名：&quot;</span> + data.<span class="property">name</span>);&#125;,</span><br><span class="line"></span><br><span class="line">dataType : <span class="string">&quot;json&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>**$.get  方法和 $.post  方法 **</p><p>url    请求的 url 地址</p><p>data  发送的数据</p><p>callback 成功的回调函数</p><p>type 返回的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax--get 请求</span></span><br><span class="line">$(<span class="string">&quot;#getBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="string">&quot;action=jQueryGet&quot;</span>,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">$(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot; get 编号：&quot;</span> + data.<span class="property">id</span> + <span class="string">&quot; , 姓名：&quot;</span> + data.<span class="property">name</span>);</span><br><span class="line">&#125;,<span class="string">&quot;json&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ajax--post 请求</span></span><br><span class="line">$(<span class="string">&quot;#postBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="string">&quot;action=jQueryPost&quot;</span>,</span><br><span class="line">       <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">$(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot; post 编号：&quot;</span> + data.<span class="property">id</span> + <span class="string">&quot; , 姓名：&quot;</span> + data.<span class="property">name</span>);</span><br><span class="line">    &#125;,<span class="string">&quot;json&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>**$.getJSON 方法 **</p><p>url 请求的 url 地址</p><p>data 发送给服务器的数据</p><p>callback 成功的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax--getJson 请求</span></span><br><span class="line">$(<span class="string">&quot;#getJSONBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> $.<span class="title function_">getJSON</span>(<span class="string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="string">&quot;action=jQueryGetJSON&quot;</span>,</span><br><span class="line">          <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">$(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot; getJSON 编号：&quot;</span> + data.<span class="property">id</span> + <span class="string">&quot; , 姓名：&quot;</span> + data.<span class="property">name</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>**表单序列化 serialize() **</p><p>serialize()可以把表单中所有表单项的内容都获取到，并以 name&#x3D;value&amp;name&#x3D;value 的形式进行拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax 请求</span></span><br><span class="line">$(<span class="string">&quot;#submit&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 把参数序列化</span></span><br><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="string">&quot;action=jQuerySerialize&amp;&quot;</span> +$(<span class="string">&quot;#form01&quot;</span>).<span class="title function_">serialize</span>(),<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">$(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot; Serialize 编号：&quot;</span> + data.<span class="property">id</span> + <span class="string">&quot; , 姓名：&quot;</span> + data.<span class="property">name</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3、书城项目第九阶段"><a href="#3、书城项目第九阶段" class="headerlink" title="3、书城项目第九阶段"></a>3、书城项目第九阶段</h2><h3 id="3-1、使用-AJAX-验证用户名是否可用"><a href="#3-1、使用-AJAX-验证用户名是否可用" class="headerlink" title="3.1、使用 AJAX 验证用户名是否可用"></a>3.1、使用 AJAX 验证用户名是否可用</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211201201524384.png" alt="image-20211201201524384"></p><p>UserServlet 程序中 ajaxExistsUsername 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">ajaxExistsUsername</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span></span><br><span class="line">ServletException, IOException &#123;</span><br><span class="line"><span class="comment">// 获取请求的参数 username</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="comment">// 调用 userService.existsUsername();</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">existsUsername</span> <span class="operator">=</span> userService.existsUsername(username);</span><br><span class="line"><span class="comment">// 把返回的结果封装成为 map 对象</span></span><br><span class="line">Map&lt;String,Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">resultMap.put(<span class="string">&quot;existsUsername&quot;</span>,existsUsername);</span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> gson.toJson(resultMap);</span><br><span class="line">resp.getWriter().write(json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>regist.jsp 页面中的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#username&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//1 获取用户名</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&quot;http://localhost:8080/book/userServlet&quot;</span>,<span class="string">&quot;action=ajaxExistsUsername&amp;username=&quot;</span> +username,<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (data.<span class="property">existsUsername</span>) &#123;</span><br><span class="line">$(<span class="string">&quot;span.errorMsg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;用户名已存在！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$(<span class="string">&quot;span.errorMsg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;用户名可用！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-2、使用-AJAX-修改把商品添加到购物车"><a href="#3-2、使用-AJAX-修改把商品添加到购物车" class="headerlink" title="3.2、使用 AJAX 修改把商品添加到购物车"></a>3.2、使用 AJAX 修改把商品添加到购物车</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211201202055848.png" alt="image-20211201202055848"></p><p>CartServlet 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">ajaxAddItem</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;调用 addItem方法&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;商品编号为：&quot;+req.getParameter(&quot;id&quot;));</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> (Cart) req.getSession().getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cart == <span class="literal">null</span>) &#123;</span><br><span class="line">            cart = <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;cart&quot;</span>, cart);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> WebUtils.StringtoInteger(req.getParameter(<span class="string">&quot;id&quot;</span>), -<span class="number">1</span>);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.queryBookById(id);</span><br><span class="line">        <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CartItem</span>(book.getId(), book.getName(), <span class="number">1</span>, book.getPrice(), book.getPrice());</span><br><span class="line">        cart.addItem(cartItem);</span><br><span class="line">        <span class="comment">//保存最后一个 添加的商品项到 session域中</span></span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;lastName&quot;</span>,cartItem.getName());</span><br><span class="line">        <span class="comment">//返回购物车总的商品数量和 添加的最后一个商品项</span></span><br><span class="line">        Map&lt;String,Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        resultMap.put(<span class="string">&quot;totalCount&quot;</span>,cart.getTotalCount());</span><br><span class="line">        resultMap.put(<span class="string">&quot;lastName&quot;</span>,cartItem.getName());</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> gson.toJson(resultMap);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>pages&#x2F;client&#x2F;index.jsp 页面 html 代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;empty sessionScope.cart.items&#125;&quot;</span>&gt;</span><br><span class="line">&lt;%--            购物车为空 不显示--%&gt;</span><br><span class="line">            &lt;div style=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><br><span class="line">               &lt;span class=<span class="string">&quot;cartTotalCount&quot;</span>&gt;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">               &lt;div class=<span class="string">&quot;cartLastName&quot;</span>&gt;</span><br><span class="line">                  &lt;span style=<span class="string">&quot;color: red&quot;</span> &gt;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">         &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">         &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;not empty sessionScope.cart.items&#125;&quot;</span>&gt;</span><br><span class="line">            &lt;%--            购物车非空--%&gt;</span><br><span class="line">            &lt;div style=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><br><span class="line">&lt;%--               &lt;span class=<span class="string">&quot;cartTotalCount&quot;</span>&gt;您的购物车中有$&#123;sessionScope.cart.totalCount&#125;件商品&lt;/span&gt;--%&gt;</span><br><span class="line">               &lt;span class=<span class="string">&quot;cartTotalCount&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">               &lt;div class=<span class="string">&quot;cartLastName&quot;</span>&gt;</span><br><span class="line">&lt;%--                  您刚刚将&lt;span style=<span class="string">&quot;color: red&quot;</span> &gt;$&#123;sessionScope.lastName&#125;&lt;/span&gt;加入到了购物车中--%&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">         &lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给加入购物车按钮绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;button.addToCart&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> bookId = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;bookId&quot;</span>);</span><br><span class="line">   <span class="comment">// location.href=&quot;cartServlet?action=addItem&amp;id=&quot; + bookId;</span></span><br><span class="line">   <span class="comment">//发 ajax 请求，添加商品到购物车</span></span><br><span class="line">   $.<span class="title function_">getJSON</span>(<span class="string">&quot;cartServlet&quot;</span>,<span class="string">&quot;action=ajaxAddItem&amp;id=&quot;</span>+bookId,<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      $(<span class="string">&quot;.cartTotalCount&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;您的购物车中有&quot;</span>+data.<span class="property">totalCount</span>+<span class="string">&quot;件商品&quot;</span>);</span><br><span class="line">      <span class="comment">// $(&quot;.cartLastName&quot;).text(data.lastName);</span></span><br><span class="line">      $(<span class="string">&quot;.cartLastName&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;您刚刚将&lt;span style=&#x27;color: red&#x27; &gt; &quot;</span>+data.<span class="property">lastName</span>+<span class="string">&quot; &lt;/span&gt;加入到了购物车中&quot;</span>)</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4、i18n-国际化（了解内容）"><a href="#4、i18n-国际化（了解内容）" class="headerlink" title="4、i18n 国际化（了解内容）"></a>4、i18n 国际化（了解内容）</h2><h3 id="什么是-i18n-国际化"><a href="#什么是-i18n-国际化" class="headerlink" title="什么是 i18n 国际化"></a>什么是 i18n 国际化</h3><p> 国际化（Internationalization）指的是同一个网站可以支持多种不同的语言，以方便不同国家，不同语种的用户访问。  关于国际化我们想到的最简单的方案就是为不同的国家创建不同的网站，比如苹果公司，他的英文官网是： <a href="http://www.apple.com/">http://www.apple.com</a> 而中国官网是 <a href="http://www.apple.com/cn">http://www.apple.com/cn</a>  苹果公司这种方案并不适合全部公司，而我们希望相同的一个网站，而不同人访问的时候可以根据用户所在的区域显示 不同的语言文字，而网站的布局样式等不发生改变。  于是就有了我们说的国际化，国际化总的来说就是同一个网站不同国家的人来访问可以显示出不同的语言。但实际上这 种需求并不强烈，一般真的有国际化需求的公司，主流采用的依然是苹果公司的那种方案，为不同的国家创建不同的页 面。所以国际化的内容我们了解一下即可。  国际化的英文 Internationalization，但是由于拼写过长，老外想了一个简单的写法叫做 I18N，代表的是 Internationalization 这个单词，以 I 开头，以 N 结尾，而中间是 18 个字母，所以简写为 I18N。以后我们说 I18N 和国际化是一个意思。</p><h3 id="4-2、国际化相关要素介绍"><a href="#4-2、国际化相关要素介绍" class="headerlink" title="4.2、国际化相关要素介绍"></a>4.2、国际化相关要素介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211201212824688.png" alt="image-20211201212824688"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity快速入门</title>
      <link href="//posts/850c6616.html"/>
      <url>//posts/850c6616.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity快速入门"><a href="#SpringSecurity快速入门" class="headerlink" title="SpringSecurity快速入门"></a>SpringSecurity快速入门</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Spring Security 是Spring 家族中的一个安全管理框架。相比与另外一个安全框架Shiro，它提供了更丰富的功能，社区资源也比Shiro丰富。<br>一般来说中大型的项目都是使用SpringSecurity来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity， Shiro的上手更加的简单。<br>一般Web应用的需要进行认证和授权。<br>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户<br>授权：经过认证后判断当前用户是否有权限进行某个操作<br>而认证和授权也是SpringSecurity作为安全框架的核心功能。</p><h2 id="2-快速上手"><a href="#2-快速上手" class="headerlink" title="2.快速上手"></a>2.快速上手</h2><p>pom.xml 中的 Spring Security 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要加入依赖，项目的所有接口都会被自动保护起来。</p><p>引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会在控制台输出</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426164336477.png" alt="image-20220426164336477" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426164244721.png" alt="image-20220426164244721" style="zoom:50%;" /><h2 id="3-认证"><a href="#3-认证" class="headerlink" title="3.认证"></a>3.认证</h2><h3 id="3-1-登录校验过程"><a href="#3-1-登录校验过程" class="headerlink" title="3.1 登录校验过程"></a>3.1 登录校验过程</h3><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426164457347.png" alt="image-20220426164457347" style="zoom:50%;" /><h3 id="3-2-SpringSecurity-认证流程"><a href="#3-2-SpringSecurity-认证流程" class="headerlink" title="3.2 SpringSecurity 认证流程"></a>3.2 SpringSecurity 认证流程</h3><p>SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426164827799.png" alt="image-20220426164827799" style="zoom: 50%;" /><p>UsernamePasswordAuthenticationFilter：负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要由它负责。</p><p>ExceptionTranslationFilter： 处理过器链中抛出的任何AccessDeniedException和AuthenticationException。</p><p>FilterSecuritylnterceptor：负责权限校验的过滤器。</p><p>我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426165455297.png" alt="image-20220426165455297" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426165234537.png" alt="image-20220426165234537" style="zoom: 50%;" /><p>认证流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426170002862.png" alt="image-20220426170002862"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220426170119740.png" alt="image-20220426170119740"></p><h3 id="3-3-思路"><a href="#3-3-思路" class="headerlink" title="3.3 思路"></a>3.3 思路</h3><p>登录<br>①自定义登录接口<br>调用ProviderManager的方法进行认证如果认证通过生成jwt<br>把用户信息存入redis中<br>②自定义UserDetailsService<br>在这个实现列中去查询数据库</p><p>校验：<br>①定义Jwt认证过滤器<br>获取token<br>解析token获取其中的userid<br>从redis中获取用户信息<br>存入SecurityContextHolder</p><blockquote><p>1、严格来说，使用jwt是不用redis的，因为jwt初衷就是为了无状态，你加上redis，就违背了初衷，这也是网上对jwt最为诟病的一个地方。<br>2、使用redis并不是为了减轻数据库的压力，因为jwt本身是可以在payload中放入一些用户基本信息的，在前端携带token访问时，对token进行解析，可以获取到这些数据并写入SecurityContextHolder当中，这样在后面的处理当中，都可以获取到当前用户的相关信息。<br>3、由于jwt的无状态，后端是没法感知和控制用户的在线状态的，所以加入了redis这一层，在校验token的同时检查redis相关状态从而实现后端对用户状态的控制。<br>4、所以对于无状态应用，jwt是再好不过的一个东西，但是对于我们常见的有状态应用，使用一个uuid也是能达到相同的效果的。</p></blockquote><p>自定义UserDetailsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServeException</span>(<span class="string">&quot;用户名不能为空！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询账号是否存在</span></span><br><span class="line">    <span class="type">UserAuth</span> <span class="variable">user</span> <span class="operator">=</span> userAuthDao.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;UserAuth&gt;()</span><br><span class="line">            .select(UserAuth::getId, UserAuth::getUserInfoId, UserAuth::getUsername, UserAuth::getPassword, UserAuth::getLoginType)</span><br><span class="line">            .eq(UserAuth::getUsername, username));</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServeException</span>(<span class="string">&quot;用户名不存在!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询账号信息</span></span><br><span class="line">    <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userInfoDao.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;UserInfo&gt;()</span><br><span class="line">            .select(UserInfo::getId, UserInfo::getEmail, UserInfo::getNickname, UserInfo::getAvatar, UserInfo::getIntro, UserInfo::getWebSite, UserInfo::getIsDisable)</span><br><span class="line">            .eq(UserInfo::getId, user.getUserInfoId()));</span><br><span class="line">    <span class="comment">// 查询账号角色</span></span><br><span class="line">    List&lt;String&gt; roleList = roleDao.listRolesByUserInfoId(userInfo.getId());</span><br><span class="line">    <span class="comment">// 查询账号点赞信息</span></span><br><span class="line">    Set&lt;Integer&gt; articleLikeSet = (Set&lt;Integer&gt;) redisTemplate.boundHashOps(ARTICLE_USER_LIKE).get(userInfo.getId().toString());</span><br><span class="line">    Set&lt;Integer&gt; commentLikeSet = (Set&lt;Integer&gt;) redisTemplate.boundHashOps(COMMENT_USER_LIKE).get(userInfo.getId().toString());</span><br><span class="line">    <span class="comment">// 封装登录信息</span></span><br><span class="line">    <span class="keyword">return</span> convertLoginUser(user, userInfo, roleList, articleLikeSet, commentLikeSet, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4密码加密存储"><a href="#3-4密码加密存储" class="headerlink" title="3.4密码加密存储"></a>3.4密码加密存储</h3><p>实际项目中我们不会把密码明文存储在数据库中。<br>默认使用的PasswordEncoder要求数据库中的密码格式为：（idypassword。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换PasswordEncoder。|<br>我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder.<br>我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。<br>我们可以定义一个SpringSecurity的配置类， SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@ Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestBCryptPasswordEncoder</span> <span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BCryptPasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span> ();</span><br><span class="line"><span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> passwordEncoder. encode (rawPassword: <span class="string">&quot;1234&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">encode2</span> <span class="operator">=</span> passwordEncoder. encode (rawPassword: <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">System. out. println (encode);</span><br><span class="line">System. out. println (encode2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$2a$10<span class="variable">$bFOw3cFWQ93RDQo</span>.hODJL.sgYMXRMRdQk5u2bCDf4xItNz/1Y jFn6</span><br><span class="line">$2a$10<span class="variable">$npv5JSeFR6</span>/wLz8BBMmSBOMb8byg2eyfK4/vvoBk3RKtTLBhIhcpy</span><br></pre></td></tr></table></figure><p><code>$2a$10$ + 盐(22位) + 密文</code></p>]]></content>
      
      
      <categories>
          
          <category> Spring家族 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5笔记</title>
      <link href="//posts/70b6ad8d.html"/>
      <url>//posts/70b6ad8d.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><p>1、Spring 框架概述</p><p>2、IOC 容器</p><p>​（1）IOC 底层原理</p><p>​（2）IOC 接口（BeanFactory）</p><p>​（3）IOC 操作 Bean 管理（基于 xml）</p><p>​（4）IOC 操作 Bean 管理（基于注解）</p><p>3、Aop</p><p>4、JdbcTemplate</p><p>5、事务管理</p><p>6、Spring5 新特性</p><h2 id="spring框架概述"><a href="#spring框架概述" class="headerlink" title="spring框架概述"></a>spring框架概述</h2><ol><li>spring框架是 轻量级的 开源的 javaEE框架</li><li>spring可以解决企业应用开发的复杂性</li><li>spring有两个核心部分 ioc 和 aop<ul><li>ioc ：控制反转，把创建对象过程交给spring 进行管理</li><li>aop: 面向切面，不修改源代码进行功能增强</li></ul></li><li>spring 的特点<ul><li>方便解耦，简化开发</li><li>aop编程支持</li><li>方便程序测试</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li><li>降低api开发难度</li></ul></li></ol><h2 id="spring5框架入门案例"><a href="#spring5框架入门案例" class="headerlink" title="spring5框架入门案例"></a>spring5框架入门案例</h2><p>前往spring官网下载 spring5  <a href="https://spring.io/">https://spring.io</a></p><p>spring 模块图：</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211206195132559.png" alt="image-20211206195132559" style="zoom: 67%;" /><p>新建一个项目，引入 spring 的基础jar包</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211206195556241.png" alt="image-20211206195556241"></p><p>编写一个类 User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在src目录下新建一个spring 配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211206200223578.png" alt="image-20211206200223578"></p><p>配置信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置user对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个测试类 test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"><span class="comment">//        获取配置创建的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC概念和底层原理"><a href="#IOC概念和底层原理" class="headerlink" title="IOC概念和底层原理"></a>IOC概念和底层原理</h3><h4 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h4><p>（Inversion of Control&#x2F;DependencyInjection(Ioc&#x2F;DI)）<br>是控制反转，即将对象的创建和对象之间的调用交给 spring 管理</p><p>IOC的作用是降低耦合度</p><p>spring5入门案例就是对IOC的使用</p><h4 id="IOC的底层原理"><a href="#IOC的底层原理" class="headerlink" title="IOC的底层原理"></a>IOC的底层原理</h4><p>1、用到的技术：xml解析，工厂模式，反射</p><p>2、画图讲解IOC底层原理</p><p>工厂模式</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211206203743410.png" alt="image-20211206203743410"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211206204212635.png" alt="image-20211206204212635"></p><p>3、IOC容器接口</p><ul><li><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p></li><li><p>spring提供IOC容器实现两种方式（两个接口）</p><p>BeanFactory ：IOC容器基本实现，供spring内部使用，不提供开发人员进行使用</p><p>*特点：加载配置文件时不会创建对象，在获取（使用）对象时候才去创建</p><p>ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，供开发人员使用</p><p>*特点：加载配置文件时候就会把配置文件对象进行创建</p></li></ul><h2 id="IOC操作Bean管理"><a href="#IOC操作Bean管理" class="headerlink" title="IOC操作Bean管理"></a>IOC操作Bean管理</h2><h3 id="什么是Bean管理（概念）"><a href="#什么是Bean管理（概念）" class="headerlink" title="什么是Bean管理（概念）"></a>什么是Bean管理（概念）</h3><p>1、Bean管理指的是两个操作</p><ul><li>spring创建对象</li><li>spring属性注入属性</li></ul><p>2、Bean管理操作的两种方式</p><ul><li>基于xml方式</li><li>基于注解方式</li></ul><h3 id="基于xml方式的bean管理"><a href="#基于xml方式的bean管理" class="headerlink" title="基于xml方式的bean管理"></a>基于xml方式的bean管理</h3><h4 id="1、spring对象创建"><a href="#1、spring对象创建" class="headerlink" title="1、spring对象创建"></a>1、spring对象创建</h4><ul><li><p>xml配置：</p><p>（1）在spring配置文件中，使用bean标签，标签里面添加对应的属性，就可以实现对象创建</p><p>（2）在 bean标签有很多属性，介绍常用的属性：</p><p>​id：唯一标识符</p><p>​class: 类的全类名（包类路径）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置user对象创建--&gt;</span><br><span class="line">    &lt;bean id=&quot;user&quot; class=&quot;com.izumi.spring5.User&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​（3）创建对象时候，默认也是执行无参数构造方法完成对象创建</p><h4 id="2、基于xml方式注入属性"><a href="#2、基于xml方式注入属性" class="headerlink" title="2、基于xml方式注入属性"></a>2、基于xml方式注入属性</h4><p>（1）DI：依赖注入，就是注入属性</p><p>​它和IOC是什么关系？DI是IOC容器操作Bean管理属性注入的具体实现</p><p>​先创建对象，再注入属性</p><h5 id="第一种注入方式：通过-set-方法注入"><a href="#第一种注入方式：通过-set-方法注入" class="headerlink" title="第一种注入方式：通过 set 方法注入"></a>第一种注入方式：通过 set 方法注入</h5><p>​通过 set 方法注入</p><p>（1）创建类，定义属性和对应的 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两种方式实现 属性 注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">setAuthor</span><span class="params">(String author)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>在spring配置文件配置对象，配置属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.Book&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        基于xml方式的属性注入</span></span><br><span class="line"><span class="comment">            property 完成属性注入</span></span><br><span class="line"><span class="comment">            name 类里面 属性名称</span></span><br><span class="line"><span class="comment">            value :为该属性赋的值</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;白夜行&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">value</span>=<span class="string">&quot;东野圭吾&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二种注入方式-通过有参构造注入"><a href="#第二种注入方式-通过有参构造注入" class="headerlink" title="第二种注入方式  通过有参构造注入"></a>第二种注入方式  通过有参构造注入</h5><p>创建类，定义属性，创建属性对应构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过有参构造注入属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">(String name, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 spring配置文件中配置 有参构造注入属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    通过有参构造注入属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;USA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="p名称空间注入-了解-，底层其实是set方法注入"><a href="#p名称空间注入-了解-，底层其实是set方法注入" class="headerlink" title="p名称空间注入(了解 ，底层其实是set方法注入)"></a>p名称空间注入(了解 ，底层其实是set方法注入)</h5><p>主要是简化基于 xml配置方式注入</p><p>​1、在xml配置中加入p名称空间</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211207213643088.png" alt="image-20211207213643088" style="zoom: 80%;" /><p>​2、进行属性注入，在bean标签里面添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    使用p名称空间注入属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.Dog&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小彩&quot;</span> <span class="attr">p:color</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入其他类型属性"><a href="#注入其他类型属性" class="headerlink" title="注入其他类型属性"></a>注入其他类型属性</h5><ul><li><p>null值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        为属性赋空值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性值包含特殊符号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（2）属性值包含特殊符号</span><br><span class="line"><span class="comment">&lt;!--属性值包含特殊符号</span></span><br><span class="line"><span class="comment"> 1 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class="line"><span class="comment"> 2 把带特殊符号内容写到 CDATA</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="外部bean"><a href="#外部bean" class="headerlink" title="外部bean"></a>外部bean</h5><p>创建两个类serviec 和 dao</p><p>在service调用dao里面的方法</p><p>在spring中进行配置</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//创建 dao 属性</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">//提供set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add方法....&quot;</span>);</span><br><span class="line">        userDao.daoTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--基于xml注入属性-外部bean--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    把 service对象和 dao对象 都创建好--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 userDao 对象</span></span><br><span class="line"><span class="comment">        name 属性：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref 属性：创建 userDao 对象 bean 标签 id 值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="内部bean"><a href="#内部bean" class="headerlink" title="内部bean"></a>内部bean</h5><p>内部bean： 如一对多关系：部门和员工</p><pre><code>  一个部门有多名员工，一个员工属于一个部门                      部门是一，员工是多  </code></pre><p>新建Emp类和Dept类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="comment">//普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//对象属性,一个员工属于一个部门</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String dname;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring配置文件中配置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建emp对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入两个普通属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入对象属性 内部bean注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="级联赋值"><a href="#级联赋值" class="headerlink" title="级联赋值"></a>级联赋值</h5><p>第一种写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建emp对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入两个普通属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入对象属性 级联赋值 第一种写法：(和注入外部bean类似)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成dept的get方法 </span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建emp对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入两个普通属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入对象属性 级联赋值 第一种写法：(和注入外部bean类似)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        注入对象属性 级联赋值 第二种写法：--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实就是UserService中调用UserDao的set注入覆盖掉UserDao之前调用set注入的结果。</p><h5 id="注入集合类型的属性"><a href="#注入集合类型的属性" class="headerlink" title="注入集合类型的属性"></a>注入集合类型的属性</h5><p>1、注入数组类型属性</p><p>2、注入List类型属性</p><p>3、注入Map类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">//数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="comment">//List类型</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line">    <span class="comment">//Map类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="comment">//Set类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lists = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sets = set;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Stu&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;courses=&quot;</span> + Arrays.toString(courses) +</span><br><span class="line">                <span class="string">&quot;, lists=&quot;</span> + lists +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, sets=&quot;</span> + sets +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring配置文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--集合类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        数组类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>java基础<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>javaWeb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        list属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        map属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;CPP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    set属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mysql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Oracle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Tomcat<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、在集合里面设置对象类型值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        集合存放对象的属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;courese1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;courese2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    外部bean定义对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;courese1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架课程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;courese2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis框架课程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、把集合注入部分提取出来</p><p>在spring配置文件中引入util名称空间</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211208202204135.png" alt="image-20211208202204135" style="zoom:80%;" /><p>使用util标签完成list集合注入提取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用util标签完成    提取list集合属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>白夜行<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>嫌疑人x的献身<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>解忧杂货店<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提取list集合类型注入属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    提取list集合类型注入属性--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.collectiontype.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><h5 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h5><p>spring 有两种类型bean，一种是普通bean，另一种是工厂bean（FactoryBean）</p><p>普通bean：在配置文件中定义的类型就是返回类型</p><p>工厂bean，在配置文件中定义的类型可以和返回的类型不一致</p><h5 id="如何实现-创建工厂bean"><a href="#如何实现-创建工厂bean" class="headerlink" title="如何实现 创建工厂bean"></a>如何实现 创建工厂bean</h5><p>第一步：创建类，让这个类作为工厂bean，实现接口 FactoryBean。</p><p>第二部：实现接口里面的方法，在实现的方法定义返回的bean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;kksk&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        配置工厂bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.factorybean.MyFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意此时返回的类型是 Course</p><h4 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h4><p>1、在spring里面，设置创建对象的时候是单实例还是多实例</p><p>2、<strong>在spring里面，默认情况下是单实例</strong></p><h5 id="如何设置单实例和多实例"><a href="#如何设置单实例和多实例" class="headerlink" title="如何设置单实例和多实例"></a>如何设置单实例和多实例</h5><p>在spring配置文件 bean标签里面有属性 scope 可以设置单实例或多实例</p><p>scope&#x3D;”singleton” 表示单实例（默认值） scope &#x3D;”prototype” 表示多实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    scope属性设置 创建的对象是单实例还是多实例    singleton表示单实例  prototype表示多实例--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="singleton和-prototype的区别"><a href="#singleton和-prototype的区别" class="headerlink" title="singleton和 prototype的区别"></a>singleton和 prototype的区别</h5><p>第一：singleton 单实例，prototype 多实例</p><p>第二：设置scope 值是singleton 的时候，加载spring配置文件时就创建对象</p><p>​设置 scope值时prototype的时候，不是在加载 spring 配置文件时候创建 对象,</p><p>​<u>对象在调用 getBean 方法时才创建</u></p><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><h5 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h5><p>从对象创建到对象销毁的过程</p><h5 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h5><p>1）通过构造器创建bean实例（无参构造）</p><p>2）为bean的属性设置值和对其他bean 的引用 （调用set方法）</p><p>3）调用bean的初始化的方法（需要进行配置初始化的方法）</p><p>4）bean就可以使用了（对象获取到了）</p><p>5）当容器关闭时候，调用bean 的销毁方法（需要进行配置销毁的方法）</p><h5 id="演示bean生命周期"><a href="#演示bean生命周期" class="headerlink" title="演示bean生命周期"></a>演示bean生命周期</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"> <span class="comment">//无参数构造</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> String oname;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.oname = oname;</span><br><span class="line"> System.out.println(<span class="string">&quot;第二步 调用 set 方法设置属性值&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的销毁的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;orders&quot;</span> class=<span class="string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> initmethod=<span class="string">&quot;initMethod&quot;</span> destroy-method=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span><br><span class="line"> &lt;property name=<span class="string">&quot;oname&quot;</span> value=<span class="string">&quot;手机&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean4</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ApplicationContext context =</span></span><br><span class="line"><span class="comment">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span></span><br><span class="line">    <span class="comment">//ClassPathXmlApplicationContext是 ApplicationContext接口的实现类</span></span><br><span class="line"> <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line"> <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line"> System.out.println(<span class="string">&quot;第四步 获取创建 bean 实例对象&quot;</span>);</span><br><span class="line"> System.out.println(orders);</span><br><span class="line"> <span class="comment">//手动让 bean 实例销毁</span></span><br><span class="line"> context.close();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211221095515906.png" alt="image-20211221095515906" style="zoom:67%;" />-</p><h5 id="4、bean-的后置处理器，bean-生命周期有七步"><a href="#4、bean-的后置处理器，bean-生命周期有七步" class="headerlink" title="4、bean 的后置处理器，bean 生命周期有七步"></a>4、bean 的后置处理器，bean 生命周期有七步</h5><p>（1）通过构造器创建 bean 实例（无参数构造）</p><p>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p><u>（3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</u></p><p>（4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p><u>（5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</u></p><p>（6）bean 可以使用了（对象获取到了）</p><p>（7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><p>创建类 实现 接口BeanPostProcessor，创建后置处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置后置处理器</p><p><code>&lt;bean id=&quot;myBeanPost&quot; class=&quot;com.izumi.spring5.bean.MyBeanPost&quot;&gt;&lt;/bean&gt;</code></p><h4 id="xml自动装配"><a href="#xml自动装配" class="headerlink" title="xml自动装配"></a>xml自动装配</h4><p>实际开发中主要使用注解方法，xml方式使用较少</p><h5 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h5><p>（1）根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p><h5 id="演示自动装配"><a href="#演示自动装配" class="headerlink" title="演示自动装配"></a>演示自动装配</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">（1）根据属性名称自动注入</span><br><span class="line"><span class="comment">&lt;!--实现自动装配</span></span><br><span class="line"><span class="comment"> bean 标签属性 autowire，配置自动装配</span></span><br><span class="line"><span class="comment"> autowire 属性常用两个值：</span></span><br><span class="line"><span class="comment"> byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样</span></span><br><span class="line"><span class="comment"> byType 根据属性类型注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">（2）根据属性类型自动注入</span><br><span class="line"><span class="comment">&lt;!--实现自动装配</span></span><br><span class="line"><span class="comment"> bean 标签属性 autowire，配置自动装配</span></span><br><span class="line"><span class="comment"> autowire 属性常用两个值：</span></span><br><span class="line"><span class="comment"> byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样</span></span><br><span class="line"><span class="comment"> byType 根据属性类型注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="xml配置外部属性文件"><a href="#xml配置外部属性文件" class="headerlink" title="xml配置外部属性文件"></a>xml配置外部属性文件</h4><h5 id="1、直接配置数据库信息"><a href="#1、直接配置数据库信息" class="headerlink" title="1、直接配置数据库信息"></a>1、直接配置数据库信息</h5><p>1）配置德鲁伊连接池</p><p>2）引入德鲁伊jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zzt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="引入外部属性文件配置数据库连接池"><a href="#引入外部属性文件配置数据库连接池" class="headerlink" title="引入外部属性文件配置数据库连接池"></a>引入外部属性文件配置数据库连接池</h5><p>1）创建 外部属性文件，properties格式，写入数据库连接信息</p><p>注意：名称最好使用 prop. 这样的格式，这样可以防止冲突</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/userDb</span></span><br><span class="line"><span class="attr">prop.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">prop.passowrd</span>=<span class="string">zzt</span></span><br></pre></td></tr></table></figure><p>2)把外部的properties属性文件引入到spring配置文件中</p><p>*引入 context名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">               http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在spring配置文件中使用标签引入外部属性文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    引入外部属性文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    classpath就是项目的src文件夹--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于注解方式的bean管理"><a href="#基于注解方式的bean管理" class="headerlink" title="基于注解方式的bean管理"></a>基于注解方式的bean管理</h3><h4 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h4><p>1）注解是代码特殊标记，格式：@注解名称（属性名&#x3D;属性，属性名&#x3D;属性…）</p><p>2）使用注解，注解可以在类上面，方法上面，属性上面</p><p>3）使用注解，可以简化xml配置</p><h4 id="spring针对bean管理中创建对象提供注解"><a href="#spring针对bean管理中创建对象提供注解" class="headerlink" title="spring针对bean管理中创建对象提供注解"></a>spring针对bean管理中创建对象提供注解</h4><p>@Component通用</p><p>@Service一般用在 service层</p><p>@Controller一般用在web层</p><p>@Repository一般用在dao层</p><p>以上四种注解功能都一样，都可以用来创建bean实例</p><h4 id="基于注解方式实现bean对象创建实例"><a href="#基于注解方式实现bean对象创建实例" class="headerlink" title="基于注解方式实现bean对象创建实例"></a>基于注解方式实现bean对象创建实例</h4><p>1)引入依赖</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211221193003113.png" alt="image-20211221193003113">-</p><p>2)开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  1.定义context名称空间</span></span><br><span class="line"><span class="comment">      2.配置spring组件扫描，</span></span><br><span class="line"><span class="comment">        base-package 属性值为扫描的包名，若有多个包可以使用逗号间隔或者扫描它们的上层包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.izumi.spring5.dao,com.izumi.spring5.service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService --userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用m1方法.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件扫描配置的细节"><a href="#组件扫描配置的细节" class="headerlink" title="组件扫描配置的细节"></a>组件扫描配置的细节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--  开启组件扫描的细节 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--示例1</span></span><br><span class="line"><span class="comment">        use-default-filters=&quot;false&quot;表示现在不使用默认filter，自己配置filter</span></span><br><span class="line"><span class="comment">        context:include-filter设置扫描哪些内容</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.izumi.spring5&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    示例2</span></span><br><span class="line"><span class="comment">       context:exclude-filter 表示设置哪些内容不扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.izumi.spring5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span>  <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h4><ol><li><p>@Autowired : 根据属性类型进行自动装配</p><p>第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p><p>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span>  <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//定义dao类型属性</span></span><br><span class="line">    <span class="comment">//不需要设置 set方法</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用m1方法.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用m2方法&quot;</span>+userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Qualifier : 根据属性名称进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义dao类型属性</span></span><br><span class="line">    <span class="comment">//不需要设置 set方法</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line">    <span class="comment">//此时UserDao实现类有两个，所以仅根据类型注入不知道找哪个实现类而报错</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userDaoImpl02&quot;)</span>     <span class="comment">//该注解必须和 @Autowired绑定使用</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li><li><p>@Resourse : 可以根据类型注入，也可以根据名称注入</p><p>但该注解不是spring里面提供的，因此不建议使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//@Resourse注解演示</span></span><br><span class="line"><span class="comment">// @Resource //注入根据类型</span></span><br><span class="line"> <span class="meta">@Resource(name = &quot;userDaoImpl02&quot;)</span> <span class="comment">//根据名称注入</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li><li><p>@Value : 注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示 @Value的使用</span></span><br><span class="line"><span class="meta">@Value(value = &quot;你的名字&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li></ol><h4 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h4><p>1）创建配置类，替代xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//作为配置类，替代 xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.izumi.spring5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">        userService.m1();</span><br><span class="line">        userService.m2();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Aop"><a href="#Aop" class="headerlink" title="Aop"></a>Aop</h2><h3 id="什么是aop"><a href="#什么是aop" class="headerlink" title="什么是aop"></a>什么是aop</h3><p>1、面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>2、通俗描述，不通过修改源代码的方式，在程序主干功能上添加一个新的功能</p><p>3、使用登录例子说明aop</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211222103911387.png" alt="image-20211222103911387"></p><h3 id="aop底层原理"><a href="#aop底层原理" class="headerlink" title="aop底层原理"></a>aop底层原理</h3><p>1）有两种情况动态代理</p><ul><li><p>第一种，有接口情况，使用jdk动态代理</p><p><strong>实现：创建接口实现类代理对象，增强类的方法</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211222110406990.png" alt="image-20211222110406990"></p><ul><li><p>第二种，没有接口的情况，使用CGLIB动态代理</p><p><strong>实现：创建子类代理对象，增强类的方法</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211222110627667.png" alt="image-20211222110627667"></p><h3 id="AOP（JDK动态代理）"><a href="#AOP（JDK动态代理）" class="headerlink" title="AOP（JDK动态代理）"></a>AOP（JDK动态代理）</h3><ul><li><p>使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211222111453446.png" alt="image-20211222111453446"></p><p>方法有三个参数：</p><p>第一参数，类加载器</p><p>第二参数，增强方法所在的类，这个类实现的接口，支持多个接口</p><p>第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</p></li><li><p>编写jdk动态代理代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk的动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        <span class="comment">//创建被代理类</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="comment">//创建接口实现类代理</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDaoProxy</span> <span class="operator">=</span>(UserDao) Proxy.newProxyInstance(UserProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> userDaoProxy.add(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> userDaoProxy.id(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强的功能逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">            System.out.println(methodName+<span class="string">&quot;方法调用前...&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">methodInvoke</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">            System.out.println(methodName+<span class="string">&quot;方法调用后...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> methodInvoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Aop的术语"><a href="#Aop的术语" class="headerlink" title="Aop的术语"></a>Aop的术语</h3><p>1、连接点</p><p>​类哪些方法可以被增强，这些方法就称为连接点</p><p>2、切入点</p><p>​实际被真正增强的方法，称为切入点</p><p>3、通知（增强）</p><p>​（1）实现增强的逻辑部分称为通知&#x2F;增强</p><p>​（2）通知有多种类型</p><p>​前置通知</p><p>​后置通知</p><p>​环绕通知</p><p>​异常通知</p><p>​最终通知（类似于 try—catch—finally的finally）</p><p>4、切面</p><p>​把通知应用到切入点的过程</p><h3 id="AOP操作准备："><a href="#AOP操作准备：" class="headerlink" title="AOP操作准备："></a>AOP操作准备：</h3><p>1、spring框架一般是基于<strong>AspectJ</strong>来实现AOP操作</p><p>​那么 什么是 AspectJ？</p><p>​AspectJ不是spring框架的组成部分，而是独立的aop框架，一般把spring和AspectJ一起使用，进行aop操作。</p><p>2、基于AspectJ操作Aop</p><ul><li>基于xml配置文件方式实现</li><li>基于注解方式实现（一般使用注解方式）</li></ul><p>3、引入相关jar包</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220103185843893.png" alt="image-20220103185843893"></p><p>4、切入点表达式</p><p>​1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强</p><p>​2）语法结构：<code>excution([权限修饰符][返回类型][类全路径][方法名][参数列表])</code></p><p>​举例1： com.izumi.spring5.dao.BookDao的add方法进行增强</p><p>​<code>excution(* com.izumi.spring5.dao.BookDao.add(..))</code> 这里返回类型省略了</p><p>​举例2： com.izumi.spring5.dao.BookDao的所有方法进行增强</p><p>​<code>excution(* com.izumi.spring5.dao.BookDao.*(..))</code></p><p>​举例3： com.izumi.spring5.dao的所有类的所有方法进行增强</p><p>​<code>excution(* com.izumi.spring5.dao.*.*(..))</code></p><h3 id="Aop操作-基于注解方式"><a href="#Aop操作-基于注解方式" class="headerlink" title="Aop操作-基于注解方式"></a>Aop操作-基于注解方式</h3><ol><li><p>创建被增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建增强类，在增强类里面编写不同方法，不同的方法代表不同的通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//编写增强方法-通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.izumi.spring5.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进行通知的配置</p><ol><li><p>在spring文件中，添加对应的名称空间，并开启注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启spring注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.izumi.spring5.aopannotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用注解创建被增强类和增强类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br></pre></td></tr></table></figure></li><li><p>在增强类上面添加 @Aspect</p></li><li><p>在spring配置文件开启生成代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    开启aspect生成代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置不同类型的通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//编写增强方法-通知</span></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.izumi.spring5.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置通知  出现异常就不会执行</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.izumi.spring5.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after()..............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终通知（返回通知）    不管是否出现异常，都会执行</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.izumi.spring5.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.izumi.spring5.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前....&quot;</span>);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//异常通知  出现异常的时候才执行</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.izumi.spring5.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相同的切入点抽取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相同的切入点抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.izumi.spring5.aopannotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//编写增强方法-通知</span></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before().....&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>有多个增强类对同一个方法进行增强，设置增强优先级</p><p>（1）在增强类上面添加注解 @Order(数字类型值)，（从0开始）数字类型值越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span> &#123;</span><br></pre></td></tr></table></figure></li><li><p>完全注解开发</p><p>创建配置类，不需要创建配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.izumi.spring5&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Aop操作-基于AspectJ配置文件-用的较少"><a href="#Aop操作-基于AspectJ配置文件-用的较少" class="headerlink" title="Aop操作-基于AspectJ配置文件(用的较少)"></a>Aop操作-基于AspectJ配置文件(用的较少)</h3><p>(了解)</p><ol><li><p>创建增强类和被增强类，编写对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before()....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置spring配置文件</p><ol><li>创建增强类和被增强类对象</li><li>在spring配置文件中配置切入点</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookproxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.izumi.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置aop增强--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置切入点--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.izumi.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置切面--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookproxy&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--        增强作用在具体方法上--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="概念和准备"><a href="#概念和准备" class="headerlink" title="概念和准备"></a>概念和准备</h3><p>1、什么是 JdbcTemplate</p><p>​（1）Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><p>2、准备工作</p><p>​（1）引入相关 jar 包</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220104200355015.png" alt="image-20220104200355015"></p><p>（2）在spring配置文件中配置德鲁伊连接池信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zzt&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）在spring配置文件中创建JdbcTemplate对象，注入DataSource属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建JDBCtemplate对象，注入属性DataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(4) 创建service类，创建dao类，在dao类注入JdbcTemplate对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    开启组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.izumi.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>service类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoIml</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line">    <span class="comment">//注入jdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jdbcTemplate操作数据库（增改删）"><a href="#jdbcTemplate操作数据库（增改删）" class="headerlink" title="jdbcTemplate操作数据库（增改删）"></a>jdbcTemplate操作数据库（增改删）</h3><p>1、创建数据库表对应的实体类</p><p>2、编写service和dao</p><p>（1）在 dao 进行数据库添加操作</p><p>（2）调用 JdbcTemplate 对象里面 update 方法实现添加操作</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220104204559938.png" alt="image-20220104204559938"></p><ul><li>第一个参数： 编写的sql语句</li><li>第二个参数：可变参数，设置sql语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//添加书本的方法增</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,book.getBookId(), book.getBookName(), book.getBookStatus());</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set book_name=?,book_status=? where book_id=?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, book.getBookName(), book.getBookStatus(), book.getBookId());</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBook</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;delete from t_book where book_id=?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, id);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">       <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(BookService.class);</span><br><span class="line">       <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">       book.setBookId(<span class="number">1</span>);</span><br><span class="line">       book.setBookName(<span class="string">&quot;三体&quot;</span>);</span><br><span class="line">       book.setBookStatus(<span class="string">&quot;畅销&quot;</span>);</span><br><span class="line">       bookService.add(book);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="jdbcTemplate操作数据库（查）"><a href="#jdbcTemplate操作数据库（查）" class="headerlink" title="jdbcTemplate操作数据库（查）"></a>jdbcTemplate操作数据库（查）</h3><h4 id="查询返回某个值"><a href="#查询返回某个值" class="headerlink" title="查询返回某个值"></a>查询返回某个值</h4><p><strong>场景：查询表里返回多少条记录，返回的是某个值</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220104213313170.png" alt="image-20220104213313170"></p><ul><li>第一个参数：sql语句</li><li>第二个参数： 返回值的类型的class</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回某个值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,Integer.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查询返回某个对象"><a href="#查询返回某个对象" class="headerlink" title="查询返回某个对象"></a>查询返回某个对象</h4><p><strong>场景：查询图书详情</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220104214811949.png" alt="image-20220104214811949"></p><ul><li>第一个参数：sql语句</li><li>第二个参数： RowMapper接口，针对返回不同类型数据，使用改接口的实现类( <code>BeanPropertyRowMapper&lt; &gt;</code>)实现对数据的封装</li><li>sql语句值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回某个对象</span></span><br><span class="line">    <span class="comment">/*BeanPropertyRowMapper&lt;Book&gt;(Book.class)</span></span><br><span class="line"><span class="comment">    是RowMapper接口的实现类，泛型里填入返回的类型，参数列表填返回参数类型的class类型*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">findBookInfo</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book where book_id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class),id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查询返回某个集合"><a href="#查询返回某个集合" class="headerlink" title="查询返回某个集合"></a>查询返回某个集合</h4><p><strong>场景：查询图书列表分页</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220104220142485.png" alt="image-20220104220142485"></p><ul><li>第一个参数：sql语句</li><li>第二个参数： RowMapper接口，针对返回不同类型数据，使用改接口的实现类( <code>BeanPropertyRowMapper&lt; &gt;</code>)实现对数据的封装</li><li>sql语句值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回集合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line">        List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line">        <span class="keyword">return</span> bookList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="jdbcTemplate操作数据库（批量操作）"><a href="#jdbcTemplate操作数据库（批量操作）" class="headerlink" title="jdbcTemplate操作数据库（批量操作）"></a>jdbcTemplate操作数据库（批量操作）</h3><p>批量操作：操作表里多条记录</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220104221924484.png" alt="image-20220104221924484"></p><ul><li>第一个参数：sql语句</li><li>第二个参数：LIst集合，添加多条记录数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加多条记录删除修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAddBooks</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBatchAddBooks</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Object[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       Object[] objects1 = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">3</span>,<span class="string">&quot;php&quot;</span>,<span class="string">&quot;fjlsjf&quot;</span>&#125;;</span><br><span class="line">       Object[] objects2 = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">4</span>,<span class="string">&quot;c#&quot;</span>,<span class="string">&quot;sfsf&quot;</span>&#125;;</span><br><span class="line">       Object[] objects3 = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">5</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;lghf&quot;</span>&#125;;</span><br><span class="line">       list.add(objects1);</span><br><span class="line">       list.add(objects2);</span><br><span class="line">       list.add(objects3);</span><br><span class="line">       bookService.batchAddBooks(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="spring操作事务"><a href="#spring操作事务" class="headerlink" title="spring操作事务"></a>spring操作事务</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h4><p>事务是数据库操作最基本单元，逻辑上，一组操作，要么都成功，如果有一个失败所有操作都失败。</p><p>典型应用场景：银行转账</p><h4 id="事务的四个特性-ACID"><a href="#事务的四个特性-ACID" class="headerlink" title="事务的四个特性 (ACID)"></a>事务的四个特性 (ACID)</h4><ol><li>原子性：要么都成功，要么都失败</li><li>一致性   ：事务提交前后的完整性和状态保持一致</li><li>隔离性    ：是多个并发事务之间是隔离的</li><li>持久性    ：一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的</li></ol><h3 id="事务操作环境搭建"><a href="#事务操作环境搭建" class="headerlink" title="事务操作环境搭建"></a>事务操作环境搭建</h3><p>略</p><h3 id="spring事务管理介绍"><a href="#spring事务管理介绍" class="headerlink" title="spring事务管理介绍"></a>spring事务管理介绍</h3><p>1、事务一般添加到javaee三层框架的service层（业务逻辑层）。</p><p>2、spring进行事务管理操作有两种方式：</p><p>​编程式实务操作、声明式实务操作（使用）</p><p>3、声明式实务管理：</p><p>​基于xml方式基于注解方式（使用）</p><p><strong>4、在spring进行声明式事务管理，底层使用AOP原理。</strong></p><p>5、spring事务管理api</p><p>（1）提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><p>JDBC事务：使用<code> DataSourceTranscationManager</code></p><p>Hibernate事务:使用<code>HibernateTransactionManager</code></p><p>JPA事务：使用<code>JpaTranscationManager</code></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220105190923865.png" alt="image-20220105190923865"></p><h3 id="注解声明式事务管理"><a href="#注解声明式事务管理" class="headerlink" title="注解声明式事务管理"></a>注解声明式事务管理</h3><p>1、在spring配置文件中配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在spring配置文件文件中配置 tx名称空间，并开启事务管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    开启事务管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在service类上面（或者service类方法上面）添加事务注解</p><p>1）@Transcational</p><p>将该注解添加到类上面，表示在这个类开启事务管理</p><p>将该注解添加到方法上面，表示在这个方法开启事务管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br></pre></td></tr></table></figure><h3 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h3><p>1、在 service 类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220108100304391.png" alt="image-20220108100304391"></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220108100445151.png" alt="image-20220108100445151"></p><h3 id="propagation：事务传播行为-（面试会考）"><a href="#propagation：事务传播行为-（面试会考）" class="headerlink" title="propagation：事务传播行为 （面试会考）"></a>propagation：事务传播行为 （面试会考）</h3><p>事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如方法可能继续在现有事务中运行，也可能开启一个新的事务，并在自己的事务运行。spring中的事务传播行为可以由传播属性指定。spring指定了7种类传播行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br></pre></td></tr></table></figure><p><strong>重点掌握前两个</strong></p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220108101114201.png" alt="image-20220108101114201"></p><p>REQUIRED举例：</p><p>通俗来说就是：方法一调用方法二，方法二会看如果方法一有事务，就直接用方法一的事务就行，和调用几次无关；如果方法一没有事务，我方法二就自己创建个事务，调用我几次 我创建几次！</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220108102000743.png" alt="image-20220108102000743"></p><p>REQUIRES_NEW举例：</p><p>它表示该方法必须启动一个新事务, 并在自己的事务内运行. 如果有事务在运行, 就应该先挂起它.（这个正好相反就是，我方法二不管你方法一有没有事务，我都自己创建一个事务，你调用我几次我创建几次！</p><p>方法A调用方法B的时候，如果方法A也有事务，则先将方法A的事务挂起，开启方法B的事务，待方法B执行完毕提交，再恢复方法A的事务。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220108103211551.png" alt="image-20220108103211551"></p><h3 id="isolation-事务隔离级别"><a href="#isolation-事务隔离级别" class="headerlink" title="isolation:事务隔离级别"></a>isolation:事务隔离级别</h3><p>（1）事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题</p><p>（2）有三个读问题：脏读、不可重复读、虚（幻）读</p><p>（3）脏读（Dirty Read）：A事务读取B事务尚未提交的数据并在此基础上操作，而B事务执行回滚，那么A读取到的数据就是脏数据。</p><p><strong>解决办法：</strong>如果在第一个事务提交前，任何其他事务不可读取其修改过的值，则可以避免该问题。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220109205136175.png" alt="image-20220109205136175"></p><p>（4）不可重复读: 一个未提交事务读取到另一个提交事务的数据</p><p>不可重复读（Non-repeatable Reads）<br>一个事务对同一行数据重复读取两次，但是却得到了不同的结果。事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时得到与前一次不同的值。</p><p><strong>解决办法：</strong>如果只有在修改事务完全提交之后才可以读取数据，则可以避免该问题。</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220109205521052.png" alt="image-20220109205521052"></p><p>（5）虚读：一个未提交事务读取到另一提交事务添加数据</p><p>​指两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中。一般情况下，幻象读应该正是我们所需要的。但有时候却不是，如果打开的游标，在对游标进行操作时，并不希望新增的记录加到游标命中的数据集中来。隔离级别为 游标稳定性 的，可以阻止幻象读。例如：目前工资为1000的员工有10人。那么事务1中读取所有工资为1000的员工，得到了10条记录；这时事务2向员工表插入了一条员工记录，工资也为1000；那么事务1再次读取所有工资为1000的员工共读取到了11条记录。</p><p>（6）解决：通过设置事务隔离级别，解决读问题(mysql默认可重复读)</p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220109205948180.png" alt="image-20220109205948180" style="zoom: 67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br></pre></td></tr></table></figure><p><strong>4、timeout：超时时间</strong><br>（1）事务需要在一定时间内进行提交，如果不提交进行回滚<br>（2）默认值是 -1 ，设置时间以秒单位进行计算</p><p><strong>5、readOnly：是否只读</strong><br>（1）读：查询操作，写：添加修改删除操作<br>（2）readOnly 默认值 false，表示可以查询，可以添加修改删除操作<br>（3）设置 readOnly 值是 true，设置成 true 之后，只能查询</p><p><strong>6、rollbackFor：回滚</strong><br>（1）设置出现哪些异常进行事务回滚</p><p><strong>7、noRollbackFor：不回滚</strong><br>（1）设置出现哪些异常不进行事务回滚</p><h3 id="基于xml方式进行声明式事务管理"><a href="#基于xml方式进行声明式事务管理" class="headerlink" title="基于xml方式进行声明式事务管理"></a>基于xml方式进行声明式事务管理</h3><p>1、在spring配置文件中配置事务管理器</p><p>2、配置通知</p><p>3、配置切入点和切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置事务参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            制定哪种规则上面添加事务--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置切入点和切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.izumi.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于完全注解开发实现声明式事务管理"><a href="#基于完全注解开发实现声明式事务管理" class="headerlink" title="基于完全注解开发实现声明式事务管理"></a>基于完全注解开发实现声明式事务管理</h3><p>创建配置类，使用配置类替代配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.izumi.spring5&quot;)</span> <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Txconfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">&quot;zzt&quot;</span>);</span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//创建jdbcTemplate            //参数：到ioc容器中根据参数类型找到dataSource</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">//注入DataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//创建事务管理器</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring5新特性"><a href="#spring5新特性" class="headerlink" title="spring5新特性"></a>spring5新特性</h2><h3 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h3><p>1、整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9，许多不建议使用的类和方 法在代码库中删除</p><h3 id="2、Spring-5-0-框架自带了通用的日志封装"><a href="#2、Spring-5-0-框架自带了通用的日志封装" class="headerlink" title="2、Spring 5.0 框架自带了通用的日志封装"></a>2、Spring 5.0 框架自带了通用的日志封装</h3><p>（1）Spring5 已经移除 Log4jConfigListener，官方建议使用 Log4j2</p><p>（2）Spring5 框架整合 Log4j2</p><ul><li>第一步 引入 jar 包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220111223741453.png" alt="image-20220111223741453"></p><ul><li>第二步 创建 log4j2.xml 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、Spring5-框架核心容器支持-Nullable-注解"><a href="#3、Spring5-框架核心容器支持-Nullable-注解" class="headerlink" title="3、Spring5 框架核心容器支持@Nullable 注解"></a>3、Spring5 框架核心容器支持@Nullable 注解</h3><p>（1）@Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，</p><p>​属性值可以 为空，参数值可以为空</p><p>（2）注解用在方法上面，方法返回值可以为空</p><p>​<img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220114180601855.png" alt="image-20220114180601855"></p><p>（3）注解使用在方法参数里面，方法参数可以为空</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220114180641739.png" alt="image-20220114180641739"></p><p>（4）注解使用在属性上面，属性值可以为空</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220114180710661.png" alt="image-20220114180710661"></p><h3 id="4、Spring5-核心容器支持函数式风格-GenericApplicationContext"><a href="#4、Spring5-核心容器支持函数式风格-GenericApplicationContext" class="headerlink" title="4、Spring5 核心容器支持函数式风格 GenericApplicationContext"></a>4、Spring5 核心容器支持函数式风格 GenericApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示spring5新特性 核心容器支持函数式风格 GenericApplicationContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenericApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建 GenericApplicationContext 对象</span></span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        <span class="comment">//调用context 的方法注册（在spring容器里注册，这样才能让spring管理该对象）</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">//()-&gt;new User() : java四大核心函数式接口的供给型接口，采用lambda表达式实现</span></span><br><span class="line">        context.registerBean(<span class="string">&quot;user&quot;</span>,User.class,()-&gt;<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">        <span class="comment">//获取在spring注册的对象</span></span><br><span class="line">      <span class="comment">//  User user =(User) context.getBean(&quot;com.izumi.spring5.entity.User&quot;);</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>(User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、Spring5-支持整合-JUnit5"><a href="#5、Spring5-支持整合-JUnit5" class="headerlink" title="5、Spring5 支持整合 JUnit5"></a>5、Spring5 支持整合 JUnit5</h3><h4 id="（1）整合-JUnit4"><a href="#（1）整合-JUnit4" class="headerlink" title="（1）整合 JUnit4"></a>（1）整合 JUnit4</h4><p>第一步 引入 Spring 相关针对测试依赖</p><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20220114183520116.png" alt="image-20220114183520116"></p><p>第二步创建测试类，使用注解完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring5 支持整合junit4测试</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//单元测试框架</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span>    <span class="comment">//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JUnit4Test</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    userService.account(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>),<span class="string">&quot;lucy&quot;</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）Spring5-整合-JUnit5"><a href="#（2）Spring5-整合-JUnit5" class="headerlink" title="（2）Spring5 整合 JUnit5"></a>（2）Spring5 整合 JUnit5</h4><p>第一步 引入 JUnit5 的 jar 包</p><p><code>import org.junit.jupiter.api.Test;//导入Junit5的包</code></p><p>第二步创建测试类，使用注解完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示spring5整合junit5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一个复合注解(SpringJUnitConfig)替代上面两个注解完成整合</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:bean1.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Junit5Test</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.account(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>), <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;mary&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringWebflux"><a href="#SpringWebflux" class="headerlink" title="SpringWebflux"></a>SpringWebflux</h3><p>基于 springMVC springboot maven java8新特性</p><h4 id="1、SpringWebflux介绍"><a href="#1、SpringWebflux介绍" class="headerlink" title="1、SpringWebflux介绍"></a>1、SpringWebflux介绍</h4><h4 id="2、响应式编程（java实现）"><a href="#2、响应式编程（java实现）" class="headerlink" title="2、响应式编程（java实现）"></a>2、响应式编程（java实现）</h4>]]></content>
      
      
      <categories>
          
          <category> Spring家族 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="//posts/397c083a.html"/>
      <url>//posts/397c083a.html</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="代理设计模式的原理"><a href="#代理设计模式的原理" class="headerlink" title="代理设计模式的原理"></a>代理设计模式的原理</h3><ul><li><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象。</p><p>任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p></li><li><p>之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标<br>对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代<br>理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。最<br>好可以通过一个代理类完成全部的代理功能。</p></li></ul><h3 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h3><ul><li>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时<br>根据需要动态创建目标类的代理对象。</li></ul><h3 id="动态代理的优点"><a href="#动态代理的优点" class="headerlink" title="动态代理的优点"></a>动态代理的优点</h3><p>动态代理相比静态代理，抽象角色中（按接口）声明的所有方法都被转移到调用处理器</p><p>一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。</p><h3 id="演示静态代理"><a href="#演示静态代理" class="headerlink" title="演示静态代理"></a>演示静态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示静态代理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClothFactory</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyCloth</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span>&#123;</span><br><span class="line"><span class="keyword">private</span> ClothFactory clothFactory;<span class="comment">//用被代理类对象进行实例化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyCloth</span><span class="params">(ClothFactory clothFactory)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.clothFactory = clothFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂做一些准备工作...&quot;</span>);</span><br><span class="line">        clothFactory.produceCloth();</span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂做一些收尾工作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;nike工厂正在生产一批衣服.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建被代理类对象</span></span><br><span class="line">        <span class="type">ClothFactory</span> <span class="variable">nikeClothFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NikeClothFactory</span>();</span><br><span class="line">        <span class="comment">//代理类对象</span></span><br><span class="line">        <span class="type">ClothFactory</span> <span class="variable">proxyCloth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyCloth</span>(nikeClothFactory);</span><br><span class="line">        proxyCloth.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="演示动态代理"><a href="#演示动态代理" class="headerlink" title="演示动态代理"></a>演示动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态代理举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    String <span class="title function_">getBelief</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">implements</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBelief</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am superMan!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要想实现动态代理，需要解决的问题？</span></span><br><span class="line"><span class="comment">问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象</span></span><br><span class="line"><span class="comment">问题二：当通过代理类的对象调用方法时，如何动态的去调用被代理类的同名方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建一个代理类工厂，动态的创建代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="comment">//调用此方法，可以创建代理类对象，解决问题一</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxyInstance</span><span class="params">(Object obj)</span> &#123;<span class="comment">//obj 就是被代理类对象</span></span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">myInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), myInvocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//创建被代理类对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">(Object obj)</span> &#123; <span class="comment">//使用构造函数为 被代理类对象赋值</span></span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke（）</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke（）中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//method 即为代理类对象要调用的方法，此方法也作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj就是被代理的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke（）方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SuperMan</span> <span class="variable">superMan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>();</span><br><span class="line">        <span class="comment">//动态的创建代理类对象</span></span><br><span class="line">        <span class="type">Human</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        <span class="comment">//通过代理类对象调用被代理类的方法</span></span><br><span class="line">        System.out.println(proxyInstance.getBelief());</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;草莓仙草冻&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理与aop"><a href="#动态代理与aop" class="headerlink" title="动态代理与aop"></a>动态代理与aop</h3><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211224171255662.png" alt="image-20211224171255662"></p><h2 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h2><ul><li>速度更快</li><li>代码更少(增加了新的语法：Lambada表达式)</li><li>强大的Stream API</li><li>便于并行</li><li>最大化减少空指针异常 ： Optional</li><li>Nashorn引擎，允许在JVM上运行JS应用</li></ul><h3 id="1、Lambda表达式"><a href="#1、Lambda表达式" class="headerlink" title="1、Lambda表达式"></a>1、Lambda表达式</h3><h4 id="什么是Lambada表达式"><a href="#什么是Lambada表达式" class="headerlink" title="什么是Lambada表达式"></a>什么是Lambada表达式</h4><p>Lambda是一个<strong>匿名函数</strong>，我们可以把Lambda表达式理解为是一段<strong>可以</strong><br><strong>传递的代码（将代码像数据一样进行传递）</strong>。使用它可以写出更简洁、更<br>灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了<br>提升。</p><h4 id="lambda表达式的使用"><a href="#lambda表达式的使用" class="headerlink" title="lambda表达式的使用"></a>lambda表达式的使用</h4><h5 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h5><p><code>(o1,o2) -&gt; Integer.compare(o1,o2);</code></p><p>-&gt;: Lambda操作符 或 箭头操作符</p><p>-&gt;左边：Lambda形参列表 （其实就是接口中的抽象方法的形参列表）</p><p>-&gt;右边： Lambda 体 （其实就是重写的抽象方法的方法体）</p><h5 id="Lambda表达式的使用"><a href="#Lambda表达式的使用" class="headerlink" title="Lambda表达式的使用"></a>Lambda表达式的使用</h5><p>总结：</p><p>-&gt; 左边：lambda形参列表的参数可以省略（类型推断）；如果形参列表只有一个参数，可以省略括号</p><p>-&gt; 右边：lambda体应该使用一对{}包裹，如果lambda体只有一条执行语句（可能是return语句），则可以省略{}和return</p><h5 id="Lambda表达式的本质："><a href="#Lambda表达式的本质：" class="headerlink" title="Lambda表达式的本质："></a>Lambda表达式的本质：</h5><p>作为函数式接口的实例</p><h5 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="comment">//语法格式一：无参无返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式写法</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱北京天安门.&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式2：Lambda需要一个参数，但没有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda表达式写法</span></span><br><span class="line">        Consumer&lt;String&gt; con2 = (String s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人信了，一个是说的人信了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式三：数据类型可以省略，因为可以由编译器推断得出，成为“类型推断”</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con1.accept(<span class="string">&quot;一个是听的人信了，一个是说的人信了&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//省略类型</span></span><br><span class="line">        Consumer&lt;String&gt; con2 = (s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人信了，一个是说的人信了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式四：lambda若只需要一个参数时，参数的小括号可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//省略小括号</span></span><br><span class="line">        Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人信了，一个是说的人信了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式五：lambda需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                System.out.println(o1);</span><br><span class="line">                System.out.println(o2);</span><br><span class="line">                <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(com.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda写法</span></span><br><span class="line">        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(com2.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式六：当lambda体只有一条语句时，若有return和大括号，可以考虑省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com = (o1, o2) -&gt; o1.compareTo(o2);</span><br><span class="line">        System.out.println(com.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、函数式（Functional）接口"><a href="#2、函数式（Functional）接口" class="headerlink" title="2、函数式（Functional）接口"></a>2、函数式（Functional）接口</h3><h4 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h4><p><font>只包含一个抽象方法的接口，就是函数式接口</font></p><p>我们可以在一个接口上使用 <code>@Functionallnterface</code> 注解，这样做可以检<br>查它是否是一个函数式接口。同时 <code>javadoc </code>也会包含一条声明，说明这个<br>接口是一个函数式接口。</p><p>在<code>java.util.function</code>包下定义了Java 8的丰富的函数式接口</p><p><strong>以前用匿名实现类表示的现在都可以用Lambda表达式来写。</strong></p><h4 id="java内置四大核心函数式接口"><a href="#java内置四大核心函数式接口" class="headerlink" title="java内置四大核心函数式接口"></a>java内置四大核心函数式接口</h4><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211225194046180.png" alt="image-20211225194046180"></p><h5 id="其他接口"><a href="#其他接口" class="headerlink" title="其他接口"></a>其他接口</h5><p><img src="https://cdn.jsdelivr.net/gh/twintea/pic-notes1/img/image-20211225210013763.png" alt="image-20211225210013763"></p><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java 内置的4大核心函数式接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 消费型 接口 Consumer&lt;T&gt;   void accept(T t)</span></span><br><span class="line"><span class="comment"> * 供给型接口 Supplier&lt;T&gt;    T get()</span></span><br><span class="line"><span class="comment"> * 函数型接口 Function&lt;T,R&gt;  R apply(T t)</span></span><br><span class="line"><span class="comment"> * 断定型接口 Predicate&lt;T&gt;   boolean test(T t)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CentralFunctionalInterfaces</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        happyTime(<span class="number">500.0</span>, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;在天守阁消费&quot;</span>+aDouble);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda写法</span></span><br><span class="line">        happyTime(<span class="number">400.0</span>,money -&gt; System.out.println(<span class="string">&quot;在望舒客栈消费&quot;</span>+money));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyTime</span><span class="params">(Double money, Consumer&lt;Double&gt; con)</span>&#123;</span><br><span class="line">       con.accept(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;南京&quot;</span>,<span class="string">&quot;东京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;西京&quot;</span>);</span><br><span class="line">       List&lt;String&gt; filterString= filterString(list, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(filterString);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda方法</span></span><br><span class="line">        List&lt;String&gt; list1 = filterString(list, s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据给定的规则，过滤集合中的字符串，此规则由Predicate的方法决定</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">filterString</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; filterList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s: list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (pre.test(s))</span><br><span class="line">                filterList.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filterList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、方法引用与构造器引用"><a href="#3、方法引用与构造器引用" class="headerlink" title="3、方法引用与构造器引用"></a>3、方法引用与构造器引用</h3><h4 id="方法引用基本介绍"><a href="#方法引用基本介绍" class="headerlink" title="方法引用基本介绍"></a>方法引用基本介绍</h4><p><strong>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</strong><br>方法引用可以看做是Lambda表达式深层次的表达。</p><p>换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例<br>，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖</p><p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的<br>方法的参数列表和返回值类型保持一致！(仅使用于 对象：：实例方法名 和 类：：静态方法名)</p><p>格式：使用操作符”：”将类（或对象）与方法名分隔开来。<br>如下三种主要使用情况：<br>》对象 : : 实例方法名<br>》类 : : 静态方法名<br>》类 : : 实例方法名</p><h4 id="方法引用的使用"><a href="#方法引用的使用" class="headerlink" title="方法引用的使用"></a>方法引用的使用</h4><ul><li><p>1.使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p></li><li><p>2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以</p><p>方法引用，也是函数式接口的实例。</p></li><li><p>使用格式：  类(或对象) :: 方法名</p></li><li><p>具体分为如下的三种情况：</p><ul><li>情况1     对象 :: 非静态方法</li><li>情况2     类 :: 静态方法</li><li>情况3     类 :: 非静态方法</li></ul></li><li><p>方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的</p><p>形参列表和返回值类型相同！（针对于情况1和情况2）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法引用的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以</span></span><br><span class="line"><span class="comment"> * 方法引用，也是函数式接口的实例。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3. 使用格式：  类(或对象) :: 方法名</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4. 具体分为如下的三种情况：</span></span><br><span class="line"><span class="comment"> * 情况1     对象 :: 非静态方法</span></span><br><span class="line"><span class="comment"> * 情况2     类 :: 静态方法</span></span><br><span class="line"><span class="comment"> * 情况3     类 :: 非静态方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5. 方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的</span></span><br><span class="line"><span class="comment"> * 形参列表和返回值类型相同！（针对于情况1和情况2）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodRefTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line">    <span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line">    <span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; con = s -&gt; System.out.println(s);</span><br><span class="line">        con.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">        Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">        con.accept(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee中的String getName()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;Tom&quot;</span>, <span class="number">22</span>, <span class="number">12104</span>);</span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; emp.getName();</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分割线------------&quot;</span>);</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Supplier&lt;String&gt; supplier2 = emp::getName;</span><br><span class="line">        System.out.println(supplier2.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line">    <span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line">    <span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com1 = (t1, t2) -&gt; Integer.compare(t1, t2);</span><br><span class="line">        System.out.println(com1.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分割线------------&quot;</span>);</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">        System.out.println(com2.compare(<span class="number">12</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        Function&lt;Double, Long&gt; fun = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Math.round(aDouble);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//lambda表达</span></span><br><span class="line">        Function&lt;Double, Long&gt; fun1 = d -&gt; Math.round(d);</span><br><span class="line">        System.out.println(fun1.apply(<span class="number">13.5</span>));</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分割线------------&quot;</span>);</span><br><span class="line">        Function&lt;Double, Long&gt; fun2 = Math::round;</span><br><span class="line">        System.out.println(fun2.apply(<span class="number">11.2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况三：类 :: 实例方法  (有难度)</span></span><br><span class="line">    <span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line">    <span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;String&gt; com1 = (s1, s2) -&gt; s1.compareTo(s2);</span><br><span class="line">        System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分割线------------&quot;</span>);</span><br><span class="line">        Comparator&lt;String&gt; com2 = String::compareTo;</span><br><span class="line">        System.out.println(com2.compare(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line">    <span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        BiPredicate&lt;String, String&gt; b1 = (t1, t2) -&gt; t1.equals(t2);</span><br><span class="line">        System.out.println(b1.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分割线------------&quot;</span>);</span><br><span class="line">        BiPredicate&lt;String, String&gt; b2 = String::equals;</span><br><span class="line">        System.out.println(b2.test(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;acf&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">// Employee中的String getName();</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line">       Function&lt;Employee,String&gt; f1 = n-&gt;n.getName();</span><br><span class="line">        System.out.println(f1.apply(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">03</span>,<span class="string">&quot;jerry&quot;</span>,<span class="number">10</span>,<span class="number">1231321</span>)));</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------分割线------------&quot;</span>);</span><br><span class="line">        Function&lt;Employee,String&gt; f2 = Employee::getName;</span><br><span class="line">        System.out.println(f2.apply(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">06</span>,<span class="string">&quot;tim&quot;</span>,<span class="number">21</span>,<span class="number">132131</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h4><p>一、构造器引用</p><ul><li><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</p><p>抽象方法的返回值类型即为构造器所属的类的类型</p></li></ul><p>二、数组引用</p><ul><li><pre><code>大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorRefTest</span> &#123;</span><br><span class="line">   <span class="comment">//构造器引用</span></span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        Supplier&lt;Employee&gt; supplier1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        System.out.println(supplier1.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//演示使用构造器引用</span></span><br><span class="line">        Supplier&lt;Employee&gt; supplier2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(supplier2.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Function&lt;Integer,Employee&gt; function = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Employee <span class="title function_">apply</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        Function&lt;Integer,Employee&gt; function1 = id -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(id);</span><br><span class="line">        <span class="comment">//构造器引用</span></span><br><span class="line">        Function&lt;Integer,Employee&gt; function2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(function2.apply(<span class="number">1003</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//构造器引用</span></span><br><span class="line">        BiFunction&lt;Integer,String,Employee&gt; biFunction = Employee::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println( biFunction.apply(<span class="number">3306</span>,<span class="string">&quot;Steve&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//数组引用</span></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        Function&lt;Integer,String[]&gt; function = length -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">        String[] arr1 = function.apply(<span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line">    <span class="comment">//构造器引用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        Function&lt;Integer,String[]&gt; fun2 = String[]::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(Arrays.toString(fun2.apply(<span class="number">8</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、强大的Stream-API"><a href="#4、强大的Stream-API" class="headerlink" title="4、强大的Stream API"></a>4、强大的Stream API</h3><h4 id="了解Stream"><a href="#了解Stream" class="headerlink" title="了解Stream"></a>了解Stream</h4><p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对 集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数 据库查询。也可以使用 Stream API 来并行执行操作。简而言之， Stream API 提供了一种高效且易于使用的处理数据的方式。</p><h4 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h4><p>流(Stream) 到底是什么呢？ 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p><p><strong>“集合讲的是数据，流讲的是计算！”</strong></p><p><strong>注意：</strong></p><p>①Stream 自己不会存储元素。</p><p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</p><p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p><h4 id="Stream操作的三个步骤"><a href="#Stream操作的三个步骤" class="headerlink" title="Stream操作的三个步骤"></a>Stream操作的三个步骤</h4><p>⚫创建 Stream 一个数据源（如：集合、数组），获取一个流</p><p>⚫ 中间操作 一个中间操作链，对数据源的数据进行处理</p><p>多个中间操作可以连接起来形成一个流水线，除非流水 线上触发终止操作，否则中间操作不会执行任何的处理！ 而在终止操作时一次性全部处理，称为“惰性求值”</p><p>⚫ 终止操作(终端操作) 一个终止操作，执行中间操作链，并产生结果</p><h4 id="创建Stream数据源"><a href="#创建Stream数据源" class="headerlink" title="创建Stream数据源"></a>创建Stream数据源</h4><p>方式一：通过集合的stream（）方法创建</p><p>方式二：通过数组 Arrays.stream(object[])创建</p><p>方式三：通过Stream的 Of（）创建</p><p>方式四：通过Stream 的 iterate() 和 generate()创建无限流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAPITest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Stream方式一：通过集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">        Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Stream方式二：通过数组</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">78</span>&#125;;</span><br><span class="line">        <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line">        <span class="comment">//自定义数组类 创建 Stream</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        Employee[] employees = <span class="keyword">new</span> <span class="title class_">Employee</span>[]&#123;employee,employee2&#125;;</span><br><span class="line">        Stream&lt;Employee&gt; stream = Arrays.stream(employees);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建 Stream方式三：通过Stream的of()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Stream方式四：创建无限流</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//      迭代</span></span><br><span class="line"><span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">        <span class="comment">//遍历前10个偶数</span></span><br><span class="line"><span class="comment">//     Stream.iterate(0,t -&gt; t+2).limit(10).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      生成</span></span><br><span class="line"><span class="comment">//      public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">        Stream.generate(Math::random).limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><h5 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h5><p>filter（Predicate p） 接受lambda，从流中排除某些元素。</p><p>limit(long maxSize)截断流，使其元素不超过给定数量</p><p>skip(long n) 跳过某元素，返回一个扔掉了前n个元素的流，若流中元素不足n个，则返回一个空流。与limit（n）互补</p><p>distinct()筛选，通过流所生成元素的 hashCode() 和  equals()  去除重复元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//筛选与切片</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"><span class="comment">//        filter(Predicate p) 接收 Lambda ， 从流中排除某些元素。</span></span><br><span class="line">        <span class="comment">//过滤得到工资大于七千的的员工 forEach终止操作，再次使用stream的方法时需要重新创建一个新的stream</span></span><br><span class="line">        stream.filter( employee -&gt; employee.getSalary()&gt;<span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">        <span class="comment">//        limit(long maxSize) 截断流，使其元素不超过给定数量。</span></span><br><span class="line">        employees.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//        skip(long n) 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        employees.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        <span class="comment">//        distinct() 筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class="line">        <span class="comment">//手动添加重复数据</span></span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1200</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">23131</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1200</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">45</span>,<span class="number">23131</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1200</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">23131</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1200</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">23131</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1200</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">23131</span>));</span><br><span class="line">        employees.stream().distinct().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h5><ul><li><p><code>map(Function f)</code> 接收一个函数作为参数，该函数会被应用到每个元 素上，</p><p>并将其映射成一个新的元素。</p></li><li><p><code>mapToDouble(ToDoubleFunction f)</code> 接收一个函数作为参数，该函数会被应用到每个元 素上，</p><p>产生一个新的 <code>DoubleStream</code>。</p></li><li><p><code> mapToInt(ToIntFunction f)</code> 接收一个函数作为参数，该函数会被应用到每个元 素上，</p><p>产生一个新的 <code>IntStream</code>。</p></li><li><p><code>mapToLong(ToLongFunction f)</code> 接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 <code>LongStream</code>。</p></li><li><p><code>flatMap(Function f)</code>接收一个函数作为参数，将流中的每个值都换成另 一个流，然后把所有流连接成一个流</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 映射</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">/*map(Function f) 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。*/</span></span><br><span class="line">       List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">       Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">       stream.map(str-&gt;str.toUpperCase()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//练习1：获取员工姓名长度大于3的员工姓名</span></span><br><span class="line">       List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">       Stream&lt;Employee&gt; employeeStream = employees.stream();</span><br><span class="line">       Stream&lt;String&gt; stringStream = employeeStream.map(Employee::getName);</span><br><span class="line">       stringStream.filter(name-&gt;name.length()&gt;<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">       System.out.println();</span><br><span class="line">       <span class="comment">//练习2</span></span><br><span class="line">       Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamTest2::StringToStream);</span><br><span class="line">       <span class="comment">/*streamStream.forEach(new Consumer&lt;Stream&lt;Character&gt;&gt;() &#123;</span></span><br><span class="line"><span class="comment">           @Override</span></span><br><span class="line"><span class="comment">           public void accept(Stream&lt;Character&gt; characterStream) &#123;</span></span><br><span class="line"><span class="comment">               characterStream.forEach(new Consumer&lt;Character&gt;() &#123;</span></span><br><span class="line"><span class="comment">                   @Override</span></span><br><span class="line"><span class="comment">                   public void accept(Character character) &#123;</span></span><br><span class="line"><span class="comment">                       System.out.println(character);</span></span><br><span class="line"><span class="comment">                   &#125;</span></span><br><span class="line"><span class="comment">               &#125;);</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">       &#125;);*/</span></span><br><span class="line">       streamStream.forEach(characterStream -&gt; &#123;characterStream.forEach(System.out::println);&#125;);</span><br><span class="line">       System.out.println(<span class="string">&quot;分割线---------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* flatMap(Function f) 接收一个函数作为参数，将流中的每个值都换成另一个流，</span></span><br><span class="line"><span class="comment">       然后把所有流连接成一个流 类似于集合List的addAll（）方法。  */</span></span><br><span class="line">       Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamTest2::StringToStream);</span><br><span class="line">       characterStream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">StringToStream</span><span class="params">(String str)</span>&#123;</span><br><span class="line">       ArrayList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (Character c : str.toCharArray())&#123;</span><br><span class="line">           list.add(c);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list.stream();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p><code>sorted() </code>产生一个新流，其中按自然顺序排序</p><p><code>sorted(Comparator comp)</code>产生一个新流，其中按比较器顺序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">11</span>, <span class="number">66</span>, <span class="number">3</span>, -<span class="number">9</span>, <span class="number">6</span>, <span class="number">55</span>, <span class="number">21</span>, <span class="number">33</span>);</span><br><span class="line">        <span class="comment">//自然排序  按照从小到大的顺序排序</span></span><br><span class="line">        list.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//        employees.stream().sorted().forEach(System.out::println); 报错，原因是 EmployeeData没有实现Comparable接口</span></span><br><span class="line">        employees.stream().sorted((e1,e2)-&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> Integer.compare(e1.getAge(), e2.getAge());</span><br><span class="line">            <span class="comment">//如果年龄相同，就按照工资排序</span></span><br><span class="line">            <span class="keyword">if</span> (compare !=<span class="number">0</span>)</span><br><span class="line">                 <span class="keyword">return</span> compare;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                     <span class="keyword">return</span> (<span class="type">int</span>) (e1.getSalary()-e2.getSalary());</span><br><span class="line">                &#125;</span><br><span class="line">        ).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Stream的终止操作"><a href="#Stream的终止操作" class="headerlink" title="Stream的终止操作"></a>Stream的终止操作</h4><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的 值，</p><p>例如：List、Integer，甚至是 void</p><h5 id="匹配与查找"><a href="#匹配与查找" class="headerlink" title="匹配与查找"></a>匹配与查找</h5><p><code>allMatch(Predicate p) </code>检查是否匹配所有元素</p><p><code>anyMatch(Predicate p)</code>检查是否至少匹配一个元素</p><p><code>noneMatch(Predicate p)</code> 检查是否没有匹配所有元素</p><p><code>findFirst() </code>返回第一个元素</p><p><code>findAny()</code>返回当前流中的任意元素</p><p><code>count()</code> 返回流中元素总数</p><p><code>max(Comparator c) </code>返回流中最大值</p><p><code>min(Comparator c)</code> 返回流中最小值</p><p><code>forEach(Consumer c) </code>内部迭代(使用 Collection 接口需要用户去做迭 代，称为外部迭代。</p><p>​相反，Stream API 使用内部 迭代——它帮你把迭代做了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//        allMatch(Predicate p) 检查是否匹配所有元素 练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allMatch</span> <span class="operator">=</span> employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">        System.out.println(allMatch);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        anyMatch(Predicate p) 检查是否至少匹配一个元素 练习：是否有员工工资大于一万</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line">        System.out.println(anyMatch);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        noneMatch(Predicate p) 检查是否没有匹配所有元素 练习：检查是否有员工姓雷</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">noneMatch</span> <span class="operator">=</span> employees.stream().noneMatch(employee -&gt; employee.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">        System.out.println(noneMatch);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        findFirst() 返回第一个元素</span></span><br><span class="line">        Optional&lt;Employee&gt; first = employees.stream().findFirst();</span><br><span class="line">        System.out.println(first);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        findAny() 返回当前流中的任意元素</span></span><br><span class="line">        Optional&lt;Employee&gt; any = employees.parallelStream().findAny();</span><br><span class="line">        System.out.println(any);</span><br><span class="line"><span class="comment">//        count()`返回流中元素总数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> employees.stream().filter(employee -&gt; employee.getSalary() &gt; <span class="number">3000</span>).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"><span class="comment">//        max(Comparator c) 返回流中最大值 练习：返回最高的工资</span></span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);</span><br><span class="line">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class="line">        System.out.println(maxSalary);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        min(Comparator c) 返回流中最小值 练习：返回工资最小的员工</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">        System.out.println(employee);</span><br><span class="line"><span class="comment">//        forEach(Consumer c) 内部迭代</span></span><br><span class="line"><span class="comment">//            (使用 Collection 接口需要用户去做迭 代，称为外部迭代。相反，Stream API 使用内部 迭代——它帮你把迭代做了)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;分割线================&quot;</span>);</span><br><span class="line">        employees.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h5><p><code>reduce(T iden, BinaryOperator b)</code>可以将流中元素反复结合起来，得到一个值。 返回 T</p><p><code>reduce(BinaryOperator b) </code>可以将流中元素反复结合起来，得到一个值。 返回 Optional<T></p><p>备注：map 和 reduce 的连接通常称为map-reduce 模式，因 Google 用它 来进行网络搜索而出名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        `reduce(T iden, BinaryOperator b)`可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line">        <span class="comment">//练习：计算1-10的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        System.out.println(integer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        `reduce(BinaryOperator b) `可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T &gt;</span></span><br><span class="line">        <span class="comment">//练习：求公司员工的工资总和</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Optional&lt;Double&gt; sumMoney = employees.stream().map(Employee::getSalary).reduce(<span class="comment">/*new BinaryOperator&lt;Double&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Double apply(Double aDouble, Double aDouble2) &#123;</span></span><br><span class="line"><span class="comment">                return aDouble + aDouble2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Double::sum);</span><br><span class="line">        System.out.println(sumMoney);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h5><p><code>collect(Collector c) </code></p><p>将流转换为其他形式。接收一个 Collector接口的 实现，用于给Stream中元素做汇总的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        collect(Collector c) 将流转换为其他形式。接收一个 Collector接口的</span></span><br><span class="line"><span class="comment">//        实现，用于给Stream中元素做汇总的方法 练习：匹配工资大于六千的员工，并以集合形式输出</span></span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployees().stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line">        employeeList.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        Set&lt;Employee&gt; employeeSet = EmployeeData.getEmployees().stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line">        employeeSet.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、Optional类"><a href="#5、Optional类" class="headerlink" title="5、Optional类"></a>5、Optional类</h3><p>Optional 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在， 原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且 可以避免空指针异常。</p><p><strong>常用方法：</strong><br><code>Optional.of(T t) </code>: 创建一个 Optional 实例<br><code>Optional.empty()</code> : 创建一个空的 Optional 实例<br><code>Optional.ofNullable(T t)</code>若 t 不为 null,创建 Optional 实例,否则创建空实例<br><code>isPresent() </code>: 判断是否包含值<br><code>orElse(T t)</code> : 如果调用对象包含值，返回该值，否则返回t<br><code>orElseGet(Supplier s)</code> :如果调用对象包含值，返回该值，否则返回 s 获取的值<br><code>map(Function f)</code>: 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()<br><code>flatMap(Function mapper)</code>:与 map 类似，要求返回值必须是Optional</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Optional类：为了在程序中避免出现空指针异常而创建的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 常用的方法：ofNullable(T t)</span></span><br><span class="line"><span class="comment"> *            orElse(T t)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</span></span><br><span class="line"><span class="comment">Optional.empty() : 创建一个空的 Optional 实例</span></span><br><span class="line"><span class="comment">Optional.ofNullable(T t)：t可以为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line"><span class="comment">//        girl = null;</span></span><br><span class="line">        <span class="comment">//of(T t):保证t是非空的</span></span><br><span class="line">        Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line"><span class="comment">//        girl = null;</span></span><br><span class="line">        <span class="comment">//ofNullable(T t)：t可以为null</span></span><br><span class="line">        Optional&lt;Girl&gt; optionalGirl = Optional.ofNullable(girl);</span><br><span class="line">        System.out.println(optionalGirl);</span><br><span class="line">        <span class="comment">//orElse(T t1):如果单前的Optional内部封装的t是非空的，则返回内部的t.</span></span><br><span class="line">        <span class="comment">//如果内部的t是空的，则返回orElse()方法中的参数t1.</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl1</span> <span class="operator">=</span> optionalGirl.orElse(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;赵丽颖&quot;</span>));</span><br><span class="line">        System.out.println(girl1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boy.getGirl().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>();</span><br><span class="line">        boy = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">girlName</span> <span class="operator">=</span> getGirlName(boy);</span><br><span class="line">        System.out.println(girlName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//优化以后的getGirlName():</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGirlName1</span><span class="params">(Boy boy)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(boy != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> boy.getGirl();</span><br><span class="line">            <span class="keyword">if</span>(girl != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> girl.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>();</span><br><span class="line">        boy = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">girlName</span> <span class="operator">=</span> getGirlName1(boy);</span><br><span class="line">        System.out.println(girlName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Optional类的getGirlName():</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGirlName2</span><span class="params">(Boy boy)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);</span><br><span class="line">        <span class="comment">//此时的boy1一定非空</span></span><br><span class="line">        <span class="type">Boy</span> <span class="variable">boy1</span> <span class="operator">=</span> boyOptional.orElse(<span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;迪丽热巴&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> boy1.getGirl();</span><br><span class="line"></span><br><span class="line">        Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);</span><br><span class="line">        <span class="comment">//girl1一定非空</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl1</span> <span class="operator">=</span> girlOptional.orElse(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;古力娜扎&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> girl1.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        boy = <span class="keyword">new</span> <span class="title class_">Boy</span>();</span><br><span class="line">        boy = <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;ikura&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">girlName</span> <span class="operator">=</span> getGirlName2(boy);</span><br><span class="line">        System.out.println(girlName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
